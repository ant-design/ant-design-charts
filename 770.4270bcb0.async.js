"use strict";(self.webpackChunk_ant_design_charts_site=self.webpackChunk_ant_design_charts_site||[]).push([[770],{16387:function(n,e){e.Z="import { Dendrogram, type DendrogramOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    {\n      id: 'Regression', depth: 1, \"children\": [\n        \"Multiple linear regression\",\n        \"Partial least squares\",\n        \"Multi-layer feedforward neural network\",\n        \"General regression neural network\",\n        \"Support vector regression\"\n      ]\n    },\n    { \"id\": \"Multiple linear regression\", depth: 3 },\n    { \"id\": \"Partial least squares\", depth: 3 },\n    { \"id\": \"Multi-layer feedforward neural network\", depth: 3 },\n    { \"id\": \"General regression neural network\", depth: 3 },\n    { \"id\": \"Support vector regression\", depth: 3 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n    { source: 'Regression', target: 'Multiple linear regression' },\n    { source: 'Regression', target: 'Partial least squares' },\n    { source: 'Regression', target: 'Multi-layer feedforward neural network' },\n    { source: 'Regression', target: 'General regression neural network' },\n    { source: 'Regression', target: 'Support vector regression' },\n  ],\n};\nexport default () => {\n  const options: DendrogramOptions = {\n    containerStyle: { height: '320px' },\n    autoFit: 'view',\n    data,\n    behaviors: (behaviors) => [...behaviors, 'collapse-expand'],\n  };\n\n  return <Dendrogram {...options} />\n};\n"},95329:function(n,e){e.Z="import { Dendrogram, type DendrogramOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    {\n      id: 'Regression', depth: 1, \"children\": [\n        \"Multiple linear regression\",\n        \"Partial least squares\",\n        \"Multi-layer feedforward neural network\",\n        \"General regression neural network\",\n        \"Support vector regression\"\n      ]\n    },\n    { \"id\": \"Multiple linear regression\", depth: 3 },\n    { \"id\": \"Partial least squares\", depth: 3 },\n    { \"id\": \"Multi-layer feedforward neural network\", depth: 3 },\n    { \"id\": \"General regression neural network\", depth: 3 },\n    { \"id\": \"Support vector regression\", depth: 3 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n    { source: 'Regression', target: 'Multiple linear regression' },\n    { source: 'Regression', target: 'Partial least squares' },\n    { source: 'Regression', target: 'Multi-layer feedforward neural network' },\n    { source: 'Regression', target: 'General regression neural network' },\n    { source: 'Regression', target: 'Support vector regression' },\n  ],\n};\n\nexport default () => {\n  const options: DendrogramOptions = {\n    containerStyle: { height: '320px' },\n    compact: true,\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  return <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)' }}>\n    <Dendrogram {...options} direction='vertical' />\n    <Dendrogram {...options} direction='horizontal' />\n    <Dendrogram {...options} direction='radial' />\n  </div>;\n};\n"},86603:function(n,e){e.Z="import { Dendrogram, type DendrogramOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    {\n      id: 'Regression', depth: 1, \"children\": [\n        \"Multiple linear regression\",\n        \"Partial least squares\",\n        \"Multi-layer feedforward neural network\",\n        \"General regression neural network\",\n        \"Support vector regression\"\n      ]\n    },\n    { \"id\": \"Multiple linear regression\", depth: 3 },\n    { \"id\": \"Partial least squares\", depth: 3 },\n    { \"id\": \"Multi-layer feedforward neural network\", depth: 3 },\n    { \"id\": \"General regression neural network\", depth: 3 },\n    { \"id\": \"Support vector regression\", depth: 3 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n    { source: 'Regression', target: 'Multiple linear regression' },\n    { source: 'Regression', target: 'Partial least squares' },\n    { source: 'Regression', target: 'Multi-layer feedforward neural network' },\n    { source: 'Regression', target: 'General regression neural network' },\n    { source: 'Regression', target: 'Support vector regression' },\n  ],\n};\nexport default () => {\n  const options: DendrogramOptions = {\n    containerStyle: { height: '320px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  return <Dendrogram {...options} />\n};\n"},9272:function(n,e){e.Z="import { Dendrogram, type DendrogramOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    {\n      id: 'Regression', depth: 1, \"children\": [\n        \"Multiple linear regression\",\n        \"Partial least squares\",\n        \"Multi-layer feedforward neural network\",\n        \"General regression neural network\",\n        \"Support vector regression\"\n      ]\n    },\n    { \"id\": \"Multiple linear regression\", depth: 3 },\n    { \"id\": \"Partial least squares\", depth: 3 },\n    { \"id\": \"Multi-layer feedforward neural network\", depth: 3 },\n    { \"id\": \"General regression neural network\", depth: 3 },\n    { \"id\": \"Support vector regression\", depth: 3 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n    { source: 'Regression', target: 'Multiple linear regression' },\n    { source: 'Regression', target: 'Partial least squares' },\n    { source: 'Regression', target: 'Multi-layer feedforward neural network' },\n    { source: 'Regression', target: 'General regression neural network' },\n    { source: 'Regression', target: 'Support vector regression' },\n  ],\n};\n\nexport default () => {\n  const options: DendrogramOptions = {\n    containerStyle: { height: '320px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  return <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)' }}>\n    <Dendrogram {...options} direction='vertical' />\n    <Dendrogram {...options} direction='horizontal' />\n    <Dendrogram {...options} direction='radial' />\n  </div>;\n};\n"},36203:function(n,e){e.Z="import { FlowDirectionGraph, type FlowDirectionGraphOptions } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\n\nexport default () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: FlowDirectionGraphOptions = {\n    containerStyle: { height: '400px' },\n    autoFit: 'view',\n    data,\n    transforms: (transforms) => [\n      ...transforms,\n      {\n        type: 'map-edge-line-width',\n        key: 'map-edge-line-width',\n        value: (d) => Math.random(),\n        minValue: 0,\n        maxValue: 1,\n        minLineWidth: 1,\n        maxLineWidth: 24,\n      },\n    ],\n    layout: {\n      type: 'antv-dagre',\n      nodesep: 10,\n      ranksep: 60,\n    },\n    animation: false\n  };\n\n  return <FlowDirectionGraph {...options} />;\n};\n"},32684:function(n,e){e.Z="import { type FlowDirectionGraphOptions, FlowGraph } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\n\nconst CustomNode = ({ text }: { text: string }) => {\n  return <div style={{\n    height: 'inherit',\n    width: 'inherit',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: '8px',\n    backgroundColor: '#f7f0fe',\n    color: '#873bf4',\n    boxShadow: '0 0 0 2px #873bf4'\n  }}>{text}</div>\n}\n\nexport default () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: FlowDirectionGraphOptions = {\n    containerStyle: { height: '360px' },\n    autoFit: 'view',\n    padding: [20, 0, 0, 60],\n    data,\n    node: {\n      style: {\n        component: (d) => <CustomNode text={d.value.title} />,\n        size: [120, 40],\n      },\n    },\n    edge: {\n      style: { stroke: '#873bf4' },\n    },\n    layout: {\n      type: 'dagre',\n      rankSep: 100,\n      nodeSep: 20\n    },\n    animation: false\n  };\n\n  return <FlowGraph {...options} />;\n};\n"},67783:function(n,e){e.Z="import { FlowGraph, type FlowGraphOptions } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\n\nexport default () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: FlowGraphOptions = {\n    containerStyle: { height: '400px' },\n    autoFit: 'view',\n    padding: [20, 0, 0, 40],\n    data,\n    animation: false\n  };\n\n  return <FlowGraph {...options} />;\n};\n"},363:function(n,e){e.Z="import { type FlowDirectionGraphOptions, FlowGraph, RCNode } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\n\nconst { TextNode } = RCNode;\n\nexport default () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: FlowDirectionGraphOptions = {\n    containerStyle: { height: '400px' },\n    autoFit: 'view',\n    padding: [20, 0, 0, 40],\n    data,\n    node: {\n      style: {\n        component: (d) => {\n          const isActive = d.states?.includes('active');\n          return <TextNode color={isActive ? '#D580FF' : '#1783FF'} text={d.id} type=\"filled\" />;\n        },\n      },\n    },\n    edge: {\n      state: {\n        active: {\n          stroke: '#D580FF',\n          halo: false\n        }\n      }\n    },\n    behaviors: (prev) => [...prev, {\n      type: 'hover-activate-chain',\n      onHover: (e) => {\n        e.view.setCursor('pointer');\n      },\n      onHoverEnd: (e) => {\n        e.view.setCursor('default');\n      }\n    }],\n    layout: {\n      type: 'dagre',\n      rankSep: 100,\n      nodeSep: 20\n    },\n    animation: false\n  };\n\n  return <FlowGraph {...options} />;\n};\n"},75579:function(n,e){e.Z="import { IndentedTree, CollapseExpandIcon, type IndentedTreeOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst { PlusMinusIcon } = CollapseExpandIcon;\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'], style: { collapsed: true } },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: IndentedTreeOptions = {\n    type: 'boxed',\n    containerStyle: { height: '240px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  const updateCollapseExpandBehavior = (options) => {\n    return (transforms) => [\n      ...transforms.filter((transform) => (transform as any).key !== 'collapse-expand-react-node'),\n      {\n        ...(transforms.find((transform) => (transform as any).key === 'collapse-expand-react-node') || {} as any),\n        ...options,\n      },\n    ]\n  }\n\n  return <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)' }}>\n    <IndentedTree {...options} transforms={updateCollapseExpandBehavior({ enable: true })} />\n    <IndentedTree {...options} transforms={updateCollapseExpandBehavior({ enable: true, trigger: 'node' })} />\n    <IndentedTree {...options} transforms={updateCollapseExpandBehavior({\n      enable: true,\n      iconRender: (isCollapsed) => <PlusMinusIcon isCollapsed={isCollapsed} />,\n      iconOffsetY: 8,\n    })} />\n  </div>;\n};\n"},93352:function(n,e){e.Z="import { IndentedTree, type IndentedTreeOptions, type G6 } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: IndentedTreeOptions = {\n    containerStyle: { height: '320px' },\n    type: 'boxed',\n    autoFit: 'view',\n    data,\n    transforms: (transforms) => [\n      ...transforms.filter((transform) => (transform as any).key !== 'assign-color-by-branch'),\n      {\n        ...(transforms.find((transform) => (transform as any).key === 'assign-color-by-branch') || {} as any),\n        colors: ['rgb(78, 121, 167)', 'rgb(242, 142, 44)', 'rgb(225, 87, 89)']\n      },\n    ],\n    animation: false,\n  };\n\n  return <>\n    <IndentedTree {...options} />\n  </>;\n};\n"},70189:function(n,e){e.Z="import { IndentedTree, type IndentedTreeOptions, measureTextSize } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nconst CustomNode = ({ text }: { text: string }) => {\n  return <div style={{\n    height: 'inherit',\n    width: 'inherit',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: '8px',\n    backgroundColor: '#f7f0fe',\n    color: '#873bf4',\n    boxShadow: '0 0 0 2px #873bf4'\n  }}>{text}</div>\n}\n\nexport default () => {\n  const options: IndentedTreeOptions = {\n    containerStyle: { height: '320px' },\n    autoFit: 'view',\n    padding: 20,\n    data,\n    node: {\n      style: {\n        component: (d) => <CustomNode text={d.id} />,\n        size: (data) => measureTextSize(data.id, [24, 16]),\n      },\n    },\n    edge: {\n      style: { stroke: '#873bf4' },\n    },\n    animation: false,\n  };\n  return <IndentedTree {...options} />;\n};\n"},65692:function(n,e){e.Z="import { IndentedTree, type IndentedTreeOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: IndentedTreeOptions = {\n    containerStyle: { height: '320px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n  return <IndentedTree {...options} />;\n};\n"},65375:function(n,e){e.Z="import { IndentedTree, type IndentedTreeOptions } from '@ant-design/graphs';\nimport React, { useState } from 'react';\nimport { Radio, Divider } from 'antd';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const [direction, setDirection] = useState<IndentedTreeOptions['direction']>('right');\n\n  const options: IndentedTreeOptions = {\n    containerStyle: { height: '320px' },\n    direction,\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  return <>\n    <Radio.Group value={direction} onChange={(e) => setDirection(e.target.value)}>\n      <Radio.Button value=\"right\">Right</Radio.Button>\n      <Radio.Button value=\"left\">Left</Radio.Button>\n      <Radio.Button value=\"alternate\">Alternate</Radio.Button>\n    </Radio.Group>\n    <Divider orientation=\"left\" plain>\n      Preview\n    </Divider>\n    <IndentedTree {...options} />\n  </>;\n};\n"},50093:function(n,e){e.Z="import { IndentedTree, type IndentedTreeOptions } from '@ant-design/graphs';\nimport React from 'react';\nimport { Flex } from 'antd';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: IndentedTreeOptions = {\n    containerStyle: { height: '320px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  return <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)' }}>\n    <IndentedTree {...options} type='linear' />\n    <IndentedTree {...options} type='boxed' />\n  </div>\n};\n"},35207:function(n,e){e.Z="import { MindMap, CollapseExpandIcon, type MindMapOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst { PlusMinusIcon } = CollapseExpandIcon;\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'], style: { collapsed: true } },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: MindMapOptions = {\n    type: 'boxed',\n    containerStyle: { height: '200px' },\n    padding: [50, 100],\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  const updateCollapseExpandBehavior = (options) => {\n    return (transforms) => [\n      ...transforms.filter((transform) => (transform as any).key !== 'collapse-expand-react-node'),\n      {\n        ...(transforms.find((transform) => (transform as any).key === 'collapse-expand-react-node') || {} as any),\n        ...options,\n      },\n    ]\n  }\n\n  return <>\n    <MindMap {...options} transforms={updateCollapseExpandBehavior({ enable: true })} />\n    <MindMap {...options} transforms={updateCollapseExpandBehavior({ enable: true, trigger: 'node' })} />\n    <MindMap {...options} transforms={updateCollapseExpandBehavior({\n      enable: true,\n      iconRender: (isCollapsed) => <PlusMinusIcon isCollapsed={isCollapsed} />,\n      iconOffsetX: 8,\n    })} />\n  </>;\n};\n"},59270:function(n,e){e.Z="import { MindMap, type MindMapOptions, type G6 } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: MindMapOptions = {\n    containerStyle: { height: '200px' },\n    type: 'boxed',\n    autoFit: 'view',\n    data,\n    transforms: (transforms) => [\n      ...transforms.filter((transform) => (transform as any).key !== 'assign-color-by-branch'),\n      {\n        ...(transforms.find((transform) => (transform as any).key === 'assign-color-by-branch') || {} as any),\n        colors: ['rgb(78, 121, 167)', 'rgb(242, 142, 44)', 'rgb(225, 87, 89)']\n      },\n    ],\n    animation: false,\n  };\n\n  return <>\n    <MindMap {...options} />\n  </>;\n};\n"},85997:function(n,e){e.Z="import { MindMap, type MindMapOptions, measureTextSize } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nconst CustomNode = ({ text }: { text: string }) => {\n  return <div style={{\n    height: 'inherit',\n    width: 'inherit',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: '8px',\n    backgroundColor: '#f7f0fe',\n    color: '#873bf4',\n    boxShadow: '0 0 0 2px #873bf4'\n  }}>{text}</div>\n}\n\nexport default () => {\n  const options: MindMapOptions = {\n    containerStyle: { height: '200px' },\n    autoFit: 'view',\n    padding: 20,\n    data,\n    node: {\n      style: {\n        component: (d) => <CustomNode text={d.id} />,\n        size: (data) => measureTextSize(data.id, [24, 16]),\n      },\n    },\n    edge: {\n      style: { stroke: '#873bf4' },\n    },\n    animation: false,\n  };\n  return <MindMap {...options} />;\n};\n"},92202:function(n,e){e.Z="import { MindMap, type MindMapOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: MindMapOptions = {\n    containerStyle: { height: '200px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n  return <MindMap {...options} />;\n};\n"},14469:function(n,e){e.Z="import { MindMap, type MindMapOptions } from '@ant-design/graphs';\nimport React, { useState } from 'react';\nimport { Radio, Divider } from 'antd';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const [direction, setDirection] = useState<MindMapOptions['direction']>('right');\n\n  const options: MindMapOptions = {\n    containerStyle: { height: '200px' },\n    direction,\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n  return <>\n    <Radio.Group value={direction} onChange={(e) => setDirection(e.target.value)}>\n      <Radio.Button value=\"right\">Right</Radio.Button>\n      <Radio.Button value=\"left\">Left</Radio.Button>\n      <Radio.Button value=\"alternate\">Alternate</Radio.Button>\n    </Radio.Group>\n    <Divider orientation=\"left\" plain>\n      Preview\n    </Divider>\n    <MindMap {...options} />\n  </>;\n};\n"},94357:function(n,e){e.Z="import { MindMap, type MindMapOptions } from '@ant-design/graphs';\nimport React from 'react';\n\nconst data = {\n  nodes: [\n    { id: 'Modeling Methods', depth: 0, children: ['Classification', 'Consensus', 'Regression'] },\n    { id: 'Classification', depth: 1 },\n    { id: 'Consensus', depth: 1, children: ['Models diversity', 'Methods', 'Common'] },\n    { id: 'Models diversity', depth: 2 },\n    { id: 'Methods', depth: 2 },\n    { id: 'Common', depth: 2 },\n    { id: 'Regression', depth: 1 },\n  ],\n  edges: [\n    { source: 'Modeling Methods', target: 'Classification' },\n    { source: 'Modeling Methods', target: 'Consensus' },\n    { source: 'Modeling Methods', target: 'Regression' },\n    { source: 'Consensus', target: 'Models diversity' },\n    { source: 'Consensus', target: 'Methods' },\n    { source: 'Consensus', target: 'Common' },\n  ],\n};\n\nexport default () => {\n  const options: MindMapOptions = {\n    containerStyle: { height: '200px' },\n    autoFit: 'view',\n    data,\n    animation: false,\n  };\n\n  return <>\n    <MindMap {...options} type='linear' padding={20} />\n    <MindMap {...options} type='boxed' />\n  </>;\n};\n"},73980:function(n,e){e.Z="import { NetworkGraph, type NetworkGraphOptions } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\n\nexport default () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/graph.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: NetworkGraphOptions = {\n    containerStyle: { height: '400px' },\n    autoFit: 'view',\n    data,\n    node: {\n      palette: {\n        field: 'group',\n        color: ['#D580FF', '#4292C6'],\n      },\n    },\n    animation: false,\n  };\n  return <NetworkGraph {...options} />;\n};\n"},85387:function(n,e){e.Z="import { NetworkGraph, type NetworkGraphOptions } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\n\nexport default () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/graph.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: NetworkGraphOptions = {\n    containerStyle: { height: '400px' },\n    autoFit: 'view',\n    data,\n    node: {\n      style: {\n        labelText: d => d.id,\n        labelMaxWidth: '300%',\n        labelWordWrap: true,\n        labelMaxLines: 3\n      },\n      state: {\n        active: {\n          labelMaxWidth: '1000%',\n        }\n      },\n      palette: {\n        field: 'group',\n        color: ['#D580FF', '#4292C6'],\n      },\n    },\n    behaviors: (behaviors) => [...behaviors, 'hover-activate'],\n    animation: false,\n  };\n  return <NetworkGraph {...options} />;\n};\n"},55190:function(n,e){e.Z="import { NetworkGraph, type NetworkGraphOptions } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\n\nexport default () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/graph.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options: NetworkGraphOptions = {\n    containerStyle: { height: '400px' },\n    autoFit: 'view',\n    data,\n    node: {\n      palette: {\n        field: 'group',\n        color: ['#D580FF', '#4292C6'],\n      },\n    },\n    transforms: (transforms) => [...transforms, {\n      key: 'map-node-size',\n      type: 'map-node-size',\n      maxSize: 80,\n      minSize: 16,\n      scale: 'linear',\n    }],\n    animation: false,\n  };\n  return <NetworkGraph {...options} />;\n};\n"},28600:function(n,e){e.Z='import { OrganizationChart, CollapseExpandIcon } from "@ant-design/graphs";\nimport type { OrganizationChartOptions } from "@ant-design/graphs";\nimport React from "react";\n\nconst { ArrowCountIcon } = CollapseExpandIcon;\n\nconst data = {\n  "nodes": [{ "id": "0", "data": { "email": "ejoplin@yoyodyne.com", "fax": "555-0101", "name": "Eric Joplin", "phone": "555-0100", "position": "Chief Executive Officer", "status": "online" } }, { "id": "1", "data": { "email": "groberts@yoyodyne.com", "fax": "555-0101", "name": "Gary Roberts", "phone": "555-0100", "position": "Chief Executive Assistant", "status": "busy" } }, { "id": "2", "data": { "email": "aburns@yoyodyne.com", "fax": "555-0103", "name": "Alex Burns", "phone": "555-0102", "position": "Senior Executive Assistant", "status": "offline" } }, { "id": "6", "data": { "email": "jjones@yoyodyne.com", "fax": "555-0119", "name": "John Jones", "phone": "555-0118", "position": "IT Manager", "status": "offline" } }, { "id": "11", "data": { "email": "wbrown@yoyodyne.com", "fax": "555-0129", "name": "Will Brown", "phone": "555-0128", "position": "Customer Support Manager", "status": "busy" } }, { "id": "16", "data": { "email": "ywang@yoyodyne.com", "fax": "555-0139", "name": "Yvonne Wang", "phone": "555-0138", "position": "Research and Development Manager", "status": "online" } }, { "id": "17", "data": { "email": "jsanchez@yoyodyne.com", "fax": "555-0141", "name": "Juan Sanchez", "phone": "555-0140", "position": "Chief Technology Officer", "status": "busy" } }\n  ],\n  "edges": [{ "source": "0", "target": "1" }, { "source": "1", "target": "2" }, { "source": "0", "target": "17" }, { "source": "17", "target": "6" }, { "source": "17", "target": "16" }, { "source": "6", "target": "11" }\n  ]\n}\n\nexport default () => {\n  const options: OrganizationChartOptions = {\n    autoFit: \'view\',\n    data,\n  };\n\n  const updateCollapseExpandBehavior = (options) => {\n    return (transforms) => [\n      ...transforms.filter((transform) => (transform as any).key !== \'collapse-expand-react-node\'),\n      {\n        ...(transforms.find((transform) => (transform as any).key === \'collapse-expand-react-node\') || {} as any),\n        ...options,\n      },\n    ]\n  }\n\n  return <div>\n    <OrganizationChart {...options} containerStyle={{ height: \'320px\', marginBottom: \'16px\' }} direction="horizontal" transforms={updateCollapseExpandBehavior({ enable: true, iconOffsetX: 12, })} />\n    <OrganizationChart {...options} containerStyle={{ height: \'360px\' }} direction="vertical" transforms={updateCollapseExpandBehavior({\n      enable: true,\n      iconRender: function (isCollapsed, data) {\n        return <ArrowCountIcon style={{ display: \'flex\' }} graph={this} data={data} isCollapsed={isCollapsed} />;\n      },\n    })} />\n  </div>;\n}\n'},52474:function(n,e){e.Z='import { OrganizationChart, RCNode, type OrganizationChartOptions } from "@ant-design/graphs"\nimport React from "react";\n\nconst { OrganizationChartNode } = RCNode;\n\nconst data = {\n  "nodes": [{ "id": "0", "data": { "email": "ejoplin@yoyodyne.com", "fax": "555-0101", "name": "Eric Joplin", "phone": "555-0100", "position": "Chief Executive Officer", "status": "online" } }, { "id": "1", "data": { "email": "groberts@yoyodyne.com", "fax": "555-0101", "name": "Gary Roberts", "phone": "555-0100", "position": "Chief Executive Assistant", "status": "busy" } }, { "id": "2", "data": { "email": "aburns@yoyodyne.com", "fax": "555-0103", "name": "Alex Burns", "phone": "555-0102", "position": "Senior Executive Assistant", "status": "offline" } }, { "id": "6", "data": { "email": "jjones@yoyodyne.com", "fax": "555-0119", "name": "John Jones", "phone": "555-0118", "position": "IT Manager", "status": "offline" } }, { "id": "11", "data": { "email": "wbrown@yoyodyne.com", "fax": "555-0129", "name": "Will Brown", "phone": "555-0128", "position": "Customer Support Manager", "status": "busy" } }, { "id": "16", "data": { "email": "ywang@yoyodyne.com", "fax": "555-0139", "name": "Yvonne Wang", "phone": "555-0138", "position": "Research and Development Manager", "status": "online" } }, { "id": "17", "data": { "email": "jsanchez@yoyodyne.com", "fax": "555-0141", "name": "Juan Sanchez", "phone": "555-0140", "position": "Chief Technology Officer", "status": "busy" } }\n  ],\n  "edges": [{ "source": "0", "target": "1" }, { "source": "1", "target": "2" }, { "source": "0", "target": "17" }, { "source": "17", "target": "6" }, { "source": "17", "target": "16" }, { "source": "6", "target": "11" }\n  ]\n}\n\nconst CustomNode = ({ text }: { text: string }) => {\n  return <div style={{\n    height: \'inherit\',\n    width: \'inherit\',\n    display: \'flex\',\n    justifyContent: \'center\',\n    alignItems: \'center\',\n    borderRadius: \'8px\',\n    backgroundColor: \'#f7f0fe\',\n    color: \'#873bf4\',\n    boxShadow: \'0 0 0 2px #873bf4\'\n  }}>{text}</div>\n}\n\nexport default () => {\n  const options: OrganizationChartOptions = {\n    containerStyle: { height: \'360px\' },\n    direction: \'horizontal\',\n    padding: [20, 0, 0, 80],\n    autoFit: \'view\',\n    data,\n    node: {\n      style: {\n        component: (d) => {\n          const { name, position, status } = d.data || {};\n          return <OrganizationChartNode name={name} position={position} status={status} />;\n        },\n        size: [240, 80],\n      },\n    },\n    edge: {\n      style: {\n        radius: 16,\n        lineWidth: 2,\n        endArrow: true,\n      },\n    },\n    layout: {\n      type: \'antv-dagre\',\n      nodesep: -10,\n      ranksep: 80,\n    },\n  };\n\n  const options2: OrganizationChartOptions = {\n    containerStyle: { height: \'300px\' },\n    direction: \'horizontal\',\n    padding: [20, 0, 0, 60],\n    autoFit: \'view\',\n    data,\n    node: {\n      style: {\n        component: (d) => <CustomNode text={d.data.name} />,\n        size: [120, 40],\n      },\n    },\n    edge: {\n      style: {\n        stroke: \'#873bf4\',\n        radius: 4,\n        lineWidth: 2,\n        endArrow: true,\n      },\n    },\n    layout: {\n      type: \'antv-dagre\',\n      nodesep: -10,\n      ranksep: 80,\n    },\n  }\n\n  return <div>\n    <OrganizationChart {...options} />\n    <OrganizationChart {...options2} />\n  </div>;\n}\n'},27325:function(n,e){e.Z='import { OrganizationChart, type OrganizationChartOptions } from "@ant-design/graphs"\nimport React from "react";\n\nconst data = {\n  "nodes": [{ "id": "0", "data": { "email": "ejoplin@yoyodyne.com", "fax": "555-0101", "name": "Eric Joplin", "phone": "555-0100", "position": "Chief Executive Officer", "status": "online" } }, { "id": "1", "data": { "email": "groberts@yoyodyne.com", "fax": "555-0101", "name": "Gary Roberts", "phone": "555-0100", "position": "Chief Executive Assistant", "status": "busy" } }, { "id": "2", "data": { "email": "aburns@yoyodyne.com", "fax": "555-0103", "name": "Alex Burns", "phone": "555-0102", "position": "Senior Executive Assistant", "status": "offline" } }, { "id": "6", "data": { "email": "jjones@yoyodyne.com", "fax": "555-0119", "name": "John Jones", "phone": "555-0118", "position": "IT Manager", "status": "offline" } }, { "id": "11", "data": { "email": "wbrown@yoyodyne.com", "fax": "555-0129", "name": "Will Brown", "phone": "555-0128", "position": "Customer Support Manager", "status": "busy" } }, { "id": "16", "data": { "email": "ywang@yoyodyne.com", "fax": "555-0139", "name": "Yvonne Wang", "phone": "555-0138", "position": "Research and Development Manager", "status": "online" } }, { "id": "17", "data": { "email": "jsanchez@yoyodyne.com", "fax": "555-0141", "name": "Juan Sanchez", "phone": "555-0140", "position": "Chief Technology Officer", "status": "busy" } }\n  ],\n  "edges": [{ "source": "0", "target": "1" }, { "source": "1", "target": "2" }, { "source": "0", "target": "17" }, { "source": "17", "target": "6" }, { "source": "17", "target": "16" }, { "source": "6", "target": "11" }\n  ]\n}\n\nexport default () => {\n  const options: OrganizationChartOptions = {\n    containerStyle: { height: \'320px\' },\n    autoFit: \'view\',\n    data\n  };\n\n  return <OrganizationChart {...options} />;\n}\n'},51066:function(n,e){e.Z='import { OrganizationChart, type OrganizationChartOptions } from "@ant-design/graphs"\nimport { Divider, Radio } from "antd";\nimport React, { useState } from "react";\n\nconst data = {\n  "nodes": [{ "id": "0", "data": { "email": "ejoplin@yoyodyne.com", "fax": "555-0101", "name": "Eric Joplin", "phone": "555-0100", "position": "Chief Executive Officer", "status": "online" } }, { "id": "1", "data": { "email": "groberts@yoyodyne.com", "fax": "555-0101", "name": "Gary Roberts", "phone": "555-0100", "position": "Chief Executive Assistant", "status": "busy" } }, { "id": "2", "data": { "email": "aburns@yoyodyne.com", "fax": "555-0103", "name": "Alex Burns", "phone": "555-0102", "position": "Senior Executive Assistant", "status": "offline" } }, { "id": "6", "data": { "email": "jjones@yoyodyne.com", "fax": "555-0119", "name": "John Jones", "phone": "555-0118", "position": "IT Manager", "status": "offline" } }, { "id": "11", "data": { "email": "wbrown@yoyodyne.com", "fax": "555-0129", "name": "Will Brown", "phone": "555-0128", "position": "Customer Support Manager", "status": "busy" } }, { "id": "16", "data": { "email": "ywang@yoyodyne.com", "fax": "555-0139", "name": "Yvonne Wang", "phone": "555-0138", "position": "Research and Development Manager", "status": "online" } }, { "id": "17", "data": { "email": "jsanchez@yoyodyne.com", "fax": "555-0141", "name": "Juan Sanchez", "phone": "555-0140", "position": "Chief Technology Officer", "status": "busy" } }\n  ],\n  "edges": [{ "source": "0", "target": "1" }, { "source": "1", "target": "2" }, { "source": "0", "target": "17" }, { "source": "17", "target": "6" }, { "source": "17", "target": "16" }, { "source": "6", "target": "11" }\n  ]\n}\n\nexport default () => {\n  const [direction, setDirection] = useState<OrganizationChartOptions[\'direction\']>(\'vertical\');\n\n  const options: OrganizationChartOptions = {\n    containerStyle: { height: \'320px\' },\n    autoFit: \'view\',\n    data,\n    direction\n  };\n\n  return <>\n    <Radio.Group value={direction} onChange={(e) => setDirection(e.target.value)}>\n      <Radio.Button value="vertical">Vertical</Radio.Button>\n      <Radio.Button value="horizontal">Horizontal</Radio.Button>\n    </Radio.Group>\n    <Divider orientation="left" plain>\n      Preview\n    </Divider>\n    <OrganizationChart {...options} />\n  </>;\n}\n'}}]);