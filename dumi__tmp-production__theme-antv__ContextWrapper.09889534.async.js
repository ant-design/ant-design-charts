"use strict";(self.webpackChunk_ant_design_charts_site=self.webpackChunk_ant_design_charts_site||[]).push([[2643],{89761:function(n,e,t){t.r(e),t.d(e,{default:function(){return o}});t(92379);var i=t(81408),a=t(18922),r=t(651);function o(){var n=(0,i.pC)();return(0,r.jsx)(a.w.Provider,{value:{meta:{exampleTopics:[{id:"case",title:{zh:"场景案例",en:"Show Case"},icon:"gallery",examples:[{demos:[{id:"link",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*dBDRR43tju8AAAAAAAAAAAAADmJ7AQ/original",source:"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line, Column } from '@ant-design/plots';\n\nconst CHART_MAP = {};\n\nconst DemoLine = () => {\n  const [data, setData] = useState([]);\n  const dataRef = useRef();\n  dataRef.current = data;\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/sp500.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n\n  const config = {\n    data,\n    xField: 'date',\n    yField: 'price',\n    height: 200,\n  };\n\n  const showTooltip = (data) => {\n    const { line, column } = CHART_MAP;\n    //  连续图表\n    line.emit('tooltip:show', {\n      data: { data: { x: data.date } },\n    });\n    column.emit('tooltip:show', {\n      data: { data },\n    });\n  };\n\n  const hideTooltip = () => {\n    const { line, column } = CHART_MAP;\n    line.emit('tooltip:hide');\n    column.emit('tooltip:hide');\n  };\n\n  const setTooltipPosition = (evt, chart) => {\n    const { x } = evt;\n    const { layout } = chart.getView();\n    // 根据位置粗略计算出 tooltip data\n    const percent = x / layout.width;\n    showTooltip(dataRef.current[Math.floor(percent * dataRef.current.length)]);\n  };\n\n  return (\n    <div>\n      <Line\n        {...config}\n        onReady={({ chart }) => {\n          CHART_MAP['line'] = chart;\n          chart.on('plot:pointermove', (evt) => {\n            setTooltipPosition(evt, chart);\n          });\n          chart.on('plot:pointerout', hideTooltip);\n        }}\n      />\n      <Column\n        {...config}\n        onReady={({ chart }) => {\n          CHART_MAP['column'] = chart;\n          chart.on('plot:pointermove', (evt) => {\n            setTooltipPosition(evt, chart);\n          });\n          chart.on('plot:pointerout', hideTooltip);\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"图表联动",en:"Chart link"},filename:"link.js",isNew:!1},{id:"tooltip",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vqr9QrFDTEgAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Column } from '@ant-design/plots';\n\nconst DemoDefaultTooltip = () => {\n  const data = [\n    { letter: 'A', frequency: 8167 },\n    { letter: 'B', frequency: 1492 },\n    { letter: 'C', frequency: 2782 },\n    { letter: 'D', frequency: 4253 },\n    { letter: 'E', frequency: 12702 },\n    { letter: 'F', frequency: 2288 },\n    { letter: 'G', frequency: 2015 },\n    { letter: 'H', frequency: 6094 },\n    { letter: 'I', frequency: 6966 },\n    { letter: 'J', frequency: 153 },\n    { letter: 'K', frequency: 772 },\n    { letter: 'L', frequency: 4025 },\n    { letter: 'M', frequency: 2406 },\n    { letter: 'N', frequency: 6749 },\n    { letter: 'O', frequency: 7507 },\n    { letter: 'P', frequency: 1929 },\n    { letter: 'Q', frequency: 95 },\n    { letter: 'R', frequency: 5987 },\n    { letter: 'S', frequency: 6327 },\n    { letter: 'T', frequency: 9056 },\n    { letter: 'U', frequency: 2758 },\n    { letter: 'V', frequency: 978 },\n    { letter: 'W', frequency: 236 },\n    { letter: 'X', frequency: 15 },\n    { letter: 'Y', frequency: 1974 },\n    { letter: 'Z', frequency: 74 },\n  ];\n  const config = {\n    data,\n    xField: 'letter',\n    yField: 'frequency',\n    onReady: ({ chart }) => {\n      try {\n        const { height } = chart._container.getBoundingClientRect();\n        const tooltipItem = data[Math.floor(Math.random() * data.length)];\n        chart.on(\n          'afterrender',\n          () => {\n            chart.emit('tooltip:show', {\n              data: {\n                data: tooltipItem,\n              },\n              offsetY: height / 2 - 60,\n            });\n          },\n          true,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoDefaultTooltip />, document.getElementById('container'));\n",title:{zh:"默认提示",en:"Default tooltip"},filename:"tooltip.js",isNew:!1},{id:"segmented-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*wL0FRJvibpAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Line } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSegmentedLine = () => {\n  const data = [\n    {\n      year: '1991',\n      value: 3,\n      type: 'Lon',\n    },\n    {\n      year: '1992',\n      value: 4,\n      type: 'Lon',\n    },\n    {\n      year: '1993',\n      value: 3.5,\n      type: 'Lon',\n    },\n    {\n      year: '1994',\n      value: 5,\n      type: 'Lon',\n    },\n    {\n      year: '1995',\n      value: 4.9,\n      type: 'Lon',\n    },\n    {\n      year: '1996',\n      value: 6,\n      type: 'Lon',\n    },\n    {\n      year: '1997',\n      value: null,\n      type: 'Lon',\n    },\n    {\n      year: '1998',\n      value: null,\n      type: 'Lon',\n    },\n    {\n      year: '1999',\n      value: null,\n      type: 'Lon',\n    },\n    {\n      year: '1991',\n      value: null,\n      type: 'Bor',\n    },\n    {\n      year: '1992',\n      value: null,\n      type: 'Bor',\n    },\n    {\n      year: '1993',\n      value: null,\n      type: 'Bor',\n    },\n    {\n      year: '1994',\n      value: null,\n      type: 'Bor',\n    },\n    {\n      year: '1995',\n      value: null,\n      type: 'Bor',\n    },\n    {\n      year: '1996',\n      value: 6,\n      type: 'Bor',\n    },\n    {\n      year: '1997',\n      value: 7,\n      type: 'Bor',\n    },\n    {\n      year: '1998',\n      value: 9,\n      type: 'Bor',\n    },\n    {\n      year: '1999',\n      value: 13,\n      type: 'Bor',\n    },\n  ];\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    colorField: 'type',\n    scale: {\n      color: {\n        range: ['#2688FF', 'red'],\n      },\n    },\n    style: {\n      lineWidth: 2,\n      lineDash: (items) => {\n        const { type } = items[0];\n        return type === 'Bor' ? [2, 4] : [0, 0];\n      },\n    },\n    interaction: {\n      tooltip: {\n        render: (e, { title, items }) => {\n          const list = items.filter((item) => item.value);\n          return (\n            <div key={title}>\n              <h4>{title}</h4>\n              {list.map((item) => {\n                const { name, value, color } = item;\n                return (\n                  <div>\n                    <div style={{ margin: 0, display: 'flex', justifyContent: 'space-between' }}>\n                      <div>\n                        <span\n                          style={{\n                            display: 'inline-block',\n                            width: 6,\n                            height: 6,\n                            borderRadius: '50%',\n                            backgroundColor: color,\n                            marginRight: 6,\n                          }}\n                        ></span>\n                        <span>{name}</span>\n                      </div>\n                      <b>{value}</b>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        },\n      },\n    },\n    legend: false,\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoSegmentedLine />, document.getElementById('container'));\n",title:{zh:"分段线",en:"Segmented line"},filename:"segmented-line.js",isNew:!1},{id:"memo",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*y2aySIowQlUAAAAAAAAAAAAADmJ7AQ/original",source:"import React, { memo, useState } from 'react';\nimport { Pie } from '@ant-design/plots';\nimport { Button } from 'antd';\nimport ReactDOM from 'react-dom';\nimport { isEqual } from 'lodash-es';\n\nconst DemoPie = memo(\n  ({ data, onReady }) => {\n    var config = {\n      data,\n      angleField: 'value',\n      colorField: 'type',\n      label: {\n        text: 'value',\n        position: 'outside',\n      },\n      onReady,\n    };\n    return <Pie {...config} />;\n  },\n  (pre, next) => {\n    return isEqual(pre?.data, next?.data);\n  },\n);\n\nconst DemoMemo = () => {\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState([\n    {\n      type: '分类一',\n      value: 27,\n    },\n    {\n      type: '分类二',\n      value: 25,\n    },\n    {\n      type: '分类三',\n      value: 18,\n    },\n    {\n      type: '分类四',\n      value: 15,\n    },\n    {\n      type: '分类五',\n      value: 10,\n    },\n    {\n      type: '其他',\n      value: 5,\n    },\n  ]);\n\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setCount(count + 1);\n        }}\n      >\n        不会重新渲染\n      </Button>\n      <Button\n        style={{ margin: '0 10px' }}\n        type=\"primary\"\n        onClick={() => {\n          setData(data.map((d) => ({ ...d, value: Math.floor(Math.random() * 100) })));\n        }}\n      >\n        重新渲染\n      </Button>\n      <span>{count}</span>\n      <DemoPie data={data} onReady={({ chart }) => {}} />\n    </div>\n  );\n};\n\nReactDOM.render(<DemoMemo />, document.getElementById('container'));\n",title:{zh:"防止重复渲染",en:"Memo"},filename:"memo.js",isNew:!1},{id:"filter",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*2e6jSoEnW60AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Column } from '@ant-design/plots';\n\nconst DemoDefaultTooltip = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/iPY8JFnxdb/dodge-padding.json',\n    },\n    xField: '月份',\n    yField: '月均降雨量',\n    colorField: 'name',\n    group: true,\n    style: {\n      inset: 5,\n    },\n    onReady: ({ chart }) => {\n      try {\n        chart.on('afterrender', () => {\n          chart.emit('legend:filter', {\n            data: { channel: 'color', values: ['London'] },\n          });\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoDefaultTooltip />, document.getElementById('container'));\n",title:{zh:"图例过滤",en:"Legend filter"},filename:"filter.js",isNew:!1},{id:"change-data",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*0O5VR5z7zlgAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoChangeData = () => {\n  const [data, setData] = React.useState([]);\n  React.useEffect(() => {\n    setTimeout(() => {\n      setData([\n        { type: '分类一', value: 27 },\n        { type: '分类二', value: 25 },\n        { type: '分类三', value: 18 },\n        { type: '分类四', value: 15 },\n        { type: '分类五', value: 10 },\n        { type: '其他', value: 5 },\n      ]);\n    }, 1000);\n  }, []);\n  const config = {\n    data,\n    angleField: 'value',\n    colorField: 'type',\n    label: {\n      text: 'value',\n      style: {\n        fontWeight: 'bold',\n      },\n    },\n    legend: {\n      color: {\n        title: false,\n        position: 'right',\n        rowPadding: 5,\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoChangeData />, document.getElementById('container'));\n",title:{zh:"数据更新",en:"Data update"},filename:"change-data.js",isNew:!1},{id:"custom-shape",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*n4GESr9WhDQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoCustomShape = () => {\n  const config = {\n    data: [\n      { type: '1-3秒', value: 0.36 },\n      { type: '4-10秒', value: 0.25 },\n      { type: '11-30秒', value: 0.24 },\n      { type: '31-60秒', value: 0.19 },\n      { type: '1-3分', value: 0.12 },\n      { type: '3-10分', value: 0.15 },\n      { type: '10-30分', value: 0.16 },\n      { type: '30+分', value: 0.1 },\n    ],\n    xField: 'type',\n    yField: 'value',\n    annotations: [\n      {\n        type: 'shape',\n        xField: 'type',\n        yField: 'value',\n        style: {\n          render: ({ x, y }, context) => {\n            const { document } = context;\n            const g = document.createElement('g', {});\n            const { width } = document.getElementsByClassName('element')[0].getBBox();\n            const rect = document.createElement('rect', {\n              style: {\n                x: x - width / 2,\n                y: y - 20,\n                width,\n                height: 10,\n                fill: '#FF8C16',\n                cursor: 'pointer',\n              },\n            });\n            g.appendChild(rect);\n            return g;\n          },\n        },\n      },\n    ],\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoCustomShape />, document.getElementById('container'));\n",title:{zh:"自定义图形标记",en:"Custom shape"},filename:"custom-shape.js",isNew:!1},{id:"default-selected",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*PKwaRJj4WNsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bar } from '@ant-design/plots';\n\nconst DemoSelected = () => {\n  const config = {\n    data: [\n      { type: '分类一', value: 87 },\n      { type: '分类二', value: 65 },\n      { type: '分类三', value: 48 },\n      { type: '分类四', value: 15 },\n      { type: '分类五', value: 10 },\n      { type: '其他', value: 5 },\n    ],\n    xField: 'type',\n    yField: 'value',\n    colorField: 'type',\n    state: {\n      unselected: { opacity: 0.5 },\n      selected: { lineWidth: 3, stroke: 'red' },\n    },\n    interaction: {\n      elementSelect: true,\n    },\n    onReady: ({ chart, ...rest }) => {\n      chart.on(\n        'afterrender',\n        () => {\n          const { document } = chart.getContext().canvas;\n          const elements = document.getElementsByClassName('element');\n          elements[0]?.emit('click');\n        },\n        true,\n      );\n    },\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoSelected />, document.getElementById('container'));\n",title:{zh:"默认选中",en:"Default selected"},filename:"default-selected.js",isNew:!1}],icon:"",id:"interactions",title:{en:"Advanced interactions",zh:"高级交互"},api:{zh:"",en:""},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"statistics",title:{zh:"统计图表",en:"Statistics"},icon:"line",examples:[{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*EH-dTLnE4bcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Line } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLine = () => {\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    point: {\n      shapeField: 'square',\n      sizeField: 4,\n    },\n    interaction: {\n      tooltip: {\n        marker: false,\n      },\n    },\n    style: {\n      lineWidth: 2,\n    },\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"基础折线图",en:"Basic line plot"},filename:"basic.js",isNew:!1},{id:"line-var-size",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*2G1GRr60VI0AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/55424a73-7cb8-4f79-b60d-3ab627ac5698.json',\n    },\n    xField: (d) => new Date(d.year),\n    yField: 'value',\n    sizeField: 'value',\n    shapeField: 'trail',\n    legend: { size: false },\n    colorField: 'category',\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"变宽折线图",en:"Var Size Line Chart"},filename:"line-var-size.js",isNew:!1},{id:"connect-nulls",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*46DiTJLA2t8AAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/line-connect-nulls.json',\n      transform: [\n        {\n          type: 'map',\n          callback: (d) => ({\n            ...d,\n            close: new Date(d.date).getUTCMonth() < 3 ? NaN : d.close,\n          }),\n        },\n      ],\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'close',\n    connectNulls: {\n      connect: true,\n      connectStroke: '#aaa',\n    },\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"连接空值",en:"Connect nulls plot"},filename:"connect-nulls.js",isNew:!1},{id:"series",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*y84BS5AqJLYAAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/line-series.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'unemployment',\n    colorField: 'steelblue',\n    seriesField: 'division',\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"系列折线图",en:"Series Line plot"},filename:"series.js",isNew:!1},{id:"normalize",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*S3FFTaw_HTUAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/indices.json',\n    },\n    xField: (d) => new Date(d.Date),\n    yField: 'Close',\n    colorField: 'Symbol',\n    normalize: { basis: 'first', groupBy: 'color' },\n    scale: {\n      y: { type: 'log' },\n    },\n    axis: {\n      y: { title: '↑ Change in price (%)' },\n    },\n    label: {\n      text: 'Symbol',\n      selector: 'last',\n      style: {\n        fontSize: 10,\n      },\n    },\n    tooltip: { channel: 'y', valueFormatter: '.1f' },\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"归一化折线图",en:"Normalize Line plot"},filename:"normalize.js",isNew:!1},{id:"color",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*WVwSRa-HQAcAAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/temperatures1.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'value',\n    colorField: 'condition',\n    shapeField: 'hvh',\n    style: {\n      gradient: 'x',\n      lineWidth: 2,\n    },\n    scale: {\n      y: { nice: true },\n      color: {\n        domain: ['CLR', 'FEW', 'SCT', 'BKN', 'OVC', 'VV '],\n        range: ['deepskyblue', 'lightskyblue', 'lightblue', '#aaaaaa', '#666666', '#666666'],\n      },\n    },\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"多色折线图",en:"Colors Line plot"},filename:"color.js",isNew:!1},{id:"line-threshold",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*YUrlS4AWYFkAAAAAAAAAAAAADmJ7AQ",source:"import { Line } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/temperatures2.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'value',\n    shapeField: 'hvh',\n    colorField: 'value',\n    axis: {\n      x: { title: 'date' },\n    },\n    style: {\n      gradient: 'y',\n      lineWidth: 1.5,\n      lineJoin: 'round',\n    },\n    scale: {\n      x: { utc: true },\n      y: { nice: true },\n      color: { type: 'threshold', domain: [55], range: ['black', 'red'] },\n    },\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"阈值折线图",en:"Threshold Line Chart"},filename:"line-threshold.js",isNew:!1},{id:"line-text",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*QQesT7AIqVgAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n      transform: [\n        {\n          type: 'fold',\n          fields: ['blockchain', 'nlp'],\n          key: 'type',\n          value: 'value',\n        },\n      ],\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'value',\n    colorField: 'type',\n    axis: {\n      x: { labelAutoHide: 'greedy' },\n    },\n    annotations: [\n      {\n        type: 'text',\n        data: [new Date('2017-12-17'), 100],\n        style: {\n          text: '2014-03, 受比特币影响，blockchain 1834',\n          wordWrap: true,\n          wordWrapWidth: 164,\n          dx: -174,\n          dy: 30,\n          fill: '#2C3542',\n          fillOpacity: 0.65,\n          fontSize: 10,\n          background: true,\n          backgroundRadius: 2,\n          connector: true,\n          startMarker: true,\n          startMarkerFill: '#2C3542',\n          startMarkerFillOpacity: 0.65,\n        },\n        tooltip: false,\n      },\n    ],\n  };\n\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"文本标记的折线图",en:"Line, Text Annotation"},filename:"line-text.js",isNew:!1},{id:"slider",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xZAVSKcWzrwAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Line } from '@ant-design/plots';\nimport { format } from 'fecha';\n\nconst DemoLine = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/line-slider.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'close',\n    axis: { x: { title: false, size: 40 }, y: { title: false, size: 36 } },\n    slider: {\n      x: { labelFormatter: (d) => format(d, 'YYYY/M/D') },\n      y: { labelFormatter: '~s' },\n    },\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"缩略轴",en:"Slider"},filename:"slider.js",isNew:!1},{id:"style-callback",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*p1n4RI9YynkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Line } from '@ant-design/plots';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLine = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/bmw-prod/c48dbbb1-fccf-4a46-b68f-a3ddb4908b68.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n  const config = {\n    data,\n    xField: 'date',\n    yField: 'value',\n    colorField: 'type',\n    axis: {\n      y: {\n        labelFormatter: (v) => `${v}`.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (s) => `${s},`),\n      },\n    },\n    scale: { color: { range: ['#30BF78', '#F4664A', '#FAAD14'] } },\n    style: {\n      lineWidth: 2,\n      lineDash: (data) => {\n        if (data[0].type === 'register') return [4, 4];\n      },\n      opacity: (data) => {\n        if (data[0].type !== 'register') return 0.5;\n      },\n    },\n  };\n\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"通过回调函数指定折线样式",en:"Set line style through callback"},filename:"style-callback.js",isNew:!1}],icon:"",id:"line",title:{en:"Line",zh:"折线图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:0},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZxtyTrhyN4sAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'close',\n  };\n\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"基础面积图",en:"Basic Area plot"},filename:"basic.js",isNew:!1},{id:"missing-data-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ns2sS5S_VEAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: (d) => (new Date(d.date).getUTCMonth() <= 3 ? NaN : d.close),\n    connectNulls: {\n      connect: true,\n      connectFill: 'grey',\n      connectFillOpacity: 0.15,\n    },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"数据缺失面积图",en:"missing data area plot"},filename:"missing-data-area.js",isNew:!1},{id:"stacked-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*z1rZToSDbZcAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'unemployed',\n    colorField: 'industry',\n    shapeField: 'smooth',\n    stack: true, // Try to remove this line.\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"堆叠面积图",en:"Stacked Area Chart"},filename:"stacked-area.js",isNew:!1},{id:"percentage-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*pC8lSIAE9g0AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'unemployed',\n    colorField: 'industry',\n    normalize: true,\n    stack: true,\n    tooltip: { channel: 'y0', valueFormatter: '.0%' },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"归一化堆积面积图",en:"Normalized Area, MaxIndex"},filename:"percentage-area.js",isNew:!1},{id:"step-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NRD9RKPyOEsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: [\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ],\n    xField: 'year',\n    yField: 'value',\n    shapeField: 'hvh',\n    label: {\n      text: 'value',\n      style: {\n        fontSize: 10,\n        textAlign: (_, idx, arr) => {\n          if (idx === 0) return 'left';\n          if (idx === arr.length - 1) return 'right';\n          return 'center';\n        },\n      },\n    },\n    style: {\n      opacity: 0.4,\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n    },\n    line: {},\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"阶梯面积图",en:"Step Area Chart"},filename:"step-area.js",isNew:!1},{id:"area-gradient",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*VasvRpYGSLYAAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/stocks.json',\n      transform: [{ type: 'filter', callback: (d) => d.symbol === 'GOOG' }],\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'price',\n    style: {\n      fill: 'linear-gradient(-90deg, white 0%, darkgreen 100%)',\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n    },\n    line: {\n      style: {\n        stroke: 'darkgreen',\n        strokeWidth: 2,\n      },\n    },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"渐变色面积图",en:"Gradient Area Chart"},filename:"area-gradient.js",isNew:!1},{id:"orderly-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*jyBQQo9Dr84AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'unemployed',\n    colorField: 'industry',\n    shapeField: 'smooth',\n    axis: {\n      x: { title: 'Date' },\n      y: { labelFormatter: '~s' },\n    },\n    legend: {\n      color: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"彩条图",en:"Stripe Chart"},filename:"orderly-area.js",isNew:!1},{id:"streamgraph",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*q6vQRZf60uEAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'unemployed',\n    colorField: 'industry',\n    stack: true,\n    symmetry: true,\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"河流图",en:"Streamgraph"},filename:"streamgraph.js",isNew:!1},{id:"range-spline-area",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*oLjrRb6l8CAAAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/range-spline-area.json',\n      transform: [\n        {\n          type: 'map',\n          callback: ([x, low, high, v2, v3]) => ({ x, low, high, v2, v3 }),\n        },\n      ],\n    },\n    xField: 'x',\n    yField: ['low', 'high'],\n    shapeField: 'smooth',\n    style: {\n      fillOpacity: 0.5,\n      fill: '#64b5f6',\n      lineWidth: 1,\n    },\n    axis: {\n      y: { title: false },\n    },\n    scale: {\n      x: { type: 'linear', tickCount: 10 },\n    },\n    point: {\n      yField: 'v2',\n      shapeField: 'point',\n      sizeField: 2,\n    },\n    line: {\n      yField: 'v3',\n      style: {\n        stroke: '#FF6B3B',\n      },\n    },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"区间曲线面积图",en:"Range Spline Area Chart"},filename:"range-spline-area.js",isNew:!1},{id:"cascade-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eLO6QLNTEAQAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/f38a8ad0-6e1f-4bb3-894c-7db50781fdec.json',\n    },\n    xField: (d) => new Date(d.year),\n    yField: 'revenue',\n    seriesField: 'format',\n    colorField: 'group',\n    shapeField: 'smooth',\n    stack: {\n      orderBy: 'maxIndex',\n      reverse: true,\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n    },\n    tooltip: { channel: 'y', valueFormatter: '.2f' },\n    line: {\n      stack: {\n        orderBy: 'maxIndex',\n        reverse: true,\n        y: 'y1',\n      },\n      style: {\n        stroke: 'white',\n      },\n    },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"出现顺序堆叠面积图",en:"Stacked Area"},filename:"cascade-area.js",isNew:!1},{id:"area-difference",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ynkRQoVt2VAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Area } from '@ant-design/plots';\n\nconst DemoArea = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n      transform: [\n        {\n          type: 'fold',\n          fields: ['New York', 'San Francisco'],\n          key: 'city',\n          value: 'temperature',\n        },\n      ],\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'temperature',\n    colorField: 'city',\n    shapeField: 'hvh',\n    diff: true,\n    scale: {\n      color: { range: ['#67a9cf', '#ef8a62'] },\n    },\n    line: {\n      yField: 'San Francisco',\n      style: {\n        stroke: '#000',\n      },\n    },\n  };\n  return <Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"差分面积图",en:"Area Difference"},filename:"area-difference.js",isNew:!1}],icon:"",id:"area",title:{en:"Area",zh:"面积图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"bar",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eU1cRqm_fPAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Bar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoBar = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/bar-bar.json',\n    },\n    xField: 'letter',\n    yField: 'frequency',\n    sort: {\n      reverse: true,\n    },\n    label: {\n      text: 'frequency',\n      formatter: '.1%',\n      style: {\n        textAlign: (d) => (+d.frequency > 0.008 ? 'right' : 'start'),\n        fill: (d) => (+d.frequency > 0.008 ? '#fff' : '#000'),\n        dx: (d) => (+d.frequency > 0.008 ? -5 : 5),\n      },\n    },\n    axis: {\n      y: {\n        labelFormatter: '.0%',\n      },\n    },\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoBar />, document.getElementById('container'));\n",title:{zh:"柱形图",en:"Bar Chart"},filename:"bar.js",isNew:!1},{id:"shape",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*hB17Sq7hyuMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Bar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { year: '1951 年', value: 38 },\n  { year: '1952 年', value: 52 },\n  { year: '1956 年', value: 61 },\n  { year: '1957 年', value: 145 },\n  { year: '1958 年', value: 48 },\n];\n\nconst DemoBar = () => {\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    shapeField: 'hollow',\n    colorField: 'year',\n    legend: {\n      color: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    },\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoBar />, document.getElementById('container'));\n",title:{zh:"自定义条形图 shape",en:"Customize shape of bar plot"},filename:"shape.js",isNew:!1},{id:"stacked",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LJi6RaswKdkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Bar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoBar = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/bar-stacked.json',\n    },\n    xField: 'state',\n    yField: 'population',\n    colorField: 'age',\n    stack: true,\n    sort: {\n      reverse: true,\n      by: 'y',\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n      x: {\n        labelSpacing: 4,\n        style: {\n          labelTransform: 'rotate(90)',\n        },\n      },\n    },\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoBar />, document.getElementById('container'));\n",title:{zh:"堆叠条形图",en:"Stacked Bar Chart"},filename:"stacked.js",isNew:!1},{id:"normalized-stacked",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*K_YBQ7TmxkQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Bar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoBar = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/bar-normalized-stacked.json',\n    },\n    xField: 'state',\n    yField: 'population',\n    colorField: 'age',\n    stack: true,\n    normalize: true,\n    sort: {\n      reverse: true,\n      by: 'y',\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n      x: {\n        labelSpacing: 4,\n        style: {\n          labelTransform: 'rotate(90)',\n        },\n      },\n    },\n    tooltip: { items: [{ channel: 'y0', valueFormatter: '.0%' }] },\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoBar />, document.getElementById('container'));\n",title:{zh:"归一化条形图",en:"Normalized Bar Chart"},filename:"normalized-stacked.js",isNew:!1},{id:"background",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*oDkdRodUnXwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Bar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  {\n    labelName: '蓝领',\n    value: 110,\n  },\n  {\n    labelName: '白领',\n    value: 220,\n  },\n  {\n    labelName: '制造业蓝领',\n    value: 330,\n  },\n  {\n    labelName: '退休人员',\n    value: 440,\n  },\n];\n\nconst DemoBar = () => {\n  const config = {\n    data,\n    xField: 'labelName',\n    yField: 'value',\n    paddingRight: 80,\n    style: {\n      maxWidth: 25,\n    },\n    markBackground: {\n      label: {\n        text: ({ originData }) => {\n          return `${(originData.value / 1000) * 100}% | ${originData.value}`;\n        },\n        position: 'right',\n        dx: 80,\n        style: {\n          fill: '#aaa',\n          fillOpacity: 1,\n          fontSize: 14,\n        },\n      },\n      style: {\n        fill: '#eee',\n      },\n    },\n    scale: {\n      y: {\n        domain: [0, 1000],\n      },\n    },\n    axis: {\n      x: {\n        tick: false,\n        title: false,\n      },\n      y: {\n        grid: false,\n        tick: false,\n        label: false,\n        title: false,\n      },\n    },\n    interaction: {\n      elementHighlight: false,\n    },\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoBar />, document.getElementById('container'));\n",title:{zh:"背景条形图",en:"Background Bar Chart"},filename:"background.js",isNew:!1},{id:"gantt",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*y260TK0A4UQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Bar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoBar = () => {\n\n  const events = [\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ];\n\n  const config = {\n    data: events,\n    xField: 'name',\n    yField: ['endTime', 'startTime'],\n    colorField: 'name'\n  };\n  return <Bar {...config} />;\n};\n\nReactDOM.render(<DemoBar />, document.getElementById('container'));",title:{zh:"甘特图",en:"Gantt Chart"},filename:"gantt.js",isNew:!1}],icon:"",id:"bar",title:{en:"Bar",zh:"条形图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### markBackground \n \n<description>**optional** *BarOptions*</description> \n \nmark 背景配置 \n \n```ts \n{ \n  scale: { \n    y: { \n      domain: [0, 200] \n    } \n  }, \n  markBackground: { \n    style: { \n      fill: '#eee' \n    } \n  }, \n} \n``` \n \n示例： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LD4DR6LVD9UAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### markBackground \n \n<description>**optional** *BarOptions*</description> \n \nmark 背景配置 \n \n```ts \n{ \n  scale: { \n    y: { \n      domain: [0, 200] \n    } \n  }, \n  markBackground: { \n    style: { \n      fill: '#eee' \n    } \n  }, \n} \n``` \n \n示例： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LD4DR6LVD9UAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"column",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*5u8UTb6iifcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/column-column.json',\n    },\n    xField: 'letter',\n    yField: 'frequency',\n    label: {\n      text: (d) => `${(d.frequency * 100).toFixed(1)}%`,\n      textBaseline: 'bottom',\n    },\n    axis: {\n      y: {\n        labelFormatter: '.0%',\n      },\n    },\n    style: {\n      // 圆角样式\n      radiusTopLeft: 10,\n      radiusTopRight: 10,\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"柱形图",en:"Column Chart"},filename:"column.js",isNew:!1},{id:"color",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*yrKvQZUMaVoAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { type: '1-3秒', value: 0.16 },\n  { type: '4-10秒', value: 0.125 },\n  { type: '11-30秒', value: 0.24 },\n  { type: '31-60秒', value: 0.19 },\n  { type: '1-3分', value: 0.22 },\n  { type: '3-10分', value: 0.05 },\n  { type: '10-30分', value: 0.01 },\n  { type: '30+分', value: 0.015 },\n];\n\nconst DemoColumn = () => {\n  const config = {\n    data,\n    xField: 'type',\n    yField: 'value',\n    style: {\n      fill: ({ type }) => {\n        if (type === '10-30分' || type === '30+分') {\n          return '#22CBCC';\n        }\n        return '#2989FF';\n      },\n    },\n    label: {\n      text: (originData) => {\n        const val = parseFloat(originData.value);\n        if (val < 0.05) {\n          return (val * 100).toFixed(1) + '%';\n        }\n        return '';\n      },\n      offset: 10,\n    },\n    legend: false,\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"自定义柱状图颜色",en:"Column plot color"},filename:"color.js",isNew:!1},{id:"column-maxwidth",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*j1LdS6KxxsAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Column } from '@ant-design/plots';\n\nconst DemoColumn = () => {\n  const config = {\n    data: [{ letter: 'A', frequency: 120 }],\n    xField: 'letter',\n    yField: 'frequency',\n    scale: {\n      x: { padding: 0.5 },\n    },\n    style: {\n      maxWidth: 200,\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"限制宽度的柱形图",en:"Column with maxWidth"},filename:"column-maxwidth.js",isNew:!1},{id:"slider",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*QhoHQ4QIts0AAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Column } from '@ant-design/plots';\n\nconst DemoColumn = () => {\n  const chartRef = useRef();\n  useEffect(() => {\n    console.log({ chartRef });\n    if (chartRef.current) {\n    }\n  }, []);\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/be63e0a2-d2be-4c45-97fd-c00f752a66d4.json',\n    },\n    xField: '城市',\n    yField: '销售额',\n    slider: {\n      x: {\n        values: [0.1, 0.2],\n      },\n    },\n  };\n  return <Column {...config} ref={chartRef} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"带缩略轴柱状图",en:"Column plot with slider"},filename:"slider.js",isNew:!1},{id:"scrollbar",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*9TgiRbYJBUsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Column } from '@ant-design/plots';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/be63e0a2-d2be-4c45-97fd-c00f752a66d4.json',\n    },\n    xField: '城市',\n    yField: '销售额',\n    scrollbar: {\n      x: {\n        ratio: 0.05,\n      },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"带滚动条柱状图",en:"Column plot with scrollbar"},filename:"scrollbar.js",isNew:!1},{id:"region-annotation",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ceFSs9FuNn/2922d5e4-df5f-4512-8f8f-6f2ec258c7b8.png",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { month: '1', value: 1078 },\n  { month: '2', value: 1216 },\n  { month: '3', value: 758 },\n  { month: '4', value: 623 },\n  { month: '5', value: 319 },\n  { month: '6', value: 422 },\n  { month: '7', value: -4 },\n  { month: '8', value: -217 },\n  { month: '9', value: -358 },\n  { month: '10', value: 1513 },\n  { month: '11', value: 1388 },\n  { month: '12', value: 597 },\n];\n\nconst DemoColumn = () => {\n  const config = {\n    data,\n    xField: 'month',\n    yField: 'value',\n    scale: {\n      y: {\n        domainMax: 2000,\n        domainMin: -1000,\n      },\n    },\n    axis: {\n      x: {\n        labelFormatter: (val) => `${val} 月`,\n      },\n    },\n    annotations: [\n      {\n        type: 'rangeX',\n        data: [{ month: ['7', '9'] }],\n        xField: 'month',\n      },\n    ],\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"带辅助框标注的基础柱状图",en:"Basic column plot with region annotation"},filename:"region-annotation.js",isNew:!1},{id:"range",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*OAr7RpZGGtwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst EPSILON = 1e-6;\n\nconst DemoColumn = () => {\n  const config = {\n    data: [\n      { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n      { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n      { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n      { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n      { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n      { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n      { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n      { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n      { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n      { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n      { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n      { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n      { month: 'Total', start: 0, end: 3164946 },\n    ],\n    xField: 'month',\n    yField: ['start', 'end'],\n    colorField: (d) => (d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease'),\n    axis: {\n      y: { labelFormatter: '~s' },\n    },\n    tooltip: {\n      items: ['start', 'end'],\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"区间柱形图",en:"Range Column Chart"},filename:"range.js",isNew:!1},{id:"group-and-stack",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*PflbQJXr-WQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/mor%26R5yBI9/stack-group-column.json',\n    },\n    xField: 'product_type',\n    yField: 'order_amt',\n    seriesField: 'sex',\n    stack: {\n      groupBy: ['x', 'series'],\n      series: false,\n    },\n    colorField: 'product_sub_type',\n    tooltip: (item) => {\n      return { origin: item };\n    },\n    interaction: {\n      tooltip: {\n        render: (e, { title, items }) => {\n          return (\n            <div>\n              <h4>{title}</h4>\n              {items.map((item) => {\n                const { name, color, origin } = item;\n                return (\n                  <div>\n                    <div style={{ margin: 0, display: 'flex', justifyContent: 'space-between' }}>\n                      <div>\n                        <span\n                          style={{\n                            display: 'inline-block',\n                            width: 6,\n                            height: 6,\n                            borderRadius: '50%',\n                            backgroundColor: color,\n                            marginRight: 6,\n                          }}\n                        ></span>\n                        <span>\n                          {origin['product_sub_type']}-{name}\n                        </span>\n                      </div>\n                      <b>{origin['order_amt']}</b>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        },\n      },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"分组堆叠柱状图",en:"Group and stack Column Chart"},filename:"group-and-stack.js",isNew:!1},{id:"bar-dodged",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*3-WvRqW_iPUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/column-bar-dodged.json',\n    },\n    xField: 'state',\n    yField: 'population',\n    colorField: 'age',\n    group: true,\n    sort: {\n      reverse: true,\n      by: 'y',\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n    },\n    interaction: {\n      tooltip: { shared: true },\n      elementHighlight: { background: true },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"分组条形图",en:"Dodged Bar Chart"},filename:"bar-dodged.js",isNew:!1},{id:"stacked",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MMRnQbTjazcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/column-stacked.json',\n    },\n    xField: 'state',\n    yField: 'population',\n    colorField: 'age',\n    stack: true,\n    sort: {\n      reverse: true,\n      by: 'y',\n    },\n    axis: {\n      y: { labelFormatter: '~s' },\n      x: {\n        labelSpacing: 4,\n        style: {\n          labelTransform: 'rotate(90)',\n        },\n      },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"堆叠柱形图",en:"Stacked Column Chart"},filename:"stacked.js",isNew:!1},{id:"connect-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_f0VT6nfCE4AAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/8elHX%26irfq/stack-column-data.json',\n    },\n    xField: 'year',\n    yField: 'value',\n    stack: true,\n    colorField: 'type',\n    label: {\n      text: 'value',\n      textBaseline: 'bottom',\n      position: 'inside',\n    },\n    interaction: {\n      elementHighlightByColor: {\n        link: true,\n      },\n    },\n    state: {\n      active: { linkFill: 'rgba(0,0,0,0.25)', stroke: 'black', lineWidth: 0.5 },\n      inactive: { opacity: 0.5 },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"自定义联通区域样式柱状图",en:"Stacked column plot with connectedArea"},filename:"connect-area.js",isNew:!1},{id:"annotation-label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZdrbR4mdg9sAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { forEach, groupBy } from 'lodash';\n\nconst DemoColumn = () => {\n  const [data, setData] = useState([]);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/antfincdn/8elHX%26irfq/stack-column-data.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const annotations = [];\n  forEach(groupBy(data, 'year'), (values, k) => {\n    const value = values.reduce((a, b) => a + b.value, 0);\n    annotations.push({\n      type: 'text',\n      data: [k, value],\n      style: {\n        textAlign: 'center',\n        fontSize: 14,\n        fill: 'rgba(0,0,0,0.85)',\n      },\n      xField: 'year',\n      yField: 'value',\n      style: {\n        text: `${value}`,\n        textBaseline: 'bottom',\n        position: 'top',\n        textAlign: 'center',\n      },\n      tooltip: false,\n    });\n  });\n\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    stack: true,\n    colorField: 'type',\n    label: {\n      text: 'value',\n      textBaseline: 'bottom',\n      position: 'inside',\n    },\n    annotations,\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"借助图形标注展示总计 label",en:"Show total label with annotations"},filename:"annotation-label.js",isNew:!1},{id:"dodge-padding",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/VL8xZlzwm5/2d96f1be-83c6-47c8-8a02-6023ecdbe035.png",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/iPY8JFnxdb/dodge-padding.json',\n    },\n    xField: '月份',\n    yField: '月均降雨量',\n    colorField: 'name',\n    group: true,\n    style: {\n      // 矩形四个方向的内边距\n      inset: 5,\n      // 矩形单个方向的内边距\n      // insetLeft:5,\n      // insetRight:20,\n      // insetBottom:10\n      // insetTop:10\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"分组柱状图像素级组内柱子间距",en:"DodgePadding of grouped column plot"},filename:"dodge-padding.js",isNew:!1},{id:"change-data",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*b5Q8R6DHJZMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DATA = [1, 2, 3, 4, 5, 6, 7, 8];\n\nconst DemoColumn = () => {\n  const [data, setData] = React.useState(DATA);\n\n  React.useEffect(() => {\n    const time = setInterval(() => {\n      setData([\n        ...DATA.sort(() => {\n          return Math.random() - 0.5;\n        }),\n      ]);\n    }, 2000);\n    return () => clearInterval(time);\n  }, []);\n\n  const config = {\n    data: data.map((value) => ({\n      index: value.toString(),\n      value,\n    })),\n    xField: 'index',\n    yField: 'value',\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"数据更新",en:"Change Data"},filename:"change-data.js",isNew:!1},{id:"conversion-tag",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*YHpIRrooM4AAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: [\n      { action: '浏览网站', pv: 50000 },\n      { action: '放入购物车', pv: 35000 },\n      { action: '生成订单', pv: 25000 },\n      { action: '支付订单', pv: 15000 },\n      { action: '完成交易', pv: 8500 },\n    ],\n    xField: 'action',\n    yField: 'pv',\n    label: {\n      text: (d) => d.pv,\n      textBaseline: 'bottom',\n    },\n    style: {\n      maxWidth: 50,\n    },\n    conversionTag: {\n      size: 40,\n      spacing: 4,\n      text: {\n        formatter: (prev, next) => `${((next / prev) * 100).toFixed(1)}%`,\n      },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"带转化率柱状图",en:"Column plot with conversion tag"},filename:"conversion-tag.js",isNew:!1},{id:"percent",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*3FTARIxIDHMAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Column } from '@ant-design/plots';\n\nconst data = [\n  {\n    country: 'Asia',\n    year: '1750',\n    value: 502,\n  },\n  {\n    country: 'Asia',\n    year: '1800',\n    value: 635,\n  },\n  {\n    country: 'Asia',\n    year: '1850',\n    value: 809,\n  },\n  {\n    country: 'Asia',\n    year: '1900',\n    value: 947,\n  },\n  {\n    country: 'Asia',\n    year: '1950',\n    value: 1402,\n  },\n  {\n    country: 'Asia',\n    year: '1999',\n    value: 3634,\n  },\n  {\n    country: 'Asia',\n    year: '2050',\n    value: 5268,\n  },\n  {\n    country: 'Africa',\n    year: '1750',\n    value: 106,\n  },\n  {\n    country: 'Africa',\n    year: '1800',\n    value: 107,\n  },\n  {\n    country: 'Africa',\n    year: '1850',\n    value: 111,\n  },\n  {\n    country: 'Africa',\n    year: '1900',\n    value: 133,\n  },\n  {\n    country: 'Africa',\n    year: '1950',\n    value: 221,\n  },\n  {\n    country: 'Africa',\n    year: '1999',\n    value: 767,\n  },\n  {\n    country: 'Africa',\n    year: '2050',\n    value: 1766,\n  },\n  {\n    country: 'Europe',\n    year: '1750',\n    value: 163,\n  },\n  {\n    country: 'Europe',\n    year: '1800',\n    value: 203,\n  },\n  {\n    country: 'Europe',\n    year: '1850',\n    value: 276,\n  },\n  {\n    country: 'Europe',\n    year: '1900',\n    value: 408,\n  },\n  {\n    country: 'Europe',\n    year: '1950',\n    value: 547,\n  },\n  {\n    country: 'Europe',\n    year: '1999',\n    value: 729,\n  },\n  {\n    country: 'Europe',\n    year: '2050',\n    value: 628,\n  },\n];\n\nconst DemoArea = () => {\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    colorField: 'country',\n    percent: true,\n    stack: true,\n    interaction: {\n      tooltip: {\n        shared: true,\n      },\n    },\n    tooltip: { channel: 'y0', valueFormatter: '.0%' },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"百分比柱状图",en:"Percent Column plot"},filename:"percent.js",isNew:!1},{id:"label-text",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*X_B0Q7Co9xEAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { type: '1-3秒', value: 0.36 },\n  { type: '4-10秒', value: 0.25 },\n  { type: '11-30秒', value: 0.24 },\n  { type: '31-60秒', value: 0.19 },\n  { type: '1-3分', value: 0.12 },\n  { type: '3-10分', value: 0.15 },\n  { type: '10-30分', value: 0.16 },\n  { type: '30+分', value: 0.1 },\n];\n\nconst DemoColumn = () => {\n  const chartRef = React.useRef(null);\n\n  const medal = (datum, ranking) => {\n    if (ranking > 2) return datum;\n    const { chart } = chartRef.current;\n    const { document } = chart.getContext().canvas;\n    const group = document?.createElement('g', {});\n\n    const size = ranking === 0 ? 20 : 15;\n    const icon = document.createElement('image', {\n      style: {\n        src: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*1NiMRKb2sfMAAAAAAAAAAAAADmJ7AQ/original',\n        width: size,\n        height: size,\n        anchor: '0.5 0.5',\n      },\n    });\n    const text = ['冠军🏆', '亚军🥈', '季军🥉'][ranking];\n    const label = document.createElement('text', {\n      style: {\n        text,\n        fill: 'gray',\n        textAlign: 'center',\n        transform: `translate(0, 25)`,\n      },\n    });\n\n    group.appendChild(icon);\n    group.appendChild(label);\n    return group;\n  };\n\n  const config = {\n    data,\n    xField: 'type',\n    yField: 'value',\n    colorField: 'type',\n    axis: {\n      x: {\n        size: 40,\n        labelFormatter: (datum, index) => medal(datum, index),\n      },\n    },\n    onReady: (plot) => (chartRef.current = plot),\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"自定义坐标轴标签",en:"Customize axis labels"},filename:"label-text.js",isNew:!1},{id:"tooltip",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lZu1Q5vMEewAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoColumn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/8elHX%26irfq/stack-column-data.json',\n    },\n    xField: 'year',\n    yField: 'value',\n    colorField: 'type',\n    stack: true,\n    interaction: {\n      tooltip: {\n        render: (e, { title, items }) => {\n          return (\n            <div key={title}>\n              <h4>{title}</h4>\n              {items.map((item) => {\n                const { name, value, color } = item;\n                return (\n                  <div>\n                    <div style={{ margin: 0, display: 'flex', justifyContent: 'space-between' }}>\n                      <div>\n                        <span\n                          style={{\n                            display: 'inline-block',\n                            width: 6,\n                            height: 6,\n                            borderRadius: '50%',\n                            backgroundColor: color,\n                            marginRight: 6,\n                          }}\n                        ></span>\n                        <span>{name}</span>\n                      </div>\n                      <b>{value}</b>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        },\n      },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"自定义提示",en:"Customize tooltip"},filename:"tooltip.js",isNew:!1},{id:"legend",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*FFVDR4pgMPgAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { type: '抖音', sold: 275 },\n  { type: '快手', sold: 115 },\n  { type: '小米', sold: 120 },\n  { type: '微信', sold: 350 },\n  { type: 'Keep', sold: 150 },\n];\n\nconst DemoColumn = () => {\n  const logo = [\n    ['抖音', 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8IXHQLvx9QkAAAAAAAAAAAAADmJ7AQ/original'],\n    ['快手', 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*swueRrrKvbcAAAAAAAAAAAAADmJ7AQ/original'],\n    ['小米', 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*79G3TIt3mBoAAAAAAAAAAAAADmJ7AQ/original'],\n    ['微信', 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_ELBTJLp0dQAAAAAAAAAAAAADmJ7AQ/original'],\n    ['Keep', 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JzbKRpFhR14AAAAAAAAAAAAADmJ7AQ/original'],\n  ];\n  const chartRef = React.useRef();\n  const config = {\n    data,\n    xField: 'type',\n    yField: 'sold',\n    colorField: 'type',\n    onReady: ({ chart }) => {\n      chartRef.current = chart;\n    },\n    legend: {\n      color: {\n        itemMarker: (name, index) => () => {\n          const chart = chartRef.current;\n          const { canvas } = chart.getContext();\n          const { document } = canvas;\n          window.c = chartRef.current;\n          const image = document.createElement('image', {\n            style: {\n              width: 20,\n              height: 20,\n              anchor: '0.5 0.5',\n              src: logo[index][1],\n            },\n          });\n          const tooltip = document.createElement('html', {\n            style: {\n              innerHTML: `<p style=\"color: red; width: 80; text-align: center;line-height: 30px\">${name}</p>`,\n              fill: 'white',\n              stroke: '#ccc',\n              width: 80,\n              height: 30,\n              pointerEvents: 'none',\n              visibility: 'hidden',\n            },\n          });\n          canvas.appendChild(tooltip);\n          image.addEventListener('mousemove', (e) => {\n            tooltip.setPosition(e.x, e.y);\n            tooltip.style.visibility = 'visible';\n\n            console.log('move', e.target);\n          });\n          image.addEventListener('mouseleave', (e) => {\n            tooltip.setPosition(0, 0);\n            tooltip.style.visibility = 'hidden';\n\n            console.log('leave', e.target);\n          });\n          return image;\n        },\n        itemMarkerSize: 40,\n        itemLabelText: (_, index) => logo[index][0],\n        maxRows: 1,\n      },\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"自定义Legend",en:"Customize legend"},filename:"legend.js",isNew:!1},{id:"25d",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*wXEWRIbUJ7cAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { type: '1-3秒', value: 0.16 },\n  { type: '4-10秒', value: 0.125 },\n  { type: '11-30秒', value: 0.24 },\n  { type: '31-60秒', value: 0.19 },\n  { type: '1-3分', value: 0.22 },\n  { type: '3-10分', value: 0.05 },\n  { type: '10-30分', value: 0.01 },\n  { type: '30+分', value: 0.015 },\n];\n\nconst DemoColumn = () => {\n  const config = {\n    data,\n    xField: 'type',\n    yField: 'value',\n    shapeField: 'column25D',\n    style: {\n      fill: 'rgba(126, 212, 236, 0.8)',\n    },\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoColumn />, document.getElementById('container'));\n",title:{zh:"2.5D 柱状图",en:"2.5D Column Chart"},filename:"25d.js",isNew:!1}],icon:"",id:"column",title:{en:"Column",zh:"柱状图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n##  特有 \n \n### markBackground \n \n<description>**optional** *ColumnOptions*</description> \n \nmark 背景配置 \n \n```ts \n{ \n  scale: { \n    y: { \n      domain: [0, 0.5] \n    } \n  }, \n  markBackground: { \n    style: { \n      fill: '#eee' \n    } \n  }, \n} \n``` \n \n示例： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JhiETbmdyMkAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n \n##  特有 \n \n### markBackground \n \n<description>**optional** *ColumnOptions*</description> \n \nmark 背景配置 \n \n```ts \n{ \n  scale: { \n    y: { \n      domain: [0, 0.5] \n    } \n  }, \n  markBackground: { \n    style: { \n      fill: '#eee' \n    } \n  }, \n} \n``` \n \n示例： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JhiETbmdyMkAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*oaJCT5yVPRsAAAAAAAAAAAAADmJ7AQ/original",source:"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Heatmap } from '@ant-design/plots';\n\nconst DemoHeatmap = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/bmw-prod/68d3f380-089e-4683-ab9e-4493200198f9.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n  const config = {\n    data,\n    xField: 'name',\n    yField: 'country',\n    colorField: 'value',\n    sizeField: 'value',\n    shapeField: 'square',\n    label: {\n      text: (d) => d.value,\n      position: 'inside',\n      style: {\n        fill: '#fff',\n        pointerEvents: 'none',\n      },\n    },\n    scale: {\n      size: { range: [12, 20] },\n      color: { range: ['#dddddd', '#9ec8e0', '#5fa4cd', '#2e7ab6', '#114d90'] },\n    },\n  };\n\n  return <Heatmap {...config} />;\n};\n\nReactDOM.render(<DemoHeatmap />, document.getElementById('container'));\n",title:{zh:"热力形状大小映射",en:"Heatmap plot shape size mapping"},filename:"basic.js",isNew:!1},{id:"shape",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ztgPRrmeh84AAAAAAAAAAAAADmJ7AQ/original",source:"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Heatmap } from '@ant-design/plots';\n\nconst DemoHeatmap = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/bmw-prod/68d3f380-089e-4683-ab9e-4493200198f9.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n  const config = {\n    data,\n    xField: 'name',\n    yField: 'country',\n    colorField: 'value',\n    sizeField: 'value',\n    shapeField: 'point',\n    scale: {\n      size: { range: [12, 20] },\n      color: { range: ['#0d5fbb', '#7eadfc', '#fd8b6f', '#aa3523'] },\n    },\n    label: {\n      text: (d) => d.value,\n      position: 'inside',\n      style: {\n        fill: '#fff',\n        shadowBlur: 2,\n        shadowColor: 'rgba(0, 0, 0, .45)',\n        pointerEvents: 'none',\n      },\n    },\n  };\n\n  return <Heatmap {...config} />;\n};\n\nReactDOM.render(<DemoHeatmap />, document.getElementById('container'));\n",title:{zh:"热力形状图",en:"Shape heatmap plot"},filename:"shape.js",isNew:!1},{id:"cell-aggregated",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ru0HSZ6RiCsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Heatmap } from '@ant-design/plots';\n\nconst DemoHeatmap = () => {\n  const config = {\n    height: 300,\n    autoFit: false,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n    },\n    xField: (d) => new Date(d.date).getUTCDate(),\n    yField: (d) => new Date(d.date).getUTCMonth(),\n    colorField: 'temp_max',\n    legend: {},\n    mark: 'cell',\n    style: { inset: 0.5 },\n    tooltip: {\n      title: 'date',\n      field: 'temp_max',\n      valueFormatter: '~s',\n      pointerEvents: 'none'\n    },\n  };\n\n  return <Heatmap {...config} />;\n};\n\nReactDOM.render(<DemoHeatmap />, document.getElementById('container'));\n",title:{zh:"聚合热力图",en:"Aggregated Heatmap"},filename:"cell-aggregated.js",isNew:!1},{id:"heatmap-density",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*mfxdT4ozJXAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Heatmap } from '@ant-design/plots';\n\nconst DemoHeatmap = () => {\n  const config = {\n    mark: 'heatmap',\n    data: {\n      type: \"fetch\",\n      value: \"https://assets.antv.antgroup.com/g2/heatmap.json\",\n    },\n    xField: 'g',\n    yField: 'l',\n    colorField: 'tmp',\n    sizeField: 26,\n    style: {\n      opacity: 0,\n    },\n  };\n\n  return <Heatmap {...config} />;\n};\n\nReactDOM.render(<DemoHeatmap />, document.getElementById('container'));\n",title:{zh:"密度热力图",en:"Density Heatmap"},filename:"heatmap-density.js",isNew:!1}],icon:"",id:"heatmap",title:{en:"Heatmap",zh:"热力图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### mark \n \n<description>**optional** _string_</description> \n \n热力图类型，'point' | 'cell' | 'heatmap' \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### mark \n \n<description>**optional** _string_</description> \n \n热力图类型，'point' | 'cell' | 'heatmap' \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*DSItR6amdjMAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoPie = () => {\n  const config = {\n    data: [\n      { type: '分类一', value: 27 },\n      { type: '分类二', value: 25 },\n      { type: '分类三', value: 18 },\n      { type: '分类四', value: 15 },\n      { type: '分类五', value: 10 },\n      { type: '其他', value: 5 },\n    ],\n    angleField: 'value',\n    colorField: 'type',\n    label: {\n      text: 'value',\n      style: {\n        fontWeight: 'bold',\n      },\n    },\n    legend: {\n      color: {\n        title: false,\n        position: 'right',\n        rowPadding: 5,\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"基础饼图",en:"Basic pie plot"},filename:"basic.js",isNew:!1},{id:"outer-label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*00hCQp7bMgsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoPie = () => {\n  const config = {\n    data: [\n      { type: '分类一', value: 27 },\n      { type: '分类二', value: 25 },\n      { type: '分类三', value: 18 },\n      { type: '分类四', value: 15 },\n      { type: '分类五', value: 10 },\n      { type: '其他', value: 5 },\n    ],\n    angleField: 'value',\n    colorField: 'type',\n    label: {\n      text: 'value',\n      position: 'outside',\n    },\n    legend: {\n      color: {\n        title: false,\n        position: 'right',\n        rowPadding: 5,\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"饼图 - 外部图形标签",en:"Pie plot - outer label"},filename:"outer-label.js",isNew:!1},{id:"spider-label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Nln-QqYVb80AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst data = [\n  { type: '分类一', value: 27 },\n  { type: '分类二', value: 25 },\n  { type: '分类三', value: 18 },\n  { type: '分类四', value: 15 },\n  { type: '分类五', value: 10 },\n  { type: '其他', value: 5 },\n];\nconst DemoPie = () => {\n  const config = {\n    data,\n    angleField: 'value',\n    colorField: 'type',\n    radius: 0.8,\n    label: {\n      text: (d) => `${d.type}\\n ${d.value}`,\n      position: 'spider',\n    },\n    legend: {\n      color: {\n        title: false,\n        position: 'right',\n        rowPadding: 5,\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"饼图 - 蜘蛛布局标签",en:"Pie plot - spider label"},filename:"spider-label.js",isNew:!1},{id:"custom-label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZAK6RoTfHsAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst data = [\n  { type: '分类一', value: 27 },\n  { type: '分类二', value: 25 },\n  { type: '分类三', value: 18 },\n  { type: '分类四', value: 15 },\n  { type: '分类五', value: 10 },\n  { type: '其他', value: 5 },\n];\n\nconst customLabel = (_, datum) => (\n  <div style={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n    <div style={{ width: 8, height: 8, background: 'rgba(0,0,0,0.4)', borderRadius: '50%' }} />\n    <div>\n      {datum.type} : <b>{datum.value}</b>\n    </div>\n  </div>\n);\n\nconst DemoPie = () => {\n  const config = {\n    data,\n    angleField: 'value',\n    colorField: 'type',\n    label: {\n      text: 'type',\n      position: 'outside',\n      textAlign: 'center',\n      transform: [\n        {\n          type: 'contrastReverse',\n        },\n      ],\n      render: customLabel,\n    },\n    legend: false,\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"饼图 - 自定义标签",en:"Pie plot - custom label"},filename:"custom-label.js",isNew:!1},{id:"quarter-circle",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*HtmQSoTfo0gAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoPie = () => {\n  const config = {\n    data: [\n      { type: '分类一', value: 27 },\n      { type: '分类二', value: 25 },\n      { type: '分类三', value: 18 },\n      { type: '分类四', value: 15 },\n      { type: '分类五', value: 10 },\n      { type: '其他', value: 5 },\n    ],\n    angleField: 'value',\n    colorField: 'type',\n    startAngle: Math.PI,\n    endAngle: Math.PI * 1.5,\n    label: {\n      text: 'type',\n      style: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        transform: 'rotate(40)',\n      },\n      transform: [\n        {\n          type: 'overlapHide',\n        },\n      ],\n    },\n    legend: {\n      color: {\n        title: false,\n        position: 'right',\n        rowPadding: 5,\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"饼图 - 四分之一圆",en:"Pie plot - Quarter circle pie"},filename:"quarter-circle.js",isNew:!1},{id:"pie-texture",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*340IRYjd26IAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoPie = () => {\n  const config = {\n    data: [\n      { sex: '男', sold: 0.45 },\n      { sex: '女', sold: 0.55 },\n    ],\n    angleField: 'sold',\n    colorField: 'sex',\n    legend: false,\n    label: {\n      text: ({ sex, sold }) => {\n        return `${sex}: ${parseInt(sold * 100)}%`;\n      },\n      fill: '#fff',\n      fontSize: 18,\n    },\n    style: {\n      padding: 10,\n      fill: ({ sex }) => {\n        if (sex === '男') {\n          return 'p(a)https://gw.alipayobjects.com/zos/antfincdn/FioHMFgIld/pie-wenli1.png';\n        }\n        return 'p(a)https://gw.alipayobjects.com/zos/antfincdn/Ye2DqRx%2627/pie-wenli2.png';\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"饼图 - 带纹理的饼图",en:"Pie plot - Pie plot fill with texture"},filename:"pie-texture.js",isNew:!1},{id:"basic-donut",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Fl1OT6t5avcAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoPie = () => {\n  const config = {\n    data: [\n      { type: '分类一', value: 27 },\n      { type: '分类二', value: 25 },\n      { type: '分类三', value: 18 },\n      { type: '分类四', value: 15 },\n      { type: '分类五', value: 10 },\n      { type: '其他', value: 5 },\n    ],\n    angleField: 'value',\n    colorField: 'type',\n    innerRadius: 0.6,\n    label: {\n      text: 'value',\n      style: {\n        fontWeight: 'bold',\n      },\n    },\n    legend: {\n      color: {\n        title: false,\n        position: 'right',\n        rowPadding: 5,\n      },\n    },\n    annotations: [\n      {\n        type: 'text',\n        style: {\n          text: 'AntV\\nCharts',\n          x: '50%',\n          y: '50%',\n          textAlign: 'center',\n          fontSize: 40,\n          fontStyle: 'bold',\n        },\n      },\n    ],\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"基础环图",en:"Basic donut plot"},filename:"basic-donut.js",isNew:!1},{id:"doughnut",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_OHoQb0Xho8AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst DemoPie = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/pie-doughnut.json',\n    },\n    angleField: 'value',\n    colorField: 'name',\n    legend: false,\n    innerRadius: 0.6,\n    labels: [\n      { text: 'name', style: { fontSize: 10, fontWeight: 'bold' } },\n      {\n        text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n        style: {\n          fontSize: 9,\n          dy: 12,\n        },\n      },\n    ],\n    style: {\n      stroke: '#fff',\n      inset: 1,\n      radius: 10,\n    },\n    scale: {\n      color: {\n        palette: 'spectral',\n        offset: (t) => t * 0.8 + 0.1,\n      },\n    },\n  };\n  return <Pie {...config} />;\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"甜甜圈图",en:"Pie plot - Donut Chart"},filename:"doughnut.js",isNew:!1},{id:"association-pie",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/8hTlCI2Fbn/association-pie.gif",source:"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@ant-design/plots';\n\nconst PlotMaps = {};\n\nconst DemoPie = () => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/antfincdn/fKTgtjKdaN/association-pie.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n\n  if (!Object.keys(data).length) {\n    return null;\n  }\n\n  const showTooltip = (evt, pie) => {\n    Object.keys(PlotMaps).forEach((plot) => {\n      if (plot !== pie) {\n        PlotMaps[plot].chart.emit('tooltip:show', {\n          data: { data: { area: evt.data.data.area } },\n        });\n        PlotMaps[plot].chart.emit('element:highlight', {\n          data: { data: { area: evt.data.data.area } },\n        });\n      }\n    });\n  };\n\n  const hideTooltip = (evt, pie) => {\n    Object.keys(PlotMaps).forEach((plot) => {\n      if (plot !== pie) {\n        PlotMaps[plot].chart.emit('tooltip:hide', {\n          data: { data: { area: evt.data.data.area } },\n        });\n        PlotMaps[plot].chart.emit('element:unhighlight', {\n          data: { data: { area: evt.data.data.area } },\n        });\n      }\n    });\n  };\n\n  const LeftConfig = {\n    angleField: 'bill',\n    colorField: 'area',\n    data: data.pie1,\n    label: {\n      text: 'bill',\n    },\n    legend: false,\n    tooltip: {\n      title: 'area',\n    },\n    interaction: {\n      elementHighlight: true,\n    },\n    state: {\n      inactive: { opacity: 0.5 },\n    },\n  };\n  const RightConfig = {\n    angleField: 'value',\n    colorField: 'area',\n    data: data.pie2,\n    label: {\n      text: 'value',\n    },\n    legend: false,\n    tooltip: {\n      title: 'area',\n    },\n    interaction: {\n      elementHighlight: true,\n    },\n    state: {\n      inactive: { opacity: 0.5 },\n    },\n  };\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n      <Pie\n        style={{ width: '50%' }}\n        {...LeftConfig}\n        onReady={(plot) => {\n          PlotMaps.leftPie = plot;\n          plot.chart.on('interval:pointerover', (evt) => {\n            showTooltip(evt, 'leftPie');\n          });\n          plot.chart.on('interval:pointerout', (evt) => {\n            hideTooltip(evt, 'leftPie');\n          });\n        }}\n      />\n      <Pie\n        style={{ width: '50%' }}\n        {...RightConfig}\n        onReady={(plot) => {\n          PlotMaps.rightPie = plot;\n          plot.chart.on('interval:pointerover', (evt) => {\n            showTooltip(evt, 'rightPie');\n          });\n          plot.chart.on('interval:pointerout', (evt) => {\n            hideTooltip(evt, 'rightPie');\n          });\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<DemoPie />, document.getElementById('container'));\n",title:{zh:"饼图联动",en:"Association Pie"},filename:"association-pie.js",isNew:!1}],icon:"",id:"pie",title:{en:"Pie",zh:"饼图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### angleField \n \n<description>**optional** *string*</description> \n \n角度映射字段 \n \n \n### radius \n \n<description>**optional** *number* **default** *1*</description> \n \n饼图半径[0~1] \n \n### innerRadius \n \n<description>**optional** *number*</description> \n \n饼图内半径 \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### angleField \n \n<description>**optional** *string*</description> \n \n角度映射字段 \n \n \n### radius \n \n<description>**optional** *number* **default** *1*</description> \n \n饼图半径[0~1] \n \n### innerRadius \n \n<description>**optional** *number*</description> \n \n饼图内半径 \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*u5aGSoyRDN8AAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    },\n    xField: 'height',\n    yField: 'weight',\n    colorField: 'gender',\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"散点图",en:"Scatterplot"},filename:"basic.js",isNew:!1},{id:"point-one-dimension",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*SCXXQYObM_AAAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    height: 120,\n    autoFit: false,\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    },\n    xField: 'height',\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"一维散点图",en:"One Dimension Scatterplot"},filename:"point-one-dimension.js",isNew:!1},{id:"point-strip",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*pCUiTouHSbYAAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    autoFit: false,\n    height: 300,\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-strip.json',\n    },\n    coordinate: { transform: [{ type: 'transpose' }] },\n    xField: 'Cylinders',\n    yField: 'Horsepower',\n    sizeField: 20,\n    shapeField: 'line',\n    scale: {\n      y: { type: 'linear', zero: true },\n      x: { domain: [0, 10] },\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"带子散点图",en:"Strip Plot"},filename:"point-strip.js",isNew:!1},{id:"point-label",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*m7HITJRLnu8AAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-label.json',\n    },\n    xField: 'mpg',\n    yField: 'hp',\n    colorField: 'steelblue',\n    scale: {\n      x: { nice: true, domainMax: 38 },\n      y: { nice: true },\n    },\n    label: {\n      text: 'name',\n      style: {\n        stroke: '#fff',\n        textAlign: 'start',\n        textBaseline: 'middle',\n        dx: 10,\n        position: 'left',\n        fontSize: 10,\n        lineWidth: 2,\n      },\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"标签散点图",en:"Scatterplot, Labeled"},filename:"point-label.js",isNew:!1},{id:"point-shape",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*-OV3RJzmT1MAAAAAAAAAAAAADmJ7AQ/original",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-shape.json',\n    },\n    xField: 'x',\n    yField: 'y',\n    colorField: 'category',\n    sizeField: 5,\n    shapeField: 'category',\n    scale: {\n      shape: { range: ['point', 'plus', 'diamond'] },\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"多形状散点图",en:"Multi-Shape Scatterplot"},filename:"point-shape.js",isNew:!1},{id:"point-sequential",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*A1N1SbupvX8AAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    paddingLeft: 60,\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-sequential.json',\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'value',\n    colorField: 'value',\n    shapeField: 'point',\n    style: {\n      stroke: '#000',\n      strokeOpacity: 0.2,\n    },\n    scale: {\n      color: {\n        palette: 'rdBu',\n        offset: (t) => 1 - t,\n      },\n    },\n    tooltip: [{ channel: 'x', name: 'year', valueFormatter: (d) => d.getFullYear() }, { channel: 'y' }],\n    annotations: [{ type: 'lineY', data: [0], style: { stroke: '#000', strokeOpacity: 0.2 } }],\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"渐变色散点图",en:"Gradient Scatterplot"},filename:"point-sequential.js",isNew:!1},{id:"point-jitter",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*PowVRZQkoZUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-jitter.json',\n    },\n    transform: [{ type: 'jitterX' }, { type: 'sortX', channel: 'x' }],\n    xField: 'Cylinders',\n    yField: 'Horsepower',\n    colorField: 'Cylinders',\n    shapeField: 'hollow',\n    scale: {\n      x: { type: 'point' },\n      y: { domain: [0, 200] },\n      color: { type: 'ordinal' },\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"扰动散点图",en:"Jitter Scatterplot"},filename:"point-jitter.js",isNew:!1},{id:"point-stacked",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*f26KS6m_fHgAAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/88c601cd-c1ff-4c9b-90d5-740d0b710b7e.json',\n    },\n    height: 360,\n    autoFit: false,\n    stack: {\n      y1: 'y',\n    },\n    xField: (d) => 2021 - d.birth,\n    yField: (d) => (d.gender === 'M' ? 1 : -1),\n    colorField: 'gender',\n    shapeField: 'point',\n    scale: {\n      x: { nice: true },\n    },\n    axis: {\n      y: {\n        title: '← Women · Men →',\n        labelFormatter: (d) => `${Math.abs(+d)}`,\n      },\n      x: { title: 'Age →' },\n    },\n    legend: { color: { title: 'Gender' } },\n    tooltip: { items: [{ channel: 'x', name: 'age' }] },\n    annotations: [{ type: 'lineY', data: [0], style: { stroke: 'black' } }],\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"堆叠散点图",en:"Stacked Scatterplot"},filename:"point-stacked.js",isNew:!1},{id:"point-bubble",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*OUogR5lReacAAAAAAAAAAAAADmJ7AQ/original",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-bubble.json',\n      transform: [\n        {\n          type: 'filter',\n          callback: (d) => d.Entity !== 'All natural disasters',\n        },\n      ],\n    },\n    paddingLeft: 150,\n    paddingTop: 50,\n    xField: 'Year',\n    yField: 'Entity',\n    sizeField: 'Deaths',\n    colorField: 'Entity',\n    shapeField: 'point',\n    scale: {\n      size: {\n        rangeMax: 35,\n      },\n    },\n    legend: false,\n    style: {\n      stroke: 'black',\n      opacity: 0.8,\n      lineWidth: 1,\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"气泡图",en:"Bubble Chart"},filename:"point-bubble.js",isNew:!1},{id:"point-log",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*y5UsRqFxILMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n    },\n    xField: 'GDP',\n    yField: 'LifeExpectancy',\n    sizeField: 'Population',\n    colorField: 'continent',\n    shapeField: 'point',\n    scale: {\n      size: { type: 'log', range: [4, 20] },\n    },\n    style: { fillOpacity: 0.3, lineWidth: 1 },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"对数气泡图",en:"Log Scatterplot"},filename:"point-log.js",isNew:!1},{id:"point-aggregated",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TXB6R7tfCOUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    autoFit: false,\n    height: 240,\n    inset: 10,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/commits.json',\n    },\n    xField: (d) => new Date(d.time).getUTCHours(),\n    yField: (d) => new Date(d.time).getUTCDay(),\n    sizeField: 'count',\n    colorField: 'count',\n    shapeField: 'point',\n    transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n    scale: { y: { type: 'point' } },\n    axis: {\n      x: { title: 'time (hours)', tickCount: 24 },\n      y: { title: 'time (day)', grid: true },\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"聚合气泡图",en:"Aggregated Bubble Chart"},filename:"point-aggregated.js",isNew:!1},{id:"point-dot",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*RtalTb-DPdkAAAAAAAAAAAAADmJ7AQ",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoScatter = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/scatter-point-dot.json',\n    },\n    width: 800,\n    height: 1200,\n    autoFit: false,\n    coordinate: { transform: [{ type: 'transpose' }] },\n    interaction: { tooltip: { shared: true } },\n    xField: 'state',\n    yField: 'population',\n    colorField: 'age',\n    shapeField: 'point',\n    scale: { color: { palette: 'spectral' } },\n    tooltip: { title: 'state', items: ['population'] },\n    annotations: [\n      {\n        type: 'link',\n        xField: 'state',\n        yField: 'population',\n        transform: [{ type: 'groupX', y: 'min', y1: 'max' }],\n        scale: { y: { labelFormatter: '.0%' } },\n        style: { stroke: '#000' },\n        tooltip: false,\n      },\n    ],\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"点图",en:"Dot Plot"},filename:"point-dot.js",isNew:!1},{id:"line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*WVncQ5FZmXMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Scatter } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { regressionQuad } from 'd3-regression';\n\nconst data = [\n  { x: 1, y: 4.181 },\n  { x: 2, y: 4.665 },\n  { x: 3, y: 5.296 },\n  { x: 4, y: 5.365 },\n  { x: 5, y: 5.448 },\n  { x: 6, y: 5.744 },\n  { x: 7, y: 5.653 },\n  { x: 8, y: 5.844 },\n  { x: 9, y: 6.362 },\n  { x: 10, y: 6.38 },\n  { x: 11, y: 6.311 },\n  { x: 12, y: 6.457 },\n  { x: 13, y: 6.479 },\n  { x: 14, y: 6.59 },\n  { x: 15, y: 6.74 },\n  { x: 16, y: 6.58 },\n  { x: 17, y: 6.852 },\n  { x: 18, y: 6.531 },\n  { x: 19, y: 6.682 },\n  { x: 20, y: 7.013 },\n  { x: 21, y: 6.82 },\n  { x: 22, y: 6.647 },\n  { x: 23, y: 6.951 },\n  { x: 24, y: 7.121 },\n  { x: 25, y: 7.143 },\n  { x: 26, y: 6.914 },\n  { x: 27, y: 6.941 },\n  { x: 28, y: 7.226 },\n  { x: 29, y: 6.898 },\n  { x: 30, y: 7.392 },\n  { x: 31, y: 6.938 },\n];\n\nconst lineData = regressionQuad()\n  .x((d) => d.x)\n  .y((d) => d.y)\n  .domain([2, 31])(data)\n\nconst DemoScatter = () => {\n  const config = {\n    data,\n    xField: 'x',\n    yField: 'y',\n    sizeField: 5,\n    style: {\n      stroke: '#777777',\n      lineWidth: 1,\n      fill: '#5B8FF9',\n    },\n    line: {\n      data: lineData,\n      xField: (d) => d[0],\n      yField: (d) => d[1],\n      style: { stroke: \"#c7cbc7\", lineWidth: 2 },\n      tooltip: false,\n    },\n  };\n  return <Scatter {...config} />;\n};\n\nReactDOM.render(<DemoScatter />, document.getElementById('container'));\n",title:{zh:"散点图-回归线",en:"Scatter plot regression line"},filename:"line.js",isNew:!1}],icon:"",id:"scatter",title:{en:"Scatter",zh:"散点图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*-HIwQbCnfFUAAAAAAAAAAAAAARQnAQ",source:"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Stock } from '@ant-design/plots';\n\nconst DemoStock = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/antfincdn/qtQ9nYfYJe/stock-data.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n\n  const config = {\n    xField: 'date',\n    yField: ['open', 'close', 'high', 'low'],\n    data: data.map((i) => ({ ...i, date: new Date(i.trade_date) })),\n  };\n\n  return <Stock {...config} />;\n};\n\nReactDOM.render(<DemoStock />, document.getElementById('container'));\n",title:{zh:"基础蜡烛图",en:"Basic candlestick plot"},filename:"basic.js",isNew:!1},{id:"custom-color",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/4EtM9REqIP/8edb0a9e-293e-4b87-bc61-d814e958acbd.png",source:"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Stock } from '@ant-design/plots';\n\nconst DemoStock = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    fetch('https://gw.alipayobjects.com/os/antfincdn/qtQ9nYfYJe/stock-data.json')\n      .then((response) => response.json())\n      .then((json) => setData(json))\n      .catch((error) => {\n        console.log('fetch data failed', error);\n      });\n  };\n\n  const config = {\n    xField: 'date',\n    yField: ['open', 'close', 'high', 'low'],\n    // 绿涨红跌\n    fallingFill: '#ef5350',\n    risingFill: '#26a69a',\n    data: data.map((i) => ({ ...i, date: new Date(i.trade_date) })),\n  };\n\n  return <Stock {...config} />;\n};\n\nReactDOM.render(<DemoStock />, document.getElementById('container'));\n",title:{zh:"自定义颜色：绿涨红跌",en:"Custom stock color"},filename:"custom-color.js",isNew:!1}],icon:"",id:"stock",title:{en:"Stock",zh:"股票图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"revenue-flow-waterfall",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*fG4DT7XWNzUAAAAAAAAAAAAADmJ7AQ",source:"import { Waterfall } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoWaterfall = () => {\n  const config = {\n    data: [\n      { x: 'Start', value: 23000000 },\n      { x: 'Jan', value: 2200000 },\n      { x: 'Feb', value: -4600000 },\n      { x: 'Mar', value: -9100000 },\n      { x: 'Apr', value: 3700000 },\n      { x: 'May', value: -2100000 },\n      { x: 'Jun', value: 5300000 },\n      { x: 'Jul', value: 3100000 },\n      { x: 'Aug', value: -1500000 },\n      { x: 'Sep', value: 4200000 },\n      { x: 'Oct', value: 5300000 },\n      { x: 'Nov', value: -1500000 },\n      { x: 'Dec', value: 5100000 },\n      { x: 'End', isTotal: true, value: 33100000 },\n    ],\n    xField: 'x',\n    yField: 'value',\n    linkStyle: {\n      lineDash: [4, 2],\n      stroke: '#ccc',\n    },\n    style: {\n      maxWidth: 25,\n      stroke: '#ccc',\n      fill: (d, idx) => {\n        return idx === 0 || d.isTotal ? '#96a6a6' : d.value > 0 ? '#64b5f6' : '#ef6c00';\n      },\n    },\n    label: {\n      text: 'value',\n      formatter: '~s',\n      position: (d) => (d.value > 0 ? 'top' : 'bottom'),\n      textBaseline: (d) => (d.value > 0 ? 'bottom' : 'top'),\n      fontSize: 10,\n      dy: (d) => (d.value > 0 ? -4 : 4),\n    },\n  };\n  return <Waterfall {...config} />;\n};\n\nReactDOM.render(<DemoWaterfall />, document.getElementById('container'));\n",title:{zh:"线标记的瀑布图",en:"Revenue Flow Waterfall Chart"},filename:"revenue-flow-waterfall.js",isNew:!1},{id:"annotation",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*xOfKT5qr9R4AAAAAAAAAAAAAARQnAQ",source:"import { Waterfall } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoWaterfall = () => {\n  const data = [\n    { quarter: '第一季度', value: 6200000 },\n    { quarter: '第二季度', value: -2600000 },\n    { quarter: '第三季度', value: 4100000 },\n    { quarter: '第四季度', value: 3700000 },\n    { quarter: '总计', value: 11400000, isTotal: true },\n  ];\n  const config = {\n    data,\n    xField: 'quarter',\n    yField: 'value',\n    linkStyle: {\n      lineDash: [4, 2],\n      stroke: '#ccc',\n    },\n    style: {\n      maxWidth: 60,\n      stroke: '#ccc',\n      fill: (d) => {\n        return d.isTotal ? '#96a6a6' : d.value > 0 ? '#F56E53' : '#3CC27F';\n      },\n    },\n    label: [\n      {\n        text: 'value',\n        formatter: '~s',\n        position: 'inside',\n        fontSize: 10,\n      },\n      {\n        text: (arg) => {\n          return `${arg.y1 / 10000000} 亿`;\n        },\n        position: (d) => (d.value > 0 ? 'top' : 'bottom'),\n        textBaseline: (d) => (d.value > 0 ? 'bottom' : 'top'),\n        fontSize: 10,\n        dy: (d) => (d.value > 0 ? -4 : 4),\n      },\n    ],\n  };\n  return <Waterfall {...config} />;\n};\n\nReactDOM.render(<DemoWaterfall />, document.getElementById('container'));\n",title:{zh:"瀑布图 - 添加标注",en:"Waterfall plot with annotation"},filename:"annotation.js",isNew:!1}],icon:"",id:"waterfall",title:{en:"Waterfall",zh:"瀑布图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### linkStyle  \n \n<description>**required** _attrStyle_</description> \n \n连线样式 \n \n### xField  \n \n<description>**required** _string | string[]_</description> \n \nx轴字段 \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### linkStyle  \n \n<description>**required** _attrStyle_</description> \n \n连线样式 \n \n### xField  \n \n<description>**required** _string | string[]_</description> \n \nx轴字段 \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*19M9So-1OpoAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BidirectionalBar } from '@ant-design/plots';\n\nconst DemoBidirectionalBar = () => {\n  const data = [\n    {\n      country: '乌拉圭',\n      '2016年耕地总面积': 13.4,\n      '2016年转基因种植面积': 12.3,\n    },\n    {\n      country: '巴拉圭',\n      '2016年耕地总面积': 14.4,\n      '2016年转基因种植面积': 6.3,\n    },\n    {\n      country: '南非',\n      '2016年耕地总面积': 18.4,\n      '2016年转基因种植面积': 8.3,\n    },\n    {\n      country: '巴基斯坦',\n      '2016年耕地总面积': 34.4,\n      '2016年转基因种植面积': 13.8,\n    },\n    {\n      country: '阿根廷',\n      '2016年耕地总面积': 44.4,\n      '2016年转基因种植面积': 19.5,\n    },\n    {\n      country: '巴西',\n      '2016年耕地总面积': 24.4,\n      '2016年转基因种植面积': 18.8,\n    },\n    {\n      country: '加拿大',\n      '2016年耕地总面积': 54.4,\n      '2016年转基因种植面积': 24.7,\n    },\n    {\n      country: '中国',\n      '2016年耕地总面积': 104.4,\n      '2016年转基因种植面积': 5.3,\n    },\n    {\n      country: '美国',\n      '2016年耕地总面积': 165.2,\n      '2016年转基因种植面积': 72.9,\n    },\n  ];\n  const config = {\n    data,\n    xField: 'country',\n    yField: ['2016年耕地总面积', '2016年转基因种植面积'],\n    style: {\n      fill: (d) => {\n        if (d.groupKey === '2016年转基因种植面积') return '#64DAAB';\n        return '#6395FA';\n      },\n    },\n  };\n  return <BidirectionalBar {...config} />;\n};\n\nReactDOM.render(<DemoBidirectionalBar />, document.getElementById('container'));\n",title:{zh:"对称条形图",en:"Bidirectional Bar Chart"},filename:"basic.js",isNew:!1},{id:"layout",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*dpEiSZht_1AAAAAAAAAAAAAAARQnAQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BidirectionalBar } from '@ant-design/plots';\n\nconst DemoBidirectionalBar = () => {\n  const data = [\n    {\n      country: '乌拉圭',\n      '2016年耕地总面积': 13.4,\n      '2016年转基因种植面积': 12.3,\n    },\n    {\n      country: '巴拉圭',\n      '2016年耕地总面积': 14.4,\n      '2016年转基因种植面积': 6.3,\n    },\n    {\n      country: '南非',\n      '2016年耕地总面积': 18.4,\n      '2016年转基因种植面积': 8.3,\n    },\n    {\n      country: '巴基斯坦',\n      '2016年耕地总面积': 34.4,\n      '2016年转基因种植面积': 13.8,\n    },\n    {\n      country: '阿根廷',\n      '2016年耕地总面积': 44.4,\n      '2016年转基因种植面积': 19.5,\n    },\n    {\n      country: '巴西',\n      '2016年耕地总面积': 24.4,\n      '2016年转基因种植面积': 18.8,\n    },\n    {\n      country: '加拿大',\n      '2016年耕地总面积': 54.4,\n      '2016年转基因种植面积': 24.7,\n    },\n    {\n      country: '中国',\n      '2016年耕地总面积': 104.4,\n      '2016年转基因种植面积': 5.3,\n    },\n    {\n      country: '美国',\n      '2016年耕地总面积': 165.2,\n      '2016年转基因种植面积': 72.9,\n    },\n  ];\n  const config = {\n    data,\n    xField: 'country',\n    layout: 'vertical',\n    style: {\n      fill: (d) => {\n        if (d.groupKey === '2016年转基因种植面积') return '#64DAAB';\n        return '#6395FA';\n      },\n    },\n    yField: ['2016年耕地总面积', '2016年转基因种植面积'],\n  };\n  return <BidirectionalBar {...config} />;\n};\n\nReactDOM.render(<DemoBidirectionalBar />, document.getElementById('container'));\n",title:{zh:"垂直对称条形图",en:"Vertical Bidirectional Bar Chart"},filename:"layout.js",isNew:!1}],icon:"",id:"bidirectional-bar",title:{en:"BidirectionalBar",zh:"对称条形图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### yField \n \n<description>**optional** *string[]*</description> \n \nY 轴字段 \n \n \n### layout \n \n<description>**optional** *vertical | horizontal* **default** *vertical*</description> \n \n布局 \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### yField \n \n<description>**optional** *string[]*</description> \n \nY 轴字段 \n \n \n### layout \n \n<description>**optional** *vertical | horizontal* **default** *vertical*</description> \n \n布局 \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*GLvKQbqMjTQAAAAAAAAAAAAADmJ7AQ/fmt.webp",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const config = {\n    xField: 'time',\n    data: [\n      { time: '10:10', call: 4, waiting: 2, people: 2 },\n      { time: '10:15', call: 2, waiting: 6, people: 3 },\n      { time: '10:20', call: 13, waiting: 2, people: 5 },\n      { time: '10:25', call: 9, waiting: 9, people: 1 },\n      { time: '10:30', call: 5, waiting: 2, people: 3 },\n      { time: '10:35', call: 8, waiting: 2, people: 1 },\n      { time: '10:40', call: 13, waiting: 1, people: 2 },\n    ],\n    legend: {\n      color: {\n        itemMarker: (v) => {\n          if (v === 'waiting') return 'rect'\n          return 'smooth'\n        }\n      }\n    },\n    children: [\n      {\n        type: 'interval',\n        yField: 'waiting',\n      },\n      {\n        type: 'line',\n        yField: 'people',\n        shapeField: 'smooth',\n        scale: { color: { relations: [['people', '#fdae6b']] } },\n        axis: { y: { position: 'right' } },\n        style: { lineWidth: 2 },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:" 柱线混合",en:"Line Bar Chart"},filename:"basic.js",isNew:!1},{id:"segment",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*t5wnSouqkP4AAAAAAAAAAAAADmJ7AQ/original",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { year: '1991', value: null, count: 3 },\n    { year: '1992', value: null, count: 3 },\n    { year: '1993', value: null, count: 5 },\n    { year: '1994', value: 5, count: 5 },\n    { year: '1995', value: 6, count: null },\n    { year: '1996', value: 8, count: null },\n    { year: '1997', value: 7, count: null },\n    { year: '1998', value: 9, count: null },\n  ];\n\n  const config = {\n    data,\n    xField: 'year',\n    scale: {\n      y: {\n        independent: false,\n        key: 'sameKey',\n        domain: [0, 10],\n      },\n    },\n    tooltip: {\n      items: [\n        (item) => ({\n          name: '销售额',\n          value: item.value | item.count,\n        }),\n      ],\n    },\n    children: [\n      {\n        type: 'line',\n        yField: 'count',\n      },\n      {\n        type: 'line',\n        yField: 'value',\n        style: {\n          lineDash: [2, 4],\n          stroke: 'red',\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:" 分段图",en:"Segment Chart"},filename:"segment.js",isNew:!1},{id:"multi-line",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*BxouQYIIQ0kAAAAAAAAAAAAADmJ7AQ/fmt.webp",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    {\n      Month: 'Jan',\n      Evaporation: 2,\n      Precipitation: 2.6,\n      Temperature: 2,\n    },\n    {\n      Month: 'Feb',\n      Evaporation: 4.9,\n      Precipitation: 5.9,\n      Temperature: 2.2,\n    },\n    {\n      Month: 'Mar',\n      Evaporation: 7,\n      Precipitation: 9,\n      Temperature: 3.3,\n    },\n    {\n      Month: 'Apr',\n      Evaporation: 23.2,\n      Precipitation: 26.4,\n      Temperature: 4.5,\n    },\n    {\n      Month: 'May',\n      Evaporation: 25.6,\n      Precipitation: 28.7,\n      Temperature: 6.3,\n    },\n    {\n      Month: 'Jun',\n      Evaporation: 76.7,\n      Precipitation: 70.7,\n      Temperature: 10.2,\n    },\n    {\n      Month: 'Jul',\n      Evaporation: 135.6,\n      Precipitation: 175.6,\n      Temperature: 20.3,\n    },\n    {\n      Month: 'Aug',\n      Evaporation: 162.2,\n      Precipitation: 182.2,\n      Temperature: 23.4,\n    },\n    {\n      Month: 'Sep',\n      Evaporation: 32.6,\n      Precipitation: 48.7,\n      Temperature: 23,\n    },\n    {\n      Month: 'Oct',\n      Evaporation: 20,\n      Precipitation: 18.8,\n      Temperature: 16.5,\n    },\n    {\n      Month: 'Nov',\n      Evaporation: 6.4,\n      Precipitation: 6,\n      Temperature: 12,\n    },\n    {\n      Month: 'Dec',\n      Evaporation: 3.3,\n      Precipitation: 2.3,\n      Temperature: 6.2,\n    },\n  ];\n\n  const config = {\n    data,\n    xField: 'Month',\n    scale: { y: { nice: false } },\n    children: [\n      {\n        type: 'line',\n        yField: 'Temperature',\n        shapeField: 'smooth',\n        colorField: '#EE6666',\n        scale: { y: { domainMax: 30 } },\n        axis: {\n          y: {\n            title: 'Temperature (°C)',\n            style: { titleFill: '#EE6666' },\n          },\n        },\n      },\n      {\n        type: 'interval',\n        yField: 'Evaporation',\n        colorField: '#5470C6',\n        scale: { y: { domainMax: 200 } },\n        style: { fillOpacity: 0.8 },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'Evaporation (ml)',\n            style: { titleFill: '#5470C6' },\n          },\n        },\n      },\n      {\n        type: 'line',\n        yField: 'Precipitation',\n        shapeField: 'smooth',\n        colorField: '#91CC75',\n        style: {\n          lineWidth: 2,\n          lineDash: [2, 2],\n        },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'Precipitation (ml)',\n            style: { titleFill: '#91CC75' },\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"多轴图",en:"Multi Axis Chart"},filename:"multi-line.js",isNew:!1},{id:"dual-aggregated-line-area",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*J-lVRamRfgUAAAAAAAAAAAAADmJ7AQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/weather.json',\n      transform: [{ type: 'filter', callback: (d) => d.location === 'Seattle' }],\n    },\n    children: [\n      {\n        type: 'area',\n        xField: (d) => new Date(d.date).getUTCMonth(),\n        yField: ['temp_max', 'temp_min'],\n        transform: [{ type: 'groupX', y: 'mean', y1: 'mean' }],\n        style: { fill: '#85c5A6', fillOpacity: 0.3 },\n        axis: { y: { title: 'Avg. Temperature (°C)', titleFill: '#85C5A6' } },\n        tooltip: {\n          items: [\n            { channel: 'y', valueFormatter: '.1f' },\n            { channel: 'y1', valueFormatter: '.1f' },\n          ],\n        },\n      },\n      {\n        type: 'line',\n        xField: (d) => new Date(d.date).getMonth(),\n        yField: 'precipitation',\n        shapeField: 'smooth',\n        transform: [{ type: 'groupX', y: 'mean' }],\n        style: { stroke: 'steelblue' },\n        scale: { y: { nice: false } },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'Precipitation (inches)',\n            titleFill: 'steelblue',\n          },\n        },\n        tooltip: { items: [{ channel: 'y', valueFormatter: '.1f' }] },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"聚合线面双轴图",en:"Aggregated Dual Line And Area Chart"},filename:"dual-aggregated-line-area.js",isNew:!1},{id:"pareto",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*COKsS6s75kYAAAAAAAAAAAAADmJ7AQ/original",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const config = {\n    scale: { y: { nice: false } },\n    data: {\n      type: 'inline',\n      value: [\n        { x: 'Parking Difficult', value: 95 },\n        { x: 'Sales Rep was Rude', value: 60 },\n        { x: 'Poor Lighting', value: 45 },\n        { x: 'Layout Confusing', value: 37 },\n        { x: 'Sizes Limited', value: 30 },\n        { x: 'Clothing Faded', value: 27 },\n        { x: 'Clothing Shrank', value: 18 },\n      ],\n      transform: [\n        {\n          type: 'custom',\n          callback: (data) => {\n            const sum = data.reduce((r, curr) => r + curr.value, 0);\n            return data\n              .map((d) => ({\n                ...d,\n                percentage: d.value / sum,\n              }))\n              .reduce((r, curr) => {\n                const v = r.length ? r[r.length - 1].accumulate : 0;\n                const accumulate = v + curr.percentage;\n                r.push({\n                  ...curr,\n                  accumulate,\n                });\n                return r;\n              }, []);\n          },\n        },\n      ],\n    },\n    xField: 'x',\n    children: [\n      {\n        type: 'interval',\n        yField: 'value',\n        scale: { x: { padding: 0.5 }, y: { domainMax: 312, tickCount: 5 } },\n        style: { fill: (d) => (d.percentage < 0.1 ? '#E24B26' : '#78B3F0') },\n        axis: { x: { title: null }, y: { title: 'Defect frequency' } },\n        labels: [\n          {\n            text: (d) => `${(d.percentage * 100).toFixed(1)}%`,\n            textBaseline: 'bottom',\n          },\n        ],\n      },\n      {\n        type: 'line',\n        yField: 'accumulate',\n        scale: { y: { domainMin: 0, tickCount: 5 } },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'Cumulative Percentage',\n            grid: null,\n            labelFormatter: (d) => `${(d * 100).toFixed(0)}%`,\n          },\n        },\n        tooltip: {\n          items: [{ channel: 'y', valueFormatter: (d) => `${(d * 100).toFixed(2)}%` }],\n        },\n      },\n      {\n        type: 'point',\n        yField: 'accumulate',\n        shapeField: 'diamond',\n        scale: { y: { domainMin: 0 } },\n        axis: { y: false },\n        tooltip: false,\n      },\n    ],\n    title: 'Pareto Chart of Customer Complaints',\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"帕累托图",en:"Pareto Chart"},filename:"pareto.js",isNew:!1},{id:"column-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*M4ldTo75WeEAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { time: '2019-03', value: 350, count: 800 },\n    { time: '2019-04', value: 900, count: 600 },\n    { time: '2019-05', value: 300, count: 400 },\n    { time: '2019-06', value: 450, count: 380 },\n    { time: '2019-07', value: 470, count: 220 },\n  ];\n\n  const config = {\n    data,\n    xField: 'time',\n    legend: true,\n    children: [\n      {\n        type: 'interval',\n        yField: 'value',\n        style: { maxWidth: 80 },\n      },\n      {\n        type: 'line',\n        yField: 'count',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"柱线混合图表",en:"Column line"},filename:"column-line.js",isNew:!1},{id:"custom-column-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*vTPGSLODwLEAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { time: '2019-03', value: 350, count: 800 },\n    { time: '2019-04', value: 900, count: 600 },\n    { time: '2019-05', value: 300, count: 400 },\n    { time: '2019-06', value: 450, count: 380 },\n    { time: '2019-07', value: 470, count: 220 },\n  ];\n\n  const config = {\n    data,\n    xField: 'time',\n    legend: true,\n    children: [\n      {\n        type: 'interval',\n        yField: 'value',\n        style: { maxWidth: 80 },\n        label: { position: 'inside' },\n        interaction: {\n          elementHighlight: true,\n          elementHighlight: { background: true },\n        },\n      },\n      {\n        type: 'line',\n        yField: 'count',\n        shapeField: 'smooth',\n        style: { lineWidth: 2 },\n        axis: { y: false },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n    annotations: [\n      {\n        type: 'text',\n        data: ['2019-05', 300],\n        style: {\n          text: '2019-05, 发布新版本',\n          dy: -30,\n          fill: '#2C3542',\n          fillOpacity: 0.65,\n          fontSize: 10,\n          background: true,\n          backgroundRadius: 4,\n          connector: true,\n          startMarker: true,\n          startMarkerSize: 6,\n          startMarkerFill: '#fff',\n        },\n        tooltip: false,\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"柱线混合图表-自定义样式",en:"Custom column line"},filename:"custom-column-line.js",isNew:!1},{id:"range-column-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*MEdZR5UQzosAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { time: '2019-03', value: [200, 350], count: 800 },\n    { time: '2019-04', value: [400, 650], count: 600 },\n    { time: '2019-05', value: [150, 350], count: 400 },\n    { time: '2019-06', value: [100, 450], count: 380 },\n    { time: '2019-07', value: [500, 550], count: 220 },\n  ];\n\n  const config = {\n    data,\n    xField: 'time',\n    legend: true,\n    children: [\n      {\n        type: 'interval',\n        yField: 'value',\n        style: { maxWidth: 100 },\n      },\n      {\n        type: 'line',\n        yField: 'count',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"柱线混合图表-区间柱",en:"range-column-line"},filename:"range-column-line.js",isNew:!1},{id:"column-multi-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*FfmvR5_sLAEAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvData = [\n    { time: '2019-03', value: 35 },\n    { time: '2019-04', value: 90 },\n    { time: '2019-05', value: 30 },\n    { time: '2019-06', value: 45 },\n    { time: '2019-07', value: 47 },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800, name: 'a' },\n    { time: '2019-04', count: 600, name: 'a' },\n    { time: '2019-05', count: 400, name: 'a' },\n    { time: '2019-06', count: 380, name: 'a' },\n    { time: '2019-07', count: 220, name: 'a' },\n    { time: '2019-03', count: 750, name: 'b' },\n    { time: '2019-04', count: 650, name: 'b' },\n    { time: '2019-05', count: 450, name: 'b' },\n    { time: '2019-06', count: 400, name: 'b' },\n    { time: '2019-07', count: 320, name: 'b' },\n    { time: '2019-03', count: 900, name: 'c' },\n    { time: '2019-04', count: 600, name: 'c' },\n    { time: '2019-05', count: 450, name: 'c' },\n    { time: '2019-06', count: 300, name: 'c' },\n    { time: '2019-07', count: 200, name: 'c' },\n  ];\n\n  const config = {\n    xField: 'time',\n    legend: true,\n    scale: { color: { range: ['#1783FF', '#5AD8A6', '#5D7092', '#F6BD16'] } },\n    interaction: { tooltip: { sort: (d) => ['value', 'a', 'b', 'c'].indexOf(d.name) } },\n    children: [\n      {\n        data: uvData,\n        type: 'interval',\n        yField: 'value',\n        style: { maxWidth: 80 },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: 'name',\n        seriesField: 'name',\n        axis: { y: { position: 'right' } },\n        style: { lineWidth: 2 },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"柱线混合图表-显示多折线",en:"Column multi line"},filename:"column-multi-line.js",isNew:!1},{id:"slider-column-line",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/fxukGXuXfg/89ea37e5-e00d-4424-b75e-1aba3ff8b633.png",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { time: '2020-08-20', consumeTime: 10868, completeTime: 649.483 },\n    { time: '2020-08-21', consumeTime: 8786, completeTime: 1053.7 },\n    { time: '2020-08-22', consumeTime: 10824, completeTime: 679.817 },\n    { time: '2020-08-23', consumeTime: 7860, completeTime: 638.117 },\n    { time: '2020-08-24', consumeTime: 13253, completeTime: 843.3 },\n    { time: '2020-08-25', consumeTime: 17015, completeTime: 1092.983 },\n    { time: '2020-08-26', consumeTime: 19298, completeTime: 1036.317 },\n    { time: '2020-08-27', consumeTime: 13937, completeTime: 1031.9 },\n    { time: '2020-08-28', consumeTime: 11541, completeTime: 803.467 },\n    { time: '2020-08-29', consumeTime: 15244, completeTime: 830.733 },\n    { time: '2020-08-30', consumeTime: 14247, completeTime: 709.867 },\n    { time: '2020-08-31', consumeTime: 9402, completeTime: 665.233 },\n    { time: '2020-09-01', consumeTime: 10440, completeTime: 696.367 },\n    { time: '2020-09-02', consumeTime: 9345, completeTime: 692.867 },\n    { time: '2020-09-03', consumeTime: 18459, completeTime: 936.017 },\n    { time: '2020-09-04', consumeTime: 9763, completeTime: 782.867 },\n    { time: '2020-09-05', consumeTime: 11074, completeTime: 653.8 },\n    { time: '2020-09-06', consumeTime: 11770, completeTime: 856.683 },\n    { time: '2020-09-07', consumeTime: 12206, completeTime: 777.15 },\n    { time: '2020-09-08', consumeTime: 11434, completeTime: 773.283 },\n    { time: '2020-09-09', consumeTime: 16218, completeTime: 833.3 },\n    { time: '2020-09-10', consumeTime: 11914, completeTime: 793.517 },\n    { time: '2020-09-11', consumeTime: 16781, completeTime: 894.45 },\n    { time: '2020-09-12', consumeTime: 10555, completeTime: 725.55 },\n    { time: '2020-09-13', consumeTime: 10899, completeTime: 709.967 },\n    { time: '2020-09-14', consumeTime: 10713, completeTime: 787.6 },\n    { time: '2020-09-15', consumeTime: 0, completeTime: 644.183 },\n    { time: '2020-09-16', consumeTime: 0, completeTime: 1066.65 },\n    { time: '2020-09-17', consumeTime: 20357, completeTime: 932.45 },\n    { time: '2020-09-18', consumeTime: 10424, completeTime: 753.583 },\n  ];\n\n  const config = {\n    data,\n    xField: 'time',\n    padding: 70,\n    legend: true,\n    slider: { x: true },\n    scale: { y: { nice: false } },\n    children: [\n      {\n        type: 'interval',\n        yField: 'consumeTime',\n        style: { stroke: '#5B8FF9' },\n      },\n      {\n        type: 'line',\n        yField: 'completeTime',\n        style: { stroke: '#5AD8A6', lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"柱线混合图表-滑块",en:"Slider with column line"},filename:"slider-column-line.js",isNew:!1},{id:"dual-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*HS5DT4j34XEAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { year: '1991', value: 3, count: 10 },\n    { year: '1992', value: 4, count: 4 },\n    { year: '1993', value: 3.5, count: 5 },\n    { year: '1994', value: 5, count: 5 },\n    { year: '1995', value: 4.9, count: 4.9 },\n    { year: '1996', value: 6, count: 35 },\n    { year: '1997', value: 7, count: 7 },\n    { year: '1998', value: 9, count: 1 },\n    { year: '1999', value: 13, count: 20 },\n  ];\n\n  const config = {\n    data,\n    xField: 'year',\n    legend: true,\n    children: [\n      {\n        type: 'line',\n        yField: 'value',\n        style: {\n          stroke: '#5B8FF9',\n          lineWidth: 2,\n        },\n        axis: {\n          y: {\n            title: 'value',\n            style: { titleFill: '#5B8FF9' },\n          },\n        },\n      },\n      {\n        type: 'line',\n        yField: 'count',\n        style: {\n          stroke: '#5AD8A6',\n          lineWidth: 2,\n        },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'count',\n            style: { titleFill: '#5AD8A6' }\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"双折线图",en:"Dual line"},filename:"dual-line.js",isNew:!1},{id:"custom-dual-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*FtUXRLU3mUgAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { year: '1991', value: 3, count: 10 },\n    { year: '1992', value: 4, count: 4 },\n    { year: '1993', value: 3.5, count: 5 },\n    { year: '1994', value: 5, count: 5 },\n    { year: '1995', value: 4.9, count: 4.9 },\n    { year: '1996', value: 6, count: 35 },\n    { year: '1997', value: 7, count: 7 },\n    { year: '1998', value: 9, count: 1 },\n    { year: '1999', value: 13, count: 20 },\n  ];\n\n  const config = {\n    data,\n    xField: 'year',\n    legend: true,\n    children: [\n      {\n        type: 'line',\n        yField: 'value',\n        style: {\n          lineWidth: 3,\n          lineDash: [5, 5],\n        },\n        label: {\n          text: (datum) => `${datum.value}个`,\n          style: {\n            dy: -10,\n            textAlign: 'middle',\n          },\n        },\n        axis: {\n          y: {\n            title: 'value',\n            style: { titleFill: '#5B8FF9' },\n          },\n        },\n      },\n      {\n        type: 'line',\n        yField: 'count',\n        shapeField: 'smooth',\n        style: {\n          stroke: '#5AD8A6',\n          lineWidth: 4,\n          opacity: 0.5,\n        },\n        label: {\n          text: (datum) => `${datum.count}个`,\n          style: {\n            dy: -10,\n            textAlign: 'middle',\n          },\n        },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'count',\n            style: { titleFill: '#5AD8A6' },\n          },\n        },\n      },\n      {\n        type: 'point',\n        yField: 'count',\n        sizeField: 4,\n        style: {\n          stroke: '#5AD8A6',\n          fill: '#fff',\n        },\n        axis: { y: false },\n        tooltip: false,\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"双折线图 - 自定义折线样式",en:"Dual line with style"},filename:"custom-dual-line.js",isNew:!1},{id:"dual-step-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*5qvZTIy44UIAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const data = [\n    { year: '1991', value: 3, count: 10 },\n    { year: '1992', value: 4, count: 4 },\n    { year: '1993', value: 3.5, count: 5 },\n    { year: '1994', value: 5, count: 5 },\n    { year: '1995', value: 4.9, count: 4.9 },\n    { year: '1996', value: 6, count: 35 },\n    { year: '1997', value: 7, count: 7 },\n    { year: '1998', value: 9, count: 1 },\n    { year: '1999', value: 13, count: 20 },\n  ];\n\n  const config = {\n    data,\n    xField: 'year',\n    legend: true,\n    children: [\n      {\n        type: 'line',\n        yField: 'value',\n        shapeField: 'vh',\n        style: {\n          stroke: '#29cae4',\n          lineWidth: 2,\n        },\n      },\n      {\n        type: 'line',\n        yField: 'count',\n        shapeField: 'smooth',\n        style: {\n          stroke: '#5AD8A6',\n          lineWidth: 2,\n        },\n        axis: {\n          y: {\n            position: 'right',\n            title: 'count',\n            style: { titleFill: '#5AD8A6' },\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"双折线图 - 阶梯折线",en:"Dual Step Line"},filename:"dual-step-line.js",isNew:!1},{id:"dual-multi-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*BzyZQapC7ucAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800, name: 'a' },\n    { time: '2019-04', count: 600, name: 'a' },\n    { time: '2019-05', count: 400, name: 'a' },\n    { time: '2019-06', count: 380, name: 'a' },\n    { time: '2019-07', count: 220, name: 'a' },\n    { time: '2019-03', count: 750, name: 'b' },\n    { time: '2019-04', count: 650, name: 'b' },\n    { time: '2019-05', count: 450, name: 'b' },\n    { time: '2019-06', count: 400, name: 'b' },\n    { time: '2019-07', count: 320, name: 'b' },\n    { time: '2019-03', count: 900, name: 'c' },\n    { time: '2019-04', count: 600, name: 'c' },\n    { time: '2019-05', count: 450, name: 'c' },\n    { time: '2019-06', count: 300, name: 'c' },\n    { time: '2019-07', count: 200, name: 'c' },\n  ];\n\n  const config = {\n    xField: 'time',\n    scale: { color: { range: ['#5B8FF9', '#5AD8A6', '#5D7092', '#F6BD16', '#6F5EF9'] } },\n    children: [\n      {\n        data: uvBillData,\n        type: 'line',\n        yField: 'value',\n        colorField: 'type',\n        shapeField: 'smooth',\n        style: { lineWidth: 3, lineDash: [5, 5] },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: 'name',\n        axis: { y: false },\n        style: { lineWidth: 3 },\n      },\n      {\n        data: transformData,\n        type: 'point',\n        yField: 'count',\n        colorField: 'name',\n        sizeField: 3,\n        shapeField: 'point',\n        axis: { y: false },\n        tooltip: false,\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"双折线图 - 多折线",en:"Dual multi line"},filename:"dual-multi-line.js",isNew:!1},{id:"stacked-column-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*q42bQKI2imQAAAAAAAAAAAAADmJ7AQ/original",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800 },\n    { time: '2019-04', count: 600 },\n    { time: '2019-05', count: 400 },\n    { time: '2019-06', count: 380 },\n    { time: '2019-07', count: 220 },\n  ];\n\n  const config = {\n    xField: 'time',\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        stack: true,\n        colorField: 'type',\n        style: { maxWidth: 80 },\n        scale: { y: { domainMax: 1200 } },\n        interaction: { elementHighlight: { background: true } },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: () => 'count',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"堆叠柱线图表",en:"Stacked column line"},filename:"stacked-column-line.js",isNew:!1},{id:"custom-stacked-column-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*QPdnRqb4QH8AAAAAAAAAAAAADmJ7AQ/original",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800 },\n    { time: '2019-04', count: 600 },\n    { time: '2019-05', count: 400 },\n    { time: '2019-06', count: 380 },\n    { time: '2019-07', count: 220 },\n  ];\n\n  const config = {\n    xField: 'time',\n    legend: {\n      color: {\n        itemMarker: 'round',\n        itemMarkerSize: 14,\n        position: 'right',\n      },\n    },\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        stack: true,\n        colorField: 'type',\n        style: { maxWidth: 80 },\n        label: { position: 'inside' },\n        scale: { y: { domainMax: 1200 } },\n        interaction: {\n          elementHighlight: true,\n          elementHighlight: { background: true },\n        },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: () => 'count',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n    theme: { category10: ['#F4A49E', '#FACDAA', '#EE7B91', '#E85285', '#BE408C', '#BE408C'] },\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"堆叠柱线图表-自定义样式",en:"Custom stacked column line"},filename:"custom-stacked-column-line.js",isNew:!1},{id:"stacked-percent-column-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*0mcySZJTJ5sAAAAAAAAAAAAADmJ7AQ/original",source:"import { DualAxes, G2 } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800 },\n    { time: '2019-04', count: 600 },\n    { time: '2019-05', count: 400 },\n    { time: '2019-06', count: 380 },\n    { time: '2019-07', count: 220 },\n  ];\n\n  const config = {\n    xField: 'time',\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        stack: true,\n        percent: true,\n        colorField: 'type',\n        style: { maxWidth: 80 },\n        tooltip: { channel: 'y0', valueFormatter: '.0%' },\n        axis: { y: { title: 'value', style: { titleFill: '#5B8FF9' } } },\n        interaction: { elementHighlight: { background: true } },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: () => 'count',\n        style: { lineWidth: 2 },\n        axis: {\n          y: {\n            position: 'right',\n            style: { titleFill: '#5AD8A6' },\n          },\n        },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"百分比堆叠柱线图表",en:"stacked-percent-column-line"},filename:"stacked-percent-column-line.js",isNew:!1},{id:"stacked-column-multi-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*1UmPSZbc-XAAAAAAAAAAAAAADmJ7AQ/original",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800, name: 'a' },\n    { time: '2019-04', count: 600, name: 'a' },\n    { time: '2019-05', count: 400, name: 'a' },\n    { time: '2019-06', count: 380, name: 'a' },\n    { time: '2019-07', count: 220, name: 'a' },\n    { time: '2019-03', count: 750, name: 'b' },\n    { time: '2019-04', count: 650, name: 'b' },\n    { time: '2019-05', count: 450, name: 'b' },\n    { time: '2019-06', count: 400, name: 'b' },\n    { time: '2019-07', count: 320, name: 'b' },\n    { time: '2019-03', count: 900, name: 'c' },\n    { time: '2019-04', count: 600, name: 'c' },\n    { time: '2019-05', count: 450, name: 'c' },\n    { time: '2019-06', count: 300, name: 'c' },\n    { time: '2019-07', count: 200, name: 'c' },\n  ];\n\n  const config = {\n    xField: 'time',\n    interaction: { tooltip: { sort: (d) => ['uv', 'bill', 'a', 'b', 'c'].indexOf(d.name) } },\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        colorField: 'type',\n        stack: true,\n        style: { maxWidth: 80 },\n        scale: { y: { domainMax: 1200 } },\n        interaction: { elementHighlight: { background: true } },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: 'name',\n        style: {\n          lineWidth: 2,\n          opacity: (d) => {\n            if (d[0].name === 'a') {\n              return 1;\n            }\n            return 0.5;\n          },\n          lineDash: (d) => {\n            if (d[0].name === 'a') {\n              return [1, 4];\n            }\n          },\n        },\n        axis: { y: { position: 'right' } },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"堆叠柱线图表-显示多折线",en:"Stacked column multi line"},filename:"stacked-column-multi-line.js",isNew:!1},{id:"grouped-column-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*ydQDSpPe9B0AAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800 },\n    { time: '2019-04', count: 600 },\n    { time: '2019-05', count: 400 },\n    { time: '2019-06', count: 380 },\n    { time: '2019-07', count: 220 },\n  ];\n\n  const config = {\n    xField: 'time',\n    legend: true,\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        colorField: 'type',\n        group: true,\n        interaction: { elementHighlight: { background: true } },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"分组柱线图表",en:"Grouped column line"},filename:"grouped-column-line.js",isNew:!1},{id:"custom-grouped-column-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*Ogg7R6trDvgAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800 },\n    { time: '2019-04', count: 600 },\n    { time: '2019-05', count: 400 },\n    { time: '2019-06', count: 380 },\n    { time: '2019-07', count: 220 },\n  ];\n\n  const config = {\n    xField: 'time',\n    legend: {\n      color: {\n        position: 'bottom',\n        layout: { justifyContent: 'center' },\n      },\n    },\n    scale: { color: { range: ['#5B8FF9', '#5D7092', '#5AD8A6'] } },\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        colorField: 'type',\n        group: true,\n        style: { maxWidth: 50 },\n        label: { position: 'inside' },\n        interaction: { elementHighlight: { background: true } },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"分组柱线图表-自定义样式",en:"Custom grouped column line"},filename:"custom-grouped-column-line.js",isNew:!1},{id:"grouped-column-multi-line",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*xzh4RYzYTFcAAAAAAAAAAAAAARQnAQ",source:"import { DualAxes } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoDualAxes = () => {\n  const uvBillData = [\n    { time: '2019-03', value: 350, type: 'uv' },\n    { time: '2019-04', value: 900, type: 'uv' },\n    { time: '2019-05', value: 300, type: 'uv' },\n    { time: '2019-06', value: 450, type: 'uv' },\n    { time: '2019-07', value: 470, type: 'uv' },\n    { time: '2019-03', value: 220, type: 'bill' },\n    { time: '2019-04', value: 300, type: 'bill' },\n    { time: '2019-05', value: 250, type: 'bill' },\n    { time: '2019-06', value: 220, type: 'bill' },\n    { time: '2019-07', value: 362, type: 'bill' },\n  ];\n\n  const transformData = [\n    { time: '2019-03', count: 800, name: 'a' },\n    { time: '2019-04', count: 600, name: 'a' },\n    { time: '2019-05', count: 400, name: 'a' },\n    { time: '2019-06', count: 380, name: 'a' },\n    { time: '2019-07', count: 220, name: 'a' },\n    { time: '2019-03', count: 750, name: 'b' },\n    { time: '2019-04', count: 650, name: 'b' },\n    { time: '2019-05', count: 450, name: 'b' },\n    { time: '2019-06', count: 400, name: 'b' },\n    { time: '2019-07', count: 320, name: 'b' },\n    { time: '2019-03', count: 900, name: 'c' },\n    { time: '2019-04', count: 600, name: 'c' },\n    { time: '2019-05', count: 450, name: 'c' },\n    { time: '2019-06', count: 300, name: 'c' },\n    { time: '2019-07', count: 200, name: 'c' },\n  ];\n\n  const config = {\n    xField: 'time',\n    children: [\n      {\n        data: uvBillData,\n        type: 'interval',\n        yField: 'value',\n        colorField: 'type',\n        group: true,\n        style: { maxWidth: 80 },\n        interaction: { elementHighlight: { background: true } },\n      },\n      {\n        data: transformData,\n        type: 'line',\n        yField: 'count',\n        colorField: 'name',\n        style: { lineWidth: 2 },\n        axis: { y: { position: 'right' } },\n        scale: { series: { independent: true } },\n        interaction: {\n          tooltip: {\n            crosshairs: false,\n            marker: false,\n          },\n        },\n      },\n    ],\n  };\n  return <DualAxes {...config} />;\n};\n\nReactDOM.render(<DemoDualAxes />, document.getElementById('container'));\n",title:{zh:"分组柱线图表-显示多折线",en:"Grouped column multi line"},filename:"grouped-column-multi-line.js",isNew:!1}],icon:"",id:"dual-axes",title:{en:"DualAxes",zh:"双轴图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"funnel",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*VHVOTK8LhxkAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Funnel } from '@ant-design/plots';\n\nconst DemoFunnel = () => {\n  const data = [\n    { stage: '简历筛选', number: 253 },\n    { stage: '初试人数', number: 151 },\n    { stage: '复试人数', number: 113 },\n    { stage: '录取人数', number: 87 },\n    { stage: '入职人数', number: 59 },\n  ];\n\n  const config = {\n    data,\n    xField: 'stage',\n    yField: 'number',\n    label: {\n      text: (d) => `${d.stage}\\n${d.number}`,\n    },\n  };\n\n  return <Funnel {...config} />;\n};\n\nReactDOM.render(<DemoFunnel />, document.getElementById('container'));\n",title:{zh:"漏斗图",en:"Funnel"},filename:"funnel.js",isNew:!1},{id:"pyramid",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GqpjQLFLh0QAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Funnel } from '@ant-design/plots';\n\nconst DemoFunnel = () => {\n  const data = [\n    { action: '浏览网站', pv: 50000 },\n    { action: '放入购物车', pv: 35000 },\n    { action: '生成订单', pv: 25000 },\n    { action: '支付订单', pv: 15000 },\n    { action: '完成交易', pv: 8000 },\n  ];\n\n  const config = {\n    data,\n    xField: 'action',\n    yField: 'pv',\n    shapeField: 'pyramid',\n    label: [\n      {\n        text: (d) => d.pv,\n        position: 'inside',\n        fontSize: 16,\n      },\n      {\n        render: ($, _, i) => {\n          if (i)\n            return (\n              <div\n                style={{\n                  height: 1,\n                  width: 30,\n                  background: '#aaa',\n                  margin: '0 20',\n                }}\n              ></div>\n            );\n        },\n        position: 'top-right',\n      },\n      {\n        text: (d, i, data) => {\n          if (i) return ((d.pv / data[i - 1].pv) * 100).toFixed(2) + '%';\n        },\n        position: 'top-right',\n        textAlign: 'left',\n        textBaseline: 'middle',\n        dx: 40,\n      },\n    ],\n  };\n\n  return <Funnel {...config} />;\n};\n\nReactDOM.render(<DemoFunnel />, document.getElementById('container'));\n",title:{zh:"金字塔图",en:"Pyramid"},filename:"pyramid.js",isNew:!1},{id:"mirror-funnel",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TCTrRaKsv78AAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Funnel } from '@ant-design/plots';\n\nconst DemoFunnel = () => {\n  const data = [\n    { action: '访问', visitor: 500, site: '站点1' },\n    { action: '浏览', visitor: 400, site: '站点1' },\n    { action: '交互', visitor: 300, site: '站点1' },\n    { action: '下单', visitor: 200, site: '站点1' },\n    { action: '完成', visitor: 100, site: '站点1' },\n    { action: '访问', visitor: 550, site: '站点2' },\n    { action: '浏览', visitor: 420, site: '站点2' },\n    { action: '交互', visitor: 280, site: '站点2' },\n    { action: '下单', visitor: 150, site: '站点2' },\n    { action: '完成', visitor: 80, site: '站点2' },\n  ];\n\n  const uPosition = (item, values) => {\n    if (item.site === '站点2') {\n      return values[0];\n    }\n    return values[1];\n  };\n\n  const config = {\n    data,\n    xField: 'action',\n    yField: 'visitor',\n    compareField: 'site',\n    style: {\n      stroke: '#fff',\n    },\n    label: [\n      {\n        text: (d) => d.visitor,\n        position: 'inside',\n        fontSize: 16,\n      },\n      {\n        render: ($, _, i) => {\n          if (i)\n            return (\n              <div\n                style={{\n                  height: 1,\n                  width: 30,\n                  background: '#aaa',\n                  marginLeft: _.site === '站点2' ? -30 : 0,\n                }}\n              ></div>\n            );\n        },\n        position: (item) => uPosition(item, ['top-left', 'top-right']),\n      },\n      {\n        text: (d, i, data) => {\n          if (i) return ((d.visitor / data[i - 1].visitor) * 100).toFixed(2) + '%';\n        },\n        position: (item) => uPosition(item, ['top-left', 'top-right']),\n        textAlign: (item) => uPosition(item, ['right', 'left']),\n        textBaseline: 'middle',\n        dx: (item) => uPosition(item, [-40, 40]),\n      },\n    ],\n    legend: false,\n  };\n  return <Funnel {...config} />;\n};\n\nReactDOM.render(<DemoFunnel />, document.getElementById('container'));\n",title:{zh:"对比漏斗图",en:"Mirror Funnel"},filename:"mirror-funnel.js",isNew:!1},{id:"transpose",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Ov19Tqg60toAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Funnel } from '@ant-design/plots';\n\nconst DemoFunnel = () => {\n  const data = [\n    { stage: '简历筛选', number: 253 },\n    { stage: '初试人数', number: 151 },\n    { stage: '复试人数', number: 113 },\n    { stage: '录取人数', number: 87 },\n    { stage: '入职人数', number: 59 },\n  ];\n\n  const config = {\n    data: data,\n    xField: 'stage',\n    yField: 'number',\n    isTransposed: false,\n    label: [\n      {\n        text: (d) => d.number,\n        position: 'inside',\n        fontSize: 16,\n      },\n      {\n        render: ($, _, i) => {\n          if (i)\n            return (\n              <div\n                style={{\n                  height: 30,\n                  width: 1,\n                  background: '#aaa',\n                  marginTop: -30,\n                }}\n              ></div>\n            );\n        },\n        position: 'top-left',\n      },\n      {\n        text: (d, i, data) => {\n          if (i) return ((d.number / data[i - 1].number) * 100).toFixed(2) + '%';\n        },\n        position: 'top-left',\n        textAlign: 'middle',\n        textBaseline: 'bottom',\n        dy: -30,\n      },\n    ],\n  };\n\n  return <Funnel {...config} />;\n};\n\nReactDOM.render(<DemoFunnel />, document.getElementById('container'));\n",title:{zh:"转化漏斗图-转置",en:"Annotation Funnel transpose"},filename:"transpose.js",isNew:!1}],icon:"",id:"funnel",title:{en:"Funnel",zh:"漏斗图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"binx",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*yTCIRruhfOoAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Histogram } from '@ant-design/plots';\n\nconst DemoHistogram = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/unemployment2.json',\n    },\n    style: {\n      inset: 0.5,\n    },\n    binField: 'rate',\n    channel: 'count',\n    // 分箱数量\n    binNumber: 10,\n  };\n\n  return <Histogram {...config} />;\n};\n\nReactDOM.render(<DemoHistogram />, document.getElementById('container'));\n",title:{zh:"直方图",en:"Histogram"},filename:"binx.js",isNew:!1},{id:"binx-color",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*sk8XRJTkuwYAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Histogram } from '@ant-design/plots';\n\nconst DemoHistogram = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    },\n    binField: 'weight',\n    channel: 'count',\n    colorField: 'sex',\n    stack: {\n      orderBy: 'series',\n    },\n    style: {\n      inset: 0.5,\n    },\n  };\n\n  return <Histogram {...config} />;\n};\n\nReactDOM.render(<DemoHistogram />, document.getElementById('container'));\n",title:{zh:"颜色分类直方图",en:"Histogram with Color"},filename:"binx-color.js",isNew:!1},{id:"binWidth",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*3Q40QKcUIfIAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Histogram } from '@ant-design/plots';\n\nconst data = [\n  { value: 1.2 },\n  { value: 3.4 },\n  { value: 3.7 },\n  { value: 4.3 },\n  { value: 5.2 },\n  { value: 5.8 },\n  { value: 6.1 },\n  { value: 6.5 },\n  { value: 6.8 },\n  { value: 7.1 },\n  { value: 7.3 },\n  { value: 7.7 },\n  { value: 8.3 },\n  { value: 8.6 },\n  { value: 8.8 },\n  { value: 9.1 },\n  { value: 9.2 },\n  { value: 9.4 },\n  { value: 9.5 },\n  { value: 9.7 },\n  { value: 10.5 },\n  { value: 10.7 },\n  { value: 10.8 },\n  { value: 11.0 },\n  { value: 11.0 },\n  { value: 11.1 },\n  { value: 11.2 },\n  { value: 11.3 },\n  { value: 11.4 },\n  { value: 11.4 },\n  { value: 11.7 },\n  { value: 12.0 },\n  { value: 12.9 },\n  { value: 12.9 },\n  { value: 13.3 },\n  { value: 13.7 },\n  { value: 13.8 },\n  { value: 13.9 },\n  { value: 14.0 },\n  { value: 14.2 },\n  { value: 14.5 },\n  { value: 15 },\n  { value: 15.2 },\n  { value: 15.6 },\n  { value: 16.0 },\n  { value: 16.3 },\n  { value: 17.3 },\n  { value: 17.5 },\n  { value: 17.9 },\n  { value: 18.0 },\n  { value: 18.0 },\n  { value: 20.6 },\n  { value: 21 },\n  { value: 23.4 },\n];\n\nconst DemoHistogram = () => {\n  const config = {\n    data,\n    style: {\n      inset: 0.5,\n    },\n    binField: 'value',\n    channel: 'count',\n    binWidth: 4,\n    scale: {\n      x: { domainMin: 0, tickCount: 10 },\n      y: {\n        domainMax: 15,\n        nice: true,\n      },\n    },\n  };\n\n  return <Histogram {...config} />;\n};\n\nReactDOM.render(<DemoHistogram />, document.getElementById('container'));\n",title:{zh:"直方图范围刻度",en:"Bin histogram plot"},filename:"binWidth.js",isNew:!1}],icon:"",id:"histogram",title:{en:"Histogram",zh:"直方图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*okGTT7D7fBEAAAAAAAAAAAAADmJ7AQ/original",source:"import { Radar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { name: 'G2', star: 10371 },\n  { name: 'G6', star: 7380 },\n  { name: 'F2', star: 7414 },\n  { name: 'L7', star: 2140 },\n  { name: 'X6', star: 660 },\n  { name: 'AVA', star: 885 },\n  { name: 'G2Plot', star: 1626 },\n];\n\nconst DemoRadar = () => {\n  const config = {\n    data: data.map((d) => ({ ...d, star: Math.sqrt(d.star) })),\n    xField: 'name',\n    yField: 'star',\n    area: {\n      style: {\n        fillOpacity: 0.2,\n      },\n    },\n    scale: {\n      x: {\n        padding: 0.5,\n        align: 0,\n      },\n      y: {\n        nice: true,\n      },\n    },\n    axis: {\n      x: {\n        title: false,\n        grid: true,\n      },\n      y: {\n        gridAreaFill: 'rgba(0, 0, 0, 0.04)',\n        label: false,\n        title: false,\n      },\n    },\n  };\n  return <Radar {...config} />;\n};\n\nReactDOM.render(<DemoRadar />, document.getElementById('container'));\n",title:{zh:"基础雷达图",en:"Basic Radar"},filename:"basic.js",isNew:!1},{id:"radar",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*6QupRa5exboAAAAAAAAAAAAADmJ7AQ/original",source:"import { Radar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { item: 'Design', type: 'a', score: 70 },\n  { item: 'Design', type: 'b', score: 30 },\n  { item: 'Development', type: 'a', score: 60 },\n  { item: 'Development', type: 'b', score: 70 },\n  { item: 'Marketing', type: 'a', score: 50 },\n  { item: 'Marketing', type: 'b', score: 60 },\n  { item: 'Users', type: 'a', score: 40 },\n  { item: 'Users', type: 'b', score: 50 },\n  { item: 'Test', type: 'a', score: 60 },\n  { item: 'Test', type: 'b', score: 70 },\n  { item: 'Language', type: 'a', score: 70 },\n  { item: 'Language', type: 'b', score: 50 },\n  { item: 'Technology', type: 'a', score: 50 },\n  { item: 'Technology', type: 'b', score: 40 },\n  { item: 'Support', type: 'a', score: 30 },\n  { item: 'Support', type: 'b', score: 40 },\n  { item: 'Sales', type: 'a', score: 60 },\n  { item: 'Sales', type: 'b', score: 40 },\n  { item: 'UX', type: 'a', score: 50 },\n  { item: 'UX', type: 'b', score: 60 },\n];\n\nconst DemoRadar = () => {\n  const config = {\n    data,\n    xField: 'item',\n    yField: 'score',\n    colorField: 'type',\n    shapeField: 'smooth',\n    area: {\n      style: {\n        fillOpacity: 0.5,\n      },\n    },\n    scale: { x: { padding: 0.5, align: 0 }, y: { tickCount: 5, domainMax: 80 } },\n    axis: { x: { grid: true }, y: { zIndex: 1, title: false } },\n    style: {\n      lineWidth: 2,\n    },\n  };\n  return <Radar {...config} />;\n};\n\nReactDOM.render(<DemoRadar />, document.getElementById('container'));\n",title:{zh:"雷达图(一般极坐标 polar)",en:"Radar (coordinate polar)"},filename:"radar.js",isNew:!1},{id:"parallel-radar",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4sqyTZUFCNkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Radar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst axis = {\n  zIndex: 1,\n  style: {\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  },\n};\n\nconst DemoRadar = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n    },\n    colorField: 'weight (lb)',\n    coordinateType: 'radar',\n    positionField: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    axis: {\n      position: axis,\n      position1: axis,\n      position2: axis,\n      position3: axis,\n      position4: axis,\n      position5: axis,\n      position6: axis,\n      position7: axis,\n    },\n    legend: {\n      color: {\n        position: 'bottom',\n        labelFormatter: '~s',\n        length: 200,\n        layout: { justifyContent: 'center' },\n      },\n    },\n    style: { strokeWidth: 1.5, strokeOpacity: 0.4 },\n    interaction: { tooltip: { series: false } },\n    scale: { color: { palette: 'brBG', offset: (t) => 1 - t } },\n  };\n  return <Radar {...config} />;\n};\n\nReactDOM.render(<DemoRadar />, document.getElementById('container'));\n",title:{zh:"雷达图(雷达图特殊极坐标 radar)",en:"Radar (coordinate radar)"},filename:"parallel-radar.js",isNew:!1},{id:"area-radial",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*-m-2QolJUt0AAAAAAAAAAAAADmJ7AQ",source:"import { Radar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoRadar = () => {\n  const config = {\n    autoFit: false,\n    width: 954,\n    height: 954,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seasonal-weather.json',\n      transform: [\n        {\n          type: 'map',\n          callback: (d) => ({\n            ...d,\n            date: new Date(d.date),\n          }),\n        },\n      ],\n    },\n    xField: 'date',\n    yField: 'avg',\n    scale: { x: { utc: true } },\n    style: { stroke: 'steelblue', strokeWidth: 1.5 },\n    tooltip: { items: [{ channel: 'y', valueFormatter: '.1f' }] },\n    innerRadius: 0.4,\n    axis: {\n      y: {\n        zIndex: 1,\n        direction: 'center',\n        title: null,\n        labelFormatter: (d, i, array) => (i === array.length - 1 ? `${d}°F` : `${d}`),\n        style: { labelStroke: '#fff', labelStrokeWidth: 5 },\n      },\n      x: { grid: true, position: 'inner' },\n    },\n    annotations: [\n      {\n        type: 'area',\n        xField: 'date',\n        yField: ['minmin', 'maxmax'],\n        style: { fill: 'lightsteelblue', fillOpacity: 0.2 },\n      },\n      {\n        type: 'area',\n        xField: 'date',\n        yField: ['min', 'max'],\n        style: { fill: 'steelblue', fillOpacity: 0.2 },\n      },\n    ],\n  };\n  return <Radar {...config} />;\n};\n\nReactDOM.render(<DemoRadar />, document.getElementById('container'));\n",title:{zh:"径向面积图",en:"Radial Area Chart"},filename:"area-radial.js",isNew:!1}],icon:"",id:"radar",title:{en:"Radar",zh:"雷达图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### coordinateType \n \n<description>**required** _radar | polar_</description> \n \n坐标系类型 \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### coordinateType \n \n<description>**required** _radar | polar_</description> \n \n坐标系类型 \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"basic-area",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*e7gFTKK4RXwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoArea = () => {\n  const data = [\n    264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n  ].map((value, index) => ({ value, index }));\n  const config = {\n    data,\n    width: 480,\n    height: 80,\n    padding: 8,\n    shapeField: 'smooth',\n    xField: 'index',\n    yField: 'value',\n    style: {\n      fill: 'linear-gradient(-90deg, white 0%, darkgreen 100%)',\n      fillOpacity: 0.6,\n    },\n  };\n  return <Tiny.Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"迷你面积",en:"tiny area plot"},filename:"basic-area.js",isNew:!1},{id:"area-annotation",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4DlNQrsCYZAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n].map((value, index) => ({ value, index }));\nconst DemoArea = () => {\n  const config = {\n    data,\n    width: 480,\n    height: 80,\n    padding: 8,\n    shapeField: 'smooth',\n    xField: 'index',\n    yField: 'value',\n    style: {\n      fill: 'linear-gradient(-90deg, white 0%, darkgreen 100%)',\n      fillOpacity: 0.6,\n    },\n    annotations: [\n      {\n        type: 'lineY',\n        data: [data.reduce((acc, cur) => acc + cur.value, 0) / data.length],\n        label: {\n          text: '平均值',\n          position: 'left',\n          dx: -10,\n          style: { textBaseline: 'bottom' },\n        },\n\n        style: { stroke: 'rgba(0, 0, 0)' },\n      },\n      {\n        type: 'lineY',\n        data: [800],\n        label: {\n          text: '目标值',\n          position: 'left',\n          dx: -10,\n          style: { textBaseline: 'bottom' },\n        },\n        style: { stroke: 'rgba(0, 0, 0)' },\n      },\n    ],\n  };\n  return <Tiny.Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"带辅助信息的迷你面积图",en:"Tiny area plot with annotations"},filename:"area-annotation.js",isNew:!1},{id:"filled-area",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*tN1MTpkoO8gAAAAAAAAAAAAAARQnAQ",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoArea = () => {\n  const data = [\n    264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n  ].map((value, index) => ({ value, index }));\n  const config = {\n    data,\n    width: 480,\n    height: 80,\n    padding: 8,\n    shapeField: 'smooth',\n    xField: 'index',\n    yField: 'value',\n    style: {\n      fill: '#d6e3fd',\n      fillOpacity: 0.6,\n    },\n  };\n  return <Tiny.Area {...config} />;\n};\n\nReactDOM.render(<DemoArea />, document.getElementById('container'));\n",title:{zh:"平铺填充迷你面积图",en:"Filled tiny area plot"},filename:"filled-area.js",isNew:!1},{id:"basic-column",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*AHtKS7goLgkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLine = () => {\n  const data = [\n    264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n  ].map((value, index) => ({ value, index }));\n  const config = {\n    data,\n    width: 480,\n    height: 80,\n    padding: 8,\n    xField: 'index',\n    yField: 'value',\n  };\n  return <Tiny.Column {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"迷你柱形图",en:"tiny column plot"},filename:"basic-column.js",isNew:!1},{id:"column-annotation",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*SucISYgPzscAAAAAAAAAAAAADmJ7AQ/original",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLine = () => {\n  const data = [\n    264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n  ].map((value, index) => ({ value, index }));\n  const config = {\n    data,\n    width: 480,\n    height: 80,\n    padding: 8,\n    xField: 'index',\n    yField: 'value',\n    annotations: [\n      {\n        type: 'lineY',\n        data: [700],\n        style: { arrow: true, stroke: 'red', lineDash: [2, 2] },\n        label: {\n          text: 'value = 700',\n          position: 'right',\n          dx: -10,\n          style: { textBaseline: 'bottom' },\n        },\n      },\n    ],\n  };\n  return <Tiny.Column {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"带辅助线的迷你柱形图",en:"Tiny column plot with annotation"},filename:"column-annotation.js",isNew:!1},{id:"basic-line",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*7mspQrtT-VYAAAAAAAAAAAAADmJ7AQ/original",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLine = () => {\n  const data = [\n    264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n  ].map((value, index) => ({ value, index }));\n  const config = {\n    data,\n    width: 480,\n    height: 120,\n    shapeField: 'smooth',\n    xField: 'index',\n    yField: 'value',\n    label: {\n      selector: 'last',\n      text: (d) => d.value,\n      textAlign: 'right',\n      textBaseline: 'bottom',\n      dx: -10,\n      dy: -10,\n      connector: true,\n      style: { fontSize: 10 },\n    },\n  };\n  return <Tiny.Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"迷你折线图",en:"Tiny line plot"},filename:"basic-line.js",isNew:!1},{id:"line-annotation",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*KShOSrCq0X4AAAAAAAAAAAAAARQnAQ",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst data = [\n  264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226, 192,\n].map((value, index) => ({ value, index }));\nconst DemoLine = () => {\n  const config = {\n    data,\n    width: 480,\n    height: 120,\n    shapeField: 'smooth',\n    xField: 'index',\n    yField: 'value',\n    annotations: [\n      {\n        type: 'lineY',\n        data: [data.reduce((acc, cur) => acc + cur.value, 0) / data.length],\n        label: {\n          text: '平均值',\n          position: 'left',\n          style: { textBaseline: 'bottom' },\n        },\n        style: { stroke: 'rgba(0, 0, 0)' },\n      },\n      {\n        type: 'lineY',\n        data: [800],\n        label: {\n          text: '目标值',\n          position: 'left',\n          style: { textBaseline: 'bottom' },\n        },\n        style: { stroke: 'rgba(0, 0, 0)' },\n      },\n    ],\n  };\n  return <Tiny.Line {...config} />;\n};\n\nReactDOM.render(<DemoLine />, document.getElementById('container'));\n",title:{zh:"带辅助线的迷你折线图",en:"Tiny line plot with annotation"},filename:"line-annotation.js",isNew:!1},{id:"basic-progress",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZJ6JSL4WFt8AAAAAAAAAAAAADmJ7AQ",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoProgress = () => {\n  const progress = 0.7;\n\n  const config = {\n    width: 480,\n    height: 60,\n    autoFit: false,\n    percent: progress,\n    color: ['#0f0f0f', '#85f231'],\n    annotations: [\n      {\n        type: 'text',\n        style: {\n          text: `${progress * 100}%`,\n          x: '50%',\n          y: '50%',\n          textAlign: 'center',\n          fontSize: 16,\n          fontStyle: 'bold',\n        },\n      },\n    ],\n  };\n\n  return <Tiny.Progress {...config} />;\n};\n\nReactDOM.render(<DemoProgress />, document.getElementById('container'));\n",title:{zh:"迷你进度图",en:"Tiny progress plot"},filename:"basic-progress.js",isNew:!1},{id:"ring",screenshot:"https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*NaLRSIdTx_YAAAAAAAAAAAAAARQnAQ",source:"import { Tiny } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoRing = () => {\n  const percent = 0.7;\n  const config = {\n    percent,\n    width: 120,\n    height: 120,\n    color: ['#E8EFF5', '#66AFF4'],\n    annotations: [\n      {\n        type: 'text',\n        style: {\n          text: `${percent * 100}%`,\n          x: '50%',\n          y: '50%',\n          textAlign: 'center',\n          fontSize: 16,\n          fontStyle: 'bold',\n        },\n      },\n    ],\n  };\n\n  return <Tiny.Ring {...config} />;\n};\n\nReactDOM.render(<DemoRing />, document.getElementById('container'));\n",title:{zh:"迷你进度环图",en:"Basic tiny ring progress"},filename:"ring.js",isNew:!1}],icon:"",id:"tiny",title:{en:"Tiny",zh:"迷你图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### percent  \n \n<description>**required** _number_</description> \n \n进度 \n \n \n### color  \n \n<description>**required** _string[]_</description> \n \n配色 \n \n### radius  \n \n<description>**required** _number_ **default** _0.8_</description> \n \n内径[0~1] \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### percent  \n \n<description>**required** _number_</description> \n \n进度 \n \n \n### color  \n \n<description>**required** _string[]_</description> \n \n配色 \n \n### radius  \n \n<description>**required** _number_ **default** _0.8_</description> \n \n内径[0~1] \n \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*NDHsSaeEmxYAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const data = [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ];\n\n  const config = {\n    data: {\n      value: data,\n    },\n    xField: 'x',\n    yField: 'y',\n    style: {\n      stroke: '#545454',\n      fill: '#1890FF',\n      fillOpacity: 0.3,\n    },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"基础箱线图",en:"Basic box plot"},filename:"basic.js",isNew:!1},{id:"box",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*A746SrYUxbsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const data = [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ];\n\n  const config = {\n    data: {\n      value: data,\n    },\n    xField: 'x',\n    yField: 'y',\n    colorField: 'x',\n    // 默认 boxType 为 box, box 预处理, boxplot 非预处理\n    boxType: 'box',\n    legend: false,\n    style: {\n      stroke: 'black',\n    },\n    scale: {\n      x: { paddingInner: 0.6, paddingOuter: 0.3 },\n      y: { zero: true },\n    },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"预处理箱线图",en:"Boxplot"},filename:"box.js",isNew:!1},{id:"grouped-box",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*90B8R433zSAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const data = [\n    {\n      Species: 'I. setosa',\n      type: 'SepalLength',\n      value: 5.1,\n      bin: [4.3, 4.8, 5, 5.2, 5.8],\n    },\n    {\n      Species: 'I. setosa',\n      type: 'SepalWidth',\n      value: 3.5,\n      bin: [2.3, 3.2, 3.4, 3.7, 4.4],\n    },\n    {\n      Species: 'I. setosa',\n      type: 'PetalLength',\n      value: 1.4,\n      bin: [1, 1.4, 1.5, 1.6, 1.9],\n    },\n    {\n      Species: 'I. setosa',\n      type: 'PetalWidth',\n      value: 0.2,\n      bin: [0.1, 0.2, 0.2, 0.3, 0.6],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'SepalLength',\n      value: 7,\n      bin: [4.9, 5.6, 5.9, 6.3, 7],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'SepalWidth',\n      value: 3.2,\n      bin: [2, 2.5, 2.8, 3, 3.4],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'PetalLength',\n      value: 4.7,\n      bin: [3, 4, 4.35, 4.6, 5.1],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'PetalWidth',\n      value: 1.4,\n      bin: [1, 1.2, 1.3, 1.5, 1.8],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'SepalLength',\n      value: 6.3,\n      bin: [4.9, 6.2, 6.5, 6.9, 7.9],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'SepalWidth',\n      value: 3.3,\n      bin: [2.2, 2.8, 3, 3.2, 3.8],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'PetalLength',\n      value: 6,\n      bin: [4.5, 5.1, 5.55, 5.9, 6.9],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'PetalWidth',\n      value: 2.5,\n      bin: [1.4, 1.8, 2, 2.3, 2.5],\n    },\n  ];\n\n  const config = {\n    data: {\n      value: data,\n    },\n    xField: 'type',\n    yField: 'bin',\n    colorField: 'Species',\n    seriesField: 'Species',\n    style: {\n      stroke: 'black',\n    },\n    scale: {\n      x: { paddingInner: 0.2, paddingOuter: 0.1 },\n      y: { zero: true },\n      series: { paddingInner: 0.3, paddingOuter: 0.1 },\n    },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"预处理分组箱线图",en:"Grouped Boxplot"},filename:"grouped-box.js",isNew:!1},{id:"boxplot-no-outlier",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xoCiQYXmOewAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    },\n    boxType: 'boxplot',\n    xField: 'Expt',\n    yField: 'Speed',\n    style: {\n      point: false,\n    },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"无异常点箱线图",en:"Boxplot no outlier"},filename:"boxplot-no-outlier.js",isNew:!1},{id:"boxplot-outlier",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*yeZuSY9YIEAAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    },\n    boxType: 'boxplot',\n    xField: 'Expt',\n    yField: 'Speed',\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"带异常点箱线图",en:"Boxplot with Outlier"},filename:"boxplot-outlier.js",isNew:!1},{id:"grouped-boxplot-outlier",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*w565TbseqlMAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    },\n    boxType: 'boxplot',\n    xField: 'species',\n    yField: 'flipper_length_mm',\n    colorField: 'sex',\n    seriesField: 'sex',\n    coordinate: { transform: [{ type: 'transpose' }] },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"带异常点分组箱线图",en:"grouped Boxplot with Outlier"},filename:"grouped-boxplot-outlier.js",isNew:!1},{id:"boxplot-one-dimension",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZOhpRaAAFpkAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const config = {\n    height: 120,\n    autoFit: false,\n    inset: 6,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/morley.json',\n      transform: [{ type: 'filter', callback: (d) => d.Expt === 1 }],\n    },\n    boxType: 'boxplot',\n    yField: 'Speed',\n    coordinate: { transform: [{ type: 'transpose' }] },\n    style: { boxFill: '#aaa', pointStroke: '#000' },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"一维箱线图",en:"Boxplot one dimension"},filename:"boxplot-one-dimension.js",isNew:!1},{id:"polar-box",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*G2DrSK5xIzsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const data = [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ];\n\n  const config = {\n    data: {\n      value: data,\n    },\n    xField: 'x',\n    yField: 'y',\n    colorField: 'x',\n    scale: { x: { paddingInner: 0.6, paddingOuter: 0.3 }, y: { zero: true } },\n    coordinate: { type: 'polar', innerRadius: 0.2 },\n    style: { stroke: 'black' },\n    axis: { y: { tickCount: 5 } },\n    legend: false,\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"径向箱线图",en:"Polar Boxplot"},filename:"polar-box.js",isNew:!1},{id:"box-tooltip",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*LeZrRoOmJxsAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const data = [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ];\n\n  const config = {\n    data: {\n      value: data,\n    },\n    xField: 'x',\n    yField: 'y',\n    scale: { x: { paddingInner: 0.6, paddingOuter: 0.3 }, y: { zero: true } },\n    tooltip: {\n      items: [\n        { name: '最低值', channel: 'y' },\n        { name: '下四分位数', channel: 'y1' },\n        { name: '最低值', channel: 'y2' },\n        { name: '上四分位数', channel: 'y3' },\n        { name: '最高值', channel: 'y4' },\n      ],\n    },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"预处理箱线图 tooltip 配置",en:"Box tooltip"},filename:"box-tooltip.js",isNew:!1},{id:"boxplot-tooltip",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*KQ0ZTIRDDg0AAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box } from '@ant-design/plots';\n\nconst DemoBox = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    },\n    boxType: 'boxplot',\n    xField: 'Expt',\n    yField: 'Speed',\n    tooltip: {\n      boxTitle: { channel: 'y3' },\n      boxItems: [\n        { name: '最低值', channel: 'y' },\n        { name: '下四分位数', channel: 'y1' },\n        { name: '最低值', channel: 'y2' },\n        { name: '上四分位数', channel: 'y3' },\n        { name: '最高值', channel: 'y4' },\n      ],\n      pointTitle: { channel: 'x' },\n      pointItems: [{ channel: 'y', color: 'red', name: '异常点' }],\n    },\n    style: {\n      pointFill: 'red',\n      pointStroke: 'red',\n    },\n  };\n  return <Box {...config} />;\n};\n\nReactDOM.render(<DemoBox />, document.getElementById('container'));\n",title:{zh:"箱线图 tooltip 配置",en:"Boxplot tooltip"},filename:"boxplot-tooltip.js",isNew:!1}],icon:"",id:"box",title:{en:"Box",zh:"箱线图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### boxType \n \n<description>**optional** *boxplot | box* **default** *box*</description> \n \n \nBox` 图形是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：`最小值`、`下四分位数`、`中位数`、`上四分位数`、`最大值`，另外可以结合 `point` mark 绘制异常点数据。 \n \n<img alt=\"box\" width=\"100%\" style=\"max-width: 400px\" src=\"https://gw.alipayobjects.com/zos/antfincdn/f6WEf%24CrgE/20220913111713.jpg\" /> \n \nBox 特殊的一点在于 `y` 通道对应的数据是一组统计数据的数组，最后会将数据映射为箱线图所需求的 14 个点集合。 \n \n```text \n/** \n * \n * p0           p2          p1 \n *    ──────────┬────────── \n *              │ \n *              │ \n *              │ \n *              │ p3 \n * p4 ┌─────────┴──────────┐ p5 \n *    │                    │ \n *    │                    │ \n * p8 ├────────────────────┤ p9 \n *    │                    │ \n *    │        p10         │ \n * p7 └─────────┬──────────┘ p6 \n *              │ \n *              │ \n *              │ \n *   ───────────┴─────────── \n * p12         p11           p13 \n */ \n``` \n \n更多的案例，可以查看[图表示例](/examples)页面。 \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### boxType \n \n<description>**optional** *boxplot | box* **default** *box*</description> \n \n \nBox` 图形是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：`最小值`、`下四分位数`、`中位数`、`上四分位数`、`最大值`，另外可以结合 `point` mark 绘制异常点数据。 \n \n<img alt=\"box\" width=\"100%\" style=\"max-width: 400px\" src=\"https://gw.alipayobjects.com/zos/antfincdn/f6WEf%24CrgE/20220913111713.jpg\" /> \n \nBox 特殊的一点在于 `y` 通道对应的数据是一组统计数据的数组，最后会将数据映射为箱线图所需求的 14 个点集合。 \n \n```text \n/** \n * \n * p0           p2          p1 \n *    ──────────┬────────── \n *              │ \n *              │ \n *              │ \n *              │ p3 \n * p4 ┌─────────┴──────────┐ p5 \n *    │                    │ \n *    │                    │ \n * p8 ├────────────────────┤ p9 \n *    │                    │ \n *    │        p10         │ \n * p7 └─────────┬──────────┘ p6 \n *              │ \n *              │ \n *              │ \n *   ───────────┴─────────── \n * p12         p11           p13 \n */ \n``` \n \n更多的案例，可以查看[图表示例](/examples)页面。 \n \n \n"},childrenKey:"demos",order:3},{demos:[{id:"bullet",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*R4hCRJwwMhgAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bullet } from '@ant-design/plots';\n\nconst DemoBullet = () => {\n  const config = {\n    // default xField: 'title'、rangeField: 'ranges'、measureField: 'measures'、targetField: 'targets'\n    data: [\n      {\n        title: '满意度',\n        ranges: 100,\n        measures: 80,\n        targets: 85,\n      },\n    ],\n  };\n  return <Bullet {...config} />;\n};\n\nReactDOM.render(<DemoBullet />, document.getElementById('container'));\n",title:{zh:"子弹图",en:"Bullet"},filename:"bullet.js",isNew:!1},{id:"bullets",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*2VHuTLQBDJgAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bullet } from '@ant-design/plots';\n\nconst DemoBullet = () => {\n  const color = {\n    section: ['#bfeec8', '#FFe0b0', '#FFbcb8'],\n    score: ['#61DDAA', '#5B8FF9'],\n    target: '#39a3f4',\n  };\n\n  const config = {\n    data: [\n      {\n        satisfaction: '满意度',\n        // 自动降序\n        section: [40, 70, 100],\n        score: [30, 50],\n        target: [85],\n      },\n    ],\n    color,\n    xField: 'satisfaction',\n    rangeField: 'section',\n    measureField: 'score',\n    targetField: 'target',\n    mapField: {\n      section: ['优', '良', '差'],\n      score: ['前段', '后段'],\n      target: ['目标'],\n    },\n  };\n  return <Bullet {...config} />;\n};\n\nReactDOM.render(<DemoBullet />, document.getElementById('container'));\n",title:{zh:"多指标子弹图",en:"Bullets"},filename:"bullets.js",isNew:!1},{id:"bullet-vertical",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*8IYYQorPr_4AAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bullet } from '@ant-design/plots';\n\nconst DemoBullet = () => {\n  const config = {\n    data: [\n      {\n        title: '满意度',\n        ranges: 100,\n        measures: 80,\n        targets: 85,\n      },\n    ],\n    layout: 'vertical',\n  };\n  return <Bullet {...config} />;\n};\n\nReactDOM.render(<DemoBullet />, document.getElementById('container'));\n",title:{zh:"子弹图 垂直方向",en:"Bullet vertical"},filename:"bullet-vertical.js",isNew:!1},{id:"bullet-group",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*kAwGRZaRy3wAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bullet } from '@ant-design/plots';\n\nconst DemoBullet = () => {\n  const data = [\n    {\n      title: '5🌟',\n      ranges: 100,\n      measures: 40,\n      targets: 85,\n    },\n    {\n      title: '4🌟',\n      ranges: 100,\n      measures: 80,\n      targets: 40,\n    },\n    {\n      title: '3🌟',\n      ranges: 100,\n      measures: 20,\n      targets: 22,\n    },\n    {\n      title: '0-2🌟',\n      ranges: 100,\n      measures: 30,\n      targets: 10,\n    },\n  ];\n\n  const color = {\n    targets: 'red',\n  };\n\n  const config = {\n    data,\n    color,\n  };\n  return <Bullet {...config} />;\n};\n\nReactDOM.render(<DemoBullet />, document.getElementById('container'));\n",title:{zh:"分组子弹图",en:"Bullet group"},filename:"bullet-group.js",isNew:!1},{id:"bullets-group",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*u_YoTKv82soAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bullet } from '@ant-design/plots';\n\nconst DemoBullet = () => {\n  const data = [\n    {\n      title: '5🌟',\n      ranges: [100, 80],\n      measures: [50, 40],\n      targets: [85],\n    },\n    {\n      title: '4🌟',\n      ranges: [100, 10],\n      measures: [12, 40],\n      targets: [40, 70],\n    },\n    {\n      title: '3🌟',\n      ranges: [100],\n      measures: [20],\n      targets: [22],\n    },\n    {\n      title: '0-2🌟',\n      ranges: [100],\n      measures: [30],\n      targets: [10],\n    },\n  ];\n\n  const color = {\n    ranges: ['#FFbcb8', '#FFe0b0', '#bfeec8'],\n    measures: ['#5B8FF9', '#61DDAA'],\n    targets: ['#f0f'],\n  };\n\n  const config = {\n    data,\n    color,\n  };\n\n  return <Bullet {...config} />;\n};\n\nReactDOM.render(<DemoBullet />, document.getElementById('container'));\n",title:{zh:"分组多指标子弹图",en:"Bullets group"},filename:"bullets-group.js",isNew:!1},{id:"bullet-more-cfg",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*RI6-TYu5QaMAAAAAAAAAAAAADo2bAQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Bullet } from '@ant-design/plots';\n\nconst DemoBullet = () => {\n  const config = {\n    data: [\n      {\n        title: '满意度',\n        ranges: 100,\n        measures: 80,\n        targets: 85,\n      },\n    ],\n    range: {\n      style: {\n        maxWidth: 50,\n      },\n    },\n    measure: {\n      style: {\n        lineWidth: 1,\n        stroke: '#fff',\n      },\n    },\n    target: {\n      sizeField: 40,\n    },\n  };\n  return <Bullet {...config} />;\n};\n\nReactDOM.render(<DemoBullet />, document.getElementById('container'));\n",title:{zh:"子弹图 更多配置",en:"Bullet more Config"},filename:"bullet-more-cfg.js",isNew:!1}],icon:"",id:"bullet",title:{en:"Bullet",zh:"子弹图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n##  特有 \n \n### measureField  \n \n<description>**required** _string_</description> \n \n使用数据条的长度，实际数值的设置字段，表示实际数值。 \n \n### rangeField  \n \n<description>**required** _string_</description> \n \n使用背景色条的长度的设置字段，表示区间范围。 \n \n### targetField  \n \n<description>**required** _string_</description> \n \n使用测量标记的刻度轴位置的设置字段，表示目标值。 \n \n### layout \n \n<description>**optional** _'horizontal' | 'vertical'_ _default:_ 'horizontal'</description> \n \n表示子弹图方向。 \n \n \n### color  \n \n<description>**optional** _object_</description> \n \n设置子弹图各图形 color 属性。 \n \n| 细分配置 | 类型        | 功能描述     | 默认配置 | \n| -------- | ----------- | ------------ | -------- | \n| ranges    | _string\\|string[]_ | 区间背景颜色 | 无       | \n| measures  | _string\\|string[]_ | 实际值颜色   | 无       | \n| target   | _string\\|string[]_ | 目标值颜色   | 无       | \n \n \n### range  \n \n<description>**required** _BulletOptions_</description> \n \nrange 配置 \n \n### measure  \n \n<description>**required** _BulletOptions_</description> \n \nmeasure 配置 \n \n \n### target  \n \n<description>**required** _BulletOptions_</description> \n \ntarget 配置 \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n \n##  特有 \n \n### measureField  \n \n<description>**required** _string_</description> \n \n使用数据条的长度，实际数值的设置字段，表示实际数值。 \n \n### rangeField  \n \n<description>**required** _string_</description> \n \n使用背景色条的长度的设置字段，表示区间范围。 \n \n### targetField  \n \n<description>**required** _string_</description> \n \n使用测量标记的刻度轴位置的设置字段，表示目标值。 \n \n### layout \n \n<description>**optional** _'horizontal' | 'vertical'_ _default:_ 'horizontal'</description> \n \n表示子弹图方向。 \n \n \n### color  \n \n<description>**optional** _object_</description> \n \n设置子弹图各图形 color 属性。 \n \n| 细分配置 | 类型        | 功能描述     | 默认配置 | \n| -------- | ----------- | ------------ | -------- | \n| ranges    | _string\\|string[]_ | 区间背景颜色 | 无       | \n| measures  | _string\\|string[]_ | 实际值颜色   | 无       | \n| target   | _string\\|string[]_ | 目标值颜色   | 无       | \n \n \n### range  \n \n<description>**required** _BulletOptions_</description> \n \nrange 配置 \n \n### measure  \n \n<description>**required** _BulletOptions_</description> \n \nmeasure 配置 \n \n \n### target  \n \n<description>**required** _BulletOptions_</description> \n \ntarget 配置 \n \n \n"},childrenKey:"demos",order:3},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*I7XlS4ps7IcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Venn } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoVenn = () => {\n  const config = {\n    data: [\n      { sets: ['A'], size: 12, label: 'A' },\n      { sets: ['B'], size: 12, label: 'B' },\n      { sets: ['C'], size: 12, label: 'C' },\n      { sets: ['A', 'B'], size: 2, label: 'A&B' },\n      { sets: ['A', 'C'], size: 2, label: 'A&C' },\n      { sets: ['B', 'C'], size: 2, label: 'B&C' },\n      { sets: ['A', 'B', 'C'], size: 1 },\n    ],\n    setsField: 'sets',\n    sizeField: 'size',\n    style: { fillOpacity: 0.85 },\n    label: {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n    tooltip: {\n      title: false,\n      items: [\n        (d) => {\n          return { name: d.key, value: d.size };\n        },\n      ],\n    },\n  };\n  return <Venn {...config} />;\n};\n\nReactDOM.render(<DemoVenn />, document.getElementById('container'));\n",title:{zh:"基础韦恩图",en:"Basic venn plot"},filename:"basic.js",isNew:!1},{id:"custom-color",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*STtHQ6brAMAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Venn } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoVenn = () => {\n  const config = {\n    data: [\n      { sets: ['A'], size: 12, label: 'A' },\n      { sets: ['B'], size: 12, label: 'B' },\n      { sets: ['C'], size: 12, label: 'C' },\n      { sets: ['A', 'B'], size: 2, label: 'A&B' },\n      { sets: ['A', 'C'], size: 2, label: 'A&C' },\n      { sets: ['B', 'C'], size: 2, label: 'B&C' },\n      { sets: ['A', 'B', 'C'], size: 1 },\n    ],\n    setsField: 'sets',\n    sizeField: 'size',\n    label: {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n    tooltip: {\n      title: false,\n      items: [\n        (d) => {\n          return { name: d.key, value: d.size };\n        },\n      ],\n    },\n    style: {\n      fillOpacity: 0.85,\n      fill: (datum, index, data) => {\n        console.log(data);\n        const { size } = datum;\n        if (size <= 2) return '#f4bb51';\n      },\n    },\n  };\n  return <Venn {...config} />;\n};\n\nReactDOM.render(<DemoVenn />, document.getElementById('container'));\n",title:{zh:"自定义颜色",en:"Custom color"},filename:"custom-color.js",isNew:!1},{id:"label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*h7FaRLXj2kgAAAAAAAAAAAAADmJ7AQ/original",source:"import { Venn } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoVenn = () => {\n  const config = {\n    data: [\n      { sets: ['A'], size: 12, label: 'A' },\n      { sets: ['B'], size: 12, label: 'B' },\n      { sets: ['C'], size: 12, label: 'C' },\n      { sets: ['A', 'B'], size: 2, label: 'A&B' },\n      { sets: ['A', 'C'], size: 2, label: 'A&C' },\n      { sets: ['B', 'C'], size: 2, label: 'B&C' },\n      { sets: ['A', 'B', 'C'], size: 1 },\n    ],\n    setsField: 'sets',\n    sizeField: 'size',\n    style: { fillOpacity: 0.85 },\n    label: {\n      position: 'inside',\n      text: (d) => d.label || '',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  };\n  return <Venn {...config} />;\n};\n\nReactDOM.render(<DemoVenn />, document.getElementById('container'));\n",title:{zh:"设置label",en:"Label setting"},filename:"label.js",isNew:!1},{id:"custom",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*7qg4S4iOrnkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Venn } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoVenn = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/c4c17fe9-0a93-4255-bc1e-1ff84966d24a.json',\n      transform: [\n        {\n          type: 'venn',\n          sets: 'sets',\n          size: 'size',\n          as: ['key', 'path'],\n        },\n      ],\n    },\n    setsField: 'sets',\n    sizeField: 'size',\n    style: { fillOpacity: 0.85 },\n    scale: {\n      color: {\n        range: ['#9DF5CA', '#61DDAA', '#42C090'],\n      },\n    },\n    label: {\n      position: 'inside',\n      style: {\n        lineHeight: 20,\n      },\n      text: (datum) => {\n        return `${datum.size}`;\n      },\n    },\n    interaction: {\n      tooltip: {\n        // render 回调方法返回一个innerHTML 或者 DOM\n        render: (event, { title, items }) => {\n          return `<div>\n          <h3 style=\"padding:0;margin:0\">title:${title}</h3>\n          <ul>${items.map((d) => `<li><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</li>`)}</ul>\n          </div>`;\n        },\n      },\n    },\n  };\n  return <Venn {...config} />;\n};\n\nReactDOM.render(<DemoVenn />, document.getElementById('container'));\n",title:{zh:"自定义韦恩图",en:"Customize venn plot"},filename:"custom.js",isNew:!1},{id:"interaction",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Y5IuSo4u7PEAAAAAAAAAAAAADmJ7AQ/original",source:"import { Venn } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoVenn = () => {\n  const config = {\n    data: [\n      { sets: ['A'], size: 12, label: 'A' },\n      { sets: ['B'], size: 12, label: 'B' },\n      { sets: ['C'], size: 12, label: 'C' },\n      { sets: ['A', 'B'], size: 2, label: 'A&B' },\n      { sets: ['A', 'C'], size: 2, label: 'A&C' },\n      { sets: ['B', 'C'], size: 2, label: 'B&C' },\n      { sets: ['A', 'B', 'C'], size: 1 },\n    ],\n    setsField: 'sets',\n    sizeField: 'size',\n    style: { fillOpacity: 0.85 },\n    label: {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n    tooltip: {\n      title: false,\n      items: [\n        (d) => {\n          return { name: d.key, value: d.size };\n        },\n      ],\n    },\n    state: {\n      active: {\n        fillOpacity: 0.8,\n        stroke: 'red',\n        lineWidth: 1,\n      },\n      inactive: {\n        fillOpacity: 0.2,\n        lineWidth: 0,\n      },\n    },\n    interaction: {\n      elementHighlight: true,\n    },\n  };\n  return <Venn {...config} />;\n};\n\nReactDOM.render(<DemoVenn />, document.getElementById('container'));\n",title:{zh:"韦恩图-元素交互",en:"venn plot - with element action"},filename:"interaction.js",isNew:!1}],icon:"",id:"venn",title:{en:"Venn",zh:"韦恩图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:3},{demos:[{id:"treemap",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*T2zHS6J1cGMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Treemap } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoTreemap = () => {\n  const data = {\n    name: 'root',\n    children: [\n      { name: '分类 1', value: 560 },\n      { name: '分类 2', value: 500 },\n      { name: '分类 3', value: 150 },\n      { name: '分类 4', value: 140 },\n      { name: '分类 5', value: 115 },\n      { name: '分类 6', value: 95 },\n      { name: '分类 7', value: 90 },\n      { name: '分类 8', value: 75 },\n      { name: '分类 9', value: 98 },\n      { name: '分类 10', value: 60 },\n      { name: '分类 11', value: 45 },\n      { name: '分类 12', value: 40 },\n      { name: '分类 13', value: 40 },\n      { name: '分类 14', value: 35 },\n      { name: '分类 15', value: 40 },\n      { name: '分类 16', value: 40 },\n      { name: '分类 17', value: 40 },\n      { name: '分类 18', value: 30 },\n      { name: '分类 19', value: 28 },\n      { name: '分类 20', value: 16 },\n    ],\n  };\n  const config = {\n    data,\n    colorField: 'value',\n    valueField: 'value',\n    scale: {\n      color: {\n        range: [\n          '#4e79a7',\n          '#f28e2c',\n          '#e15759',\n          '#76b7b2',\n          '#59a14f',\n          '#edc949',\n          '#af7aa1',\n          '#ff9da7',\n          '#9c755f',\n          '#bab0ab',\n        ],\n      },\n    },\n    legend: false,\n  };\n  return <Treemap {...config} />;\n};\n\nReactDOM.render(<DemoTreemap />, document.getElementById('container'));\n",title:{zh:"矩阵树图",en:"Treemap Chart"},filename:"treemap.js",isNew:!1}],icon:"",id:"treemap",title:{en:"Treemap",zh:"矩阵树图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:12},{demos:[{id:"circlePacking",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZMEHT7WqQmIAAAAAAAAAAAAADmJ7AQ/original",source:"import { CirclePacking } from '@ant-design/plots';\nimport { interpolateHcl } from 'd3-interpolate';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst DemoCirclePacking = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/flare.json',\n    },\n    valueField: 'value',\n    colorField: 'depth',\n    scale: {\n      color: {\n        domain: [0, 5],\n        range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n        interpolate: interpolateHcl,\n      },\n    },\n  };\n  return <CirclePacking {...config} />;\n};\n\nReactDOM.render(<DemoCirclePacking />, document.getElementById('container'));\n",title:{zh:"基础捆绑图",en:"CirclePacking Chart"},filename:"circlePacking.js",isNew:!1},{id:"circlePackingLabel",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*epG0TaxEVTsAAAAAAAAAAAAADmJ7AQ/original",source:"import { CirclePacking } from '@ant-design/plots';\nimport { interpolateHcl } from 'd3-interpolate';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst DemoCirclePackingLabel = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/flare.json',\n    },\n    valueField: 'value',\n    colorField: 'depth',\n    scale: {\n      color: {\n        domain: [0, 5],\n        range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n        interpolate: interpolateHcl,\n      },\n    },\n    label: {\n      text: (d) => (d.height === 0 ? d.data.name : ''),\n      position: 'inside',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  };\n  return <CirclePacking {...config} />;\n};\n\nReactDOM.render(<DemoCirclePackingLabel />, document.getElementById('container'));\n",title:{zh:"捆绑图 - 显示Label",en:"CirclePacking Chart With Label"},filename:"circlePackingLabel.js",isNew:!1},{id:"circlePackingPadding",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_4mJRL2Izd8AAAAAAAAAAAAADmJ7AQ/original",source:"import { CirclePacking } from '@ant-design/plots';\nimport { interpolateHcl } from 'd3-interpolate';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst DemoCirclePackingPadding = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/flare.json',\n    },\n    valueField: 'value',\n    colorField: 'depth',\n    scale: {\n      color: {\n        domain: [0, 5],\n        range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n        interpolate: interpolateHcl,\n      },\n    },\n    layout: {\n      padding: 10,\n    },\n  };\n  return <CirclePacking {...config} />;\n};\n\nReactDOM.render(<DemoCirclePackingPadding />, document.getElementById('container'));\n",title:{zh:"捆绑图 - 自定义padding距离",en:"Custom Padding Distance For CirclePacking Chart"},filename:"circlePackingPadding.js",isNew:!1}],icon:"",id:"circle-packing",title:{en:"Circle Packing",zh:"捆绑图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:13},{demos:[{id:"liquid",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*cHArRaizyBsAAAAAAAAAAAAADo2bAQ/original",source:"import { Liquid } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLiquid = () => {\n  const config = {\n    percent: 0.3,\n    style: {\n      outlineBorder: 4,\n      outlineDistance: 8,\n      waveLength: 128,\n    },\n  };\n  return <Liquid {...config} />;\n};\n\nReactDOM.render(<DemoLiquid />, document.getElementById('container'));\n",title:{zh:"水波图",en:"Liquid Chart"},filename:"liquid.js",isNew:!1},{id:"liquid-pin",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*G5TyT4PNLK0AAAAAAAAAAAAADo2bAQ/original",source:"import { Liquid } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLiquid = () => {\n  const config = {\n    percent: 0.7,\n    style: {\n      shape: 'pin',\n      textFill: '#fff',\n      outlineBorder: 4,\n      outlineDistance: 8,\n      waveLength: 128,\n    },\n  };\n  return <Liquid {...config} />;\n};\n\nReactDOM.render(<DemoLiquid />, document.getElementById('container'));\n",title:{zh:"水滴形状水波图",en:"Pin Liquid Chart"},filename:"liquid-pin.js",isNew:!1},{id:"liquid-background",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*QgkTSq1OdvoAAAAAAAAAAAAADo2bAQ/original",source:"import { Liquid } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLiquid = () => {\n  const config = {\n    percent: 0.3,\n    style: {\n      backgroundFill: 'pink',\n    },\n  };\n  return <Liquid {...config} />;\n};\n\nReactDOM.render(<DemoLiquid />, document.getElementById('container'));\n",title:{zh:"带背景的水波图",en:"Background Liquid Chart"},filename:"liquid-background.js",isNew:!1},{id:"liquid-custom-shape",screenshot:"https://mdn.alipayobjects.com/huamei_za7we3/afts/img/A*LYOpQLfrlqMAAAAAAAAAAAAADo2bAQ/original",source:"import { Liquid } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoLiquid = () => {\n  const config = {\n    percent: 0.3,\n    style: {\n      shape: (x, y, r) => {\n        const path = [];\n        const w = r * 2;\n\n        for (let i = 0; i < 5; i++) {\n          path.push([\n            i === 0 ? 'M' : 'L',\n            (Math.cos(((18 + i * 72) * Math.PI) / 180) * w) / 2 + x,\n            (-Math.sin(((18 + i * 72) * Math.PI) / 180) * w) / 2 + y,\n          ]);\n          path.push([\n            'L',\n            (Math.cos(((54 + i * 72) * Math.PI) / 180) * w) / 4 + x,\n            (-Math.sin(((54 + i * 72) * Math.PI) / 180) * w) / 4 + y,\n          ]);\n        }\n        path.push(['Z']);\n        return path;\n      },\n      outlineBorder: 4,\n      outlineDistance: 8,\n      waveLength: 128,\n    },\n  };\n  return <Liquid {...config} />;\n};\n\nReactDOM.render(<DemoLiquid />, document.getElementById('container'));\n",title:{zh:"自定义形状水波图",en:"Custom Shape Liquid Chart"},filename:"liquid-custom-shape.js",isNew:!1}],icon:"",id:"liquid",title:{en:"Liquid",zh:"水波图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:13},{demos:[{id:"rose",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_DeKSr3oN5sAAAAAAAAAAAAADmJ7AQ/original",source:"import { Rose } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoRose = () => {\n  const config = {\n    width: 720,\n    height: 720,\n    autoFit: false,\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/rose-rose.json',\n    },\n    xField: 'year',\n    yField: 'people',\n    scale: { y: { type: 'sqrt' } },\n    transform: [{ type: 'groupX', y: 'sum' }],\n    axis: {\n      y: {\n        title: 'sum of people',\n        labelFormatter: '~s',\n        tickCount: 5,\n        tickFilter: (d, i) => i !== 0,\n        direction: 'right',\n      },\n    },\n    tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n  };\n  return <Rose {...config} />;\n};\n\nReactDOM.render(<DemoRose />, document.getElementById('container'));\n",title:{zh:"玫瑰图",en:"Rose Chart"},filename:"rose.js",isNew:!1},{id:"stacked-rose",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lv1oT5JCtrMAAAAAAAAAAAAADmJ7AQ/original",source:"import { Rose } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoRose = () => {\n  const colors = ['#98abc5', '#8a89a6', '#7b6888', '#6b486b', '#a05d56', '#d0743c', '#ff8c00'];\n\n  const config = {\n    width: 800,\n    height: 800,\n    autoFit: false,\n    innerRadius: 0.4,\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/rose-stacked-rose.json',\n      transform: [\n        {\n          type: 'fold',\n          fields: [\n            'Under 5 Years',\n            '5 to 13 Years',\n            '14 to 17 Years',\n            '18 to 24 Years',\n            '25 to 44 Years',\n            '45 to 64 Years',\n            '65 Years and Over',\n          ],\n          key: 'Age',\n          value: 'Population',\n        },\n      ],\n    },\n    xField: 'State',\n    yField: 'Population',\n    colorField: 'Age',\n    stack: true,\n    scale: {\n      y: { type: 'sqrt' },\n      color: {\n        range: colors,\n      },\n    },\n    axis: {\n      x: { position: 'inner' },\n      y: {\n        labelFormatter: '~s',\n        tickFilter: (_, i) => i !== 0,\n        direction: 'center',\n      },\n    },\n    legend: { color: { position: 'center', display: 'grid', gridCol: 1 } },\n  };\n  return <Rose {...config} />;\n};\n\nReactDOM.render(<DemoRose />, document.getElementById('container'));\n",title:{zh:"堆积玫瑰图",en:"Stacked Rose Chart"},filename:"stacked-rose.js",isNew:!1},{id:"rose-label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original",source:"import { Rose } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoRose = () => {\n  const config = {\n    width: 720,\n    height: 720,\n    autoFit: false,\n    radius: 0.85,\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/rose-rose-label.json',\n    },\n    xField: 'year',\n    yField: 'people',\n    colorField: 'year',\n    transform: [{ type: 'groupX', y: 'sum' }],\n    scale: { y: { type: 'sqrt' }, x: { padding: 0 } },\n    axis: false,\n    legend: { color: { length: 400, layout: { justifyContent: 'center' } } },\n    labels: [\n      {\n        text: 'people',\n        position: 'outside',\n        formatter: '~s',\n        transform: [{ type: 'overlapDodgeY' }],\n      },\n    ],\n    tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n  };\n  return <Rose {...config} />;\n};\n\nReactDOM.render(<DemoRose />, document.getElementById('container'));\n",title:{zh:"玫瑰图标签",en:"Rose Chart, Label"},filename:"rose-label.js",isNew:!1}],icon:"",id:"rose",title:{en:"Rose",zh:"玫瑰图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:13},{demos:[{id:"sunburst-default",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*-aInRJfa4-8AAAAAAAAAAAAADmJ7AQ/original",source:"import { Sunburst } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSunburst = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/ryp44nvUYZ/coffee.json',\n    },\n    animate: {\n      enter: { type: 'waveIn' }\n    },\n    innerRadius: 0,\n  };\n  return <Sunburst {...config} />;\n};\n\nReactDOM.render(<DemoSunburst />, document.getElementById('container'));\n",title:{zh:"旭日图",en:"Sunburst Chart"},filename:"sunburst-default.js",isNew:!1},{id:"sunburst-label",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GBxdT697NYQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sunburst } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSunburst = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n    },\n    valueField: 'sum',\n    label: {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  };\n  return <Sunburst {...config} />;\n};\n\nReactDOM.render(<DemoSunburst />, document.getElementById('container'));\n",title:{zh:"旭日图带标签",en:"Sunburst Label Chart"},filename:"sunburst-label.js",isNew:!1},{id:"sunburst-color",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*7L4tQ4F61ZkAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sunburst } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSunburst = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n    },\n    valueField: 'sum',\n    colorField: 'label',\n  };\n  return <Sunburst {...config} />;\n};\n\nReactDOM.render(<DemoSunburst />, document.getElementById('container'));\n",title:{zh:"旭日图自定义颜色通道",en:"Sunburst ColorField Chart"},filename:"sunburst-color.js",isNew:!1},{id:"sunburst-style",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*BP7zQ6SMiKcAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sunburst } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSunburst = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n    },\n    valueField: 'sum',\n    style: {\n      fill: (v) => {\n        if (v['path'] === '类别 3') return 'red';\n        if (v['name'] === '类别 2.1.1') return 'red';\n      },\n    },\n  };\n  return <Sunburst {...config} />;\n};\n\nReactDOM.render(<DemoSunburst />, document.getElementById('container'));\n",title:{zh:"旭日图自定义样式",en:"Sunburst Style Chart"},filename:"sunburst-style.js",isNew:!1},{id:"sunburst-interaction",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*7C0NQK9_TfwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sunburst } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSunburst = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n    },\n    valueField: 'sum',\n    label: {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n    interaction: {\n      drillDown: {\n        breadCrumb: {\n          rootText: '起始',\n          style: {\n            fontSize: '18px',\n            fill: '#333',\n          },\n          active: {\n            fill: 'red',\n          },\n        },\n        // FixedColor default: true, true -> drillDown update scale, false -> scale keep.\n        fixedColor: false,\n      },\n    },\n    state: {\n      active: { zIndex: 2, stroke: 'red' },\n      inactive: { zIndex: 1, stroke: '#fff' },\n    },\n  };\n  return <Sunburst {...config} />;\n};\n\nReactDOM.render(<DemoSunburst />, document.getElementById('container'));\n",title:{zh:"旭日图交互配置",en:"Sunburst Interaction Config Chart"},filename:"sunburst-interaction.js",isNew:!1}],icon:"",id:"sunburst",title:{en:"Sunburst",zh:"旭日图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:13},{demos:[{id:"wordCloud",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*hC4uR6yuBa4AAAAAAAAAAAAADmJ7AQ/original",source:"import { WordCloud } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoWordCloud = () => {\n  const config = {\n    paddingTop: 40,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n    },\n    layout: { spiral: 'rectangular' },\n    colorField: 'text',\n  };\n  return <WordCloud {...config} />;\n};\n\nReactDOM.render(<DemoWordCloud />, document.getElementById('container'));\n",title:{zh:"词云图",en:"WordCloud Chart"},filename:"wordCloud.js",isNew:!1},{id:"wordCloud-image",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xgP6QJlzghYAAAAAAAAAAAAADmJ7AQ/original",source:"import { WordCloud } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoWordCloud = () => {\n  const config = {\n    width: 1000,\n    height: 400,\n    autoFit: false,\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/antv-keywords.json',\n    },\n    layout: {\n      imageMask: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LKU4TYEiB-4AAAAAAAAAAAAADmJ7AQ/original',\n      fontSize: 10,\n    },\n    colorField: 'name',\n    textField: 'name',\n    legend: false,\n  };\n  return <WordCloud {...config} />;\n};\n\nReactDOM.render(<DemoWordCloud />, document.getElementById('container'));\n",title:{zh:"带图片遮罩的词云图",en:"WordCloud with image mask"},filename:"wordCloud-image.js",isNew:!1}],icon:"",id:"wordCloud",title:{en:"WordCloud",zh:"词云图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:13},{demos:[{id:"gauge",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*hpjTRr6LM7IAAAAAAAAAAAAADmJ7AQ/original",source:"import { Gauge } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoGauge = () => {\n  const config = {\n    width: 720,\n    height: 720,\n    autoFit: true,\n    data: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n    legend: false,\n  };\n  return <Gauge {...config} />;\n};\n\nReactDOM.render(<DemoGauge />, document.getElementById('container'));\n",title:{zh:"仪表盘",en:"Gauge Chart"},filename:"gauge.js",isNew:!1},{id:"gauge-color",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*VSrGTYrM954AAAAAAAAAAAAADmJ7AQ/original",source:"import { Gauge } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoGauge = () => {\n  const config = {\n    width: 720,\n    height: 720,\n    autoFit: true,\n    data: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n    legend: false,\n    scale: {\n      color: {\n        range: ['#F4664A', '#FAAD14', 'green'],\n      },\n    },\n    style: {\n      textContent: (target, total) => `得分：${target}\\n占比：${(target / total) * 100}%`,\n    },\n  };\n  return <Gauge {...config} />;\n};\n\nReactDOM.render(<DemoGauge />, document.getElementById('container'));\n",title:{zh:"自定义仪表盘颜色",en:"Gauge Chart"},filename:"gauge-color.js",isNew:!1}],icon:"",id:"gauge",title:{en:"Gauge",zh:"仪表盘"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:14},{demos:[{id:"density",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LKFOT6UA11QAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Violin } from '@ant-design/plots';\n\nconst DemoViolin = () => {\n  const config = {\n    violinType: 'density',\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/species.json',\n    },\n    xField: 'x',\n    yField: 'y',\n    seriesField: 'species',\n  };\n  return <Violin {...config} />;\n};\n\nReactDOM.render(<DemoViolin />, document.getElementById('container'));\n",title:{zh:"和密度图",en:"Density plot"},filename:"density.js",isNew:!1},{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lU62ToCw4_AAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Violin } from '@ant-design/plots';\n\nconst DemoViolin = () => {\n  const config = {\n    violinType: 'normal',\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/species.json',\n    },\n    xField: 'x',\n    yField: 'y',\n    seriesField: 'species',\n  };\n  return <Violin {...config} />;\n};\n\nReactDOM.render(<DemoViolin />, document.getElementById('container'));\n",title:{zh:"基础小提琴图",en:"Basic violin plot"},filename:"basic.js",isNew:!1},{id:"polar",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*5-6LTohbpFsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Violin } from '@ant-design/plots';\n\nconst DemoViolin = () => {\n  const config = {\n    violinType: 'polar',\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/species.json',\n    },\n    xField: 'x',\n    yField: 'y',\n    seriesField: 'species',\n  };\n  return <Violin {...config} />;\n};\n\nReactDOM.render(<DemoViolin />, document.getElementById('container'));\n",title:{zh:"极坐标小提琴图",en:"Polar violin plot"},filename:"polar.js",isNew:!1}],icon:"",id:"violin",title:{en:"Violin",zh:"小提琴图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:15},{demos:[{id:"space-layer",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*PuiQQZJXxNsAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Base } from '@ant-design/plots';\n\nconst Demobase = () => {\n  const config = {\n    type: 'spaceLayer',\n    data: {\n      type: 'fetch',\n      value: 'https://render.alipay.com/p/yuyan/180020010001215413/antd-charts/base-space-layer.json',\n    },\n    children: [\n      {\n        type: 'interval',\n        encode: { x: 'letter', y: 'frequency', color: 'letter' },\n        transform: [{ type: 'sortX', reverse: true, by: 'y' }],\n        scale: { color: { palette: 'cool', offset: (t) => t * 0.8 + 0.1 } },\n      },\n      {\n        type: 'interval',\n        x: 300,\n        y: 50,\n        width: 300,\n        height: 300,\n        encode: { y: 'frequency', color: 'letter' },\n        transform: [{ type: 'stackY' }],\n        scale: { color: { palette: 'cool', offset: (t) => t * 0.8 + 0.1 } },\n        coordinate: { type: 'theta' },\n        legend: false,\n      },\n    ],\n  };\n  return <Base {...config} />;\n};\n\nReactDOM.render(<Demobase />, document.getElementById('container'));\n",title:{zh:"层叠容器",en:"Space Layer"},filename:"space-layer.js",isNew:!1},{id:"space-flex",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*lLecQJkdPbIAAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Base } from '@ant-design/plots';\n\nconst Demobase = () => {\n  const config = {\n    type: 'spaceFlex',\n    width: 900,\n    autoFit: false,\n    ratio: [1, 2],\n    direction: 'col',\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n    },\n    children: [\n      {\n        type: 'interval',\n        paddingBottom: 0,\n        paddingRight: 300,\n        encode: {\n          x: (d) => new Date(d.date).getUTCDate(),\n          y: 'temp_max',\n          color: 'steelblue',\n        },\n        transform: [{ type: 'groupX', y: 'max' }],\n        axis: { x: false },\n      },\n      {\n        type: 'spaceFlex',\n        paddingBottom: 60,\n        ratio: [2, 1],\n        children: [\n          {\n            type: 'cell',\n            paddingBottom: 60,\n            paddingRight: 0,\n            encode: {\n              x: (d) => new Date(d.date).getUTCDate(),\n              y: (d) => new Date(d.date).getUTCMonth(),\n              color: 'temp_max',\n            },\n            transform: [{ type: 'group', color: 'max' }],\n            scale: { color: { palette: 'gnBu' } },\n            style: { inset: 0.5 },\n            axis: { x: { title: 'Date' }, y: { title: 'Month' } },\n            legend: { color: false },\n          },\n          {\n            type: 'interval',\n            encode: {\n              x: (d) => new Date(d.date).getUTCMonth(),\n              y: 'temp_max',\n              color: 'steelblue',\n            },\n            transform: [{ type: 'groupX', y: 'max' }],\n            coordinate: { transform: [{ type: 'transpose' }] },\n            axis: { x: false },\n          },\n        ],\n      },\n    ],\n  };\n  return <Base {...config} />;\n};\n\nReactDOM.render(<Demobase />, document.getElementById('container'));\n",title:{zh:"弹性容器",en:"Space Flex"},filename:"space-flex.js",isNew:!1},{id:"facet-rect",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gfDVQ7anJCMAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Base } from '@ant-design/plots';\n\nconst Demobase = () => {\n  const config = {\n    type: 'facetRect',\n    height: 640,\n    autoFit: false,\n    paddingLeft: 60,\n    paddingBottom: 60,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        {\n          type: 'map',\n          callback: ({ culmen_depth_mm: depth, culmen_length_mm: length, ...d }) => ({\n            ...d,\n            culmen_depth_mm: depth === 'NaN' ? NaN : depth,\n            culmen_length_mm: length === 'NaN' ? NaN : length,\n          }),\n        },\n      ],\n    },\n    encode: { x: 'sex', y: 'species' },\n    children: [\n      {\n        type: 'point',\n        frame: false,\n        encode: { x: 'culmen_depth_mm', y: 'culmen_length_mm' },\n        style: { fill: '#ddd', strokeWidth: 0 },\n        facet: false,\n      },\n      {\n        type: 'point',\n        encode: { x: 'culmen_depth_mm', y: 'culmen_length_mm', color: 'island' },\n      },\n    ],\n  };\n  return <Base {...config} />;\n};\n\nReactDOM.render(<Demobase />, document.getElementById('container'));\n",title:{zh:"矩行分面",en:"Rect facet"},filename:"facet-rect.js",isNew:!1},{id:"circle",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mp6ET7Ctw3UAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Base } from '@ant-design/plots';\n\nconst Demobase = () => {\n  const config = {\n    type: 'facetCircle',\n    width: 480,\n    height: 480,\n    autoFit: false,\n    data: [\n      { month: 'Jan.', name: 'A', value: 0.6326436603187056 },\n      { month: 'Jan.', name: 'B', value: 0.9059036864077081 },\n      { month: 'Jan.', name: 'C', value: 0.22780841416561715 },\n      { month: 'Jan.', name: 'D', value: 0.1579683971505692 },\n      { month: 'Feb.', name: 'A', value: 0.33301714406421823 },\n      { month: 'Feb.', name: 'B', value: 0.03205686296291077 },\n      { month: 'Feb.', name: 'C', value: 0.38611653432027015 },\n      { month: 'Feb.', name: 'D', value: 0.7234835419120198 },\n      { month: 'Mar.', name: 'A', value: 0.904928473886162 },\n      { month: 'Mar.', name: 'B', value: 0.4484199491941676 },\n      { month: 'Mar.', name: 'C', value: 0.2824508981652456 },\n      { month: 'Mar.', name: 'D', value: 0.9685413602116679 },\n      { month: 'Apr.', name: 'A', value: 0.041723574080341 },\n      { month: 'Apr.', name: 'B', value: 0.8030787933582404 },\n      { month: 'Apr.', name: 'C', value: 0.41748710621502005 },\n      { month: 'Apr.', name: 'D', value: 0.5281546266115444 },\n      { month: 'May', name: 'A', value: 0.8729036090146685 },\n      { month: 'May', name: 'B', value: 0.28988839055401217 },\n      { month: 'May', name: 'C', value: 0.33189556082639227 },\n      { month: 'May', name: 'D', value: 0.21876873390293805 },\n      { month: 'Jun.', name: 'A', value: 0.619594448441904 },\n      { month: 'Jun.', name: 'B', value: 0.420356249903558 },\n      { month: 'Jun.', name: 'C', value: 0.8796166275555974 },\n      { month: 'Jun.', name: 'D', value: 0.6400454237168027 },\n      { month: 'Jul.', name: 'A', value: 0.6908402378581739 },\n      { month: 'Jul.', name: 'B', value: 0.12152124015288734 },\n      { month: 'Jul.', name: 'C', value: 0.6033258688205794 },\n      { month: 'Jul.', name: 'D', value: 0.5584958845688628 },\n      { month: 'Aug.', name: 'A', value: 0.391095929118485 },\n      { month: 'Aug.', name: 'B', value: 0.494137952382379 },\n      { month: 'Aug.', name: 'C', value: 0.6116254958078564 },\n      { month: 'Aug.', name: 'D', value: 0.5803641632635503 },\n      { month: 'Sept.', name: 'A', value: 0.6506347276994731 },\n      { month: 'Sept.', name: 'B', value: 0.8165757521460599 },\n      { month: 'Sept.', name: 'C', value: 0.2279107933218536 },\n      { month: 'Sept.', name: 'D', value: 0.37419172590345484 },\n      { month: 'Oct.', name: 'A', value: 0.17980507555487946 },\n      { month: 'Oct.', name: 'B', value: 0.8701220373856862 },\n      { month: 'Oct.', name: 'C', value: 0.4737963124883502 },\n      { month: 'Oct.', name: 'D', value: 0.7383798484457005 },\n      { month: 'Nov.', name: 'A', value: 0.26679319143326663 },\n      { month: 'Nov.', name: 'B', value: 0.15200589580375534 },\n      { month: 'Nov.', name: 'C', value: 0.6648648719163961 },\n      { month: 'Nov.', name: 'D', value: 0.5341976900165717 },\n      { month: 'Dec.', name: 'A', value: 0.5889497642361026 },\n      { month: 'Dec.', name: 'B', value: 0.7152071786469567 },\n      { month: 'Dec.', name: 'C', value: 0.8096766390742625 },\n      { month: 'Dec.', name: 'D', value: 0.8703522265977728 },\n    ],\n    encode: { position: 'month' },\n    children: [{ type: 'interval', encode: { x: 'name', y: 'value', color: 'name' } }],\n  };\n  return <Base {...config} />;\n};\n\nReactDOM.render(<Demobase />, document.getElementById('container'));\n",title:{zh:"圆形分面",en:"Facet Circle"},filename:"circle.js",isNew:!1},{id:"matrix-col",screenshot:"https://mdn.alipayobjects.com/mdn/huamei_qa8qxu/afts/img/A*MhTMTrLKT5UAAAAAAAAAAAAADmJ7AQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Base } from '@ant-design/plots';\n\nconst Demobase = () => {\n  const config = {\n    type: 'repeatMatrix',\n    width: 300,\n    height: 720,\n    autoFit: false,\n    paddingLeft: 60,\n    paddingBottom: 60,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/weather.json',\n      transform: [\n        {\n          type: 'map',\n          callback: ({ date, ...d }) => ({\n            ...d,\n            date: new Date(date).getMonth() + '',\n          }),\n        },\n      ],\n    },\n    encode: { y: ['temp_max', 'precipitation', 'wind'], x: 'date' },\n    children: [\n      {\n        type: 'line',\n        encode: { color: 'location' },\n        transform: [{ type: 'groupX', y: 'mean' }],\n        scale: { y: { zero: true } },\n      },\n    ],\n  };\n  return <Base {...config} />;\n};\n\nReactDOM.render(<Demobase />, document.getElementById('container'));\n",title:{zh:"列重复矩阵",en:"Repeat Matrix, Col"},filename:"matrix-col.js",isNew:!1},{id:"matrix",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*nUQ-TK4x8AgAAAAAAAAAAAAADmJ7AQ/original",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Base } from '@ant-design/plots';\n\nconst Demobase = () => {\n  const toNaN = (d) => (d === 'NaN' ? NaN : d);\n  const config = {\n    type: 'repeatMatrix',\n    width: 800,\n    height: 800,\n    autoFit: false,\n    paddingLeft: 70,\n    paddingBottom: 70,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        {\n          type: 'map',\n          callback: ({\n            culmen_depth_mm: cdepth,\n            culmen_length_mm: clength,\n            flipper_length_mm: flength,\n            body_mass_g: bmass,\n            ...d\n          }) => ({\n            ...d,\n            culmen_depth_mm: toNaN(cdepth),\n            culmen_length_mm: toNaN(clength),\n            flipper_length_mm: toNaN(flength),\n            body_mass_g: toNaN(bmass),\n          }),\n        },\n      ],\n    },\n    encode: {\n      position: ['culmen_length_mm', 'culmen_depth_mm', 'flipper_length_mm', 'body_mass_g'],\n    },\n    children: [{ type: 'point', encode: { color: 'species' } }],\n  };\n  return <Base {...config} />;\n};\n\nReactDOM.render(<Demobase />, document.getElementById('container'));\n",title:{zh:"重复矩阵",en:"Repeat Matrix"},filename:"matrix.js",isNew:!1}],icon:"",id:"base",title:{en:"Composite view",zh:"复合视图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:16},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*dACBR7ANcfEAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sankey } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSankey = () => {\n  const config = {\n    data: {\n      value: {\n        links: [\n          { source: \"Agricultural 'waste'\", target: 'Bio-conversion', value: 124.729 },\n          { source: 'Bio-conversion', target: 'Liquid', value: 0.597 },\n          { source: 'Bio-conversion', target: 'Losses', value: 26.862 },\n          { source: 'Bio-conversion', target: 'Solid', value: 280.322 },\n          { source: 'Bio-conversion', target: 'Gas', value: 81.144 },\n          { source: 'Biofuel imports', target: 'Liquid', value: 35 },\n          { source: 'Biomass imports', target: 'Solid', value: 35 },\n          { source: 'Coal imports', target: 'Coal', value: 11.606 },\n          { source: 'Coal reserves', target: 'Coal', value: 63.965 },\n          { source: 'Coal', target: 'Solid', value: 75.571 },\n          { source: 'District heating', target: 'Industry', value: 10.639 },\n          { source: 'District heating', target: 'Heating and cooling - commercial', value: 22.505 },\n          { source: 'District heating', target: 'Heating and cooling - homes', value: 46.184 },\n          { source: 'Electricity grid', target: 'Over generation / exports', value: 104.453 },\n          { source: 'Electricity grid', target: 'Heating and cooling - homes', value: 113.726 },\n          { source: 'Electricity grid', target: 'H2 conversion', value: 27.14 },\n          { source: 'Electricity grid', target: 'Industry', value: 342.165 },\n          { source: 'Electricity grid', target: 'Road transport', value: 37.797 },\n          { source: 'Electricity grid', target: 'Agriculture', value: 4.412 },\n          { source: 'Electricity grid', target: 'Heating and cooling - commercial', value: 40.858 },\n          { source: 'Electricity grid', target: 'Losses', value: 56.691 },\n          { source: 'Electricity grid', target: 'Rail transport', value: 7.863 },\n          { source: 'Electricity grid', target: 'Lighting & appliances - commercial', value: 90.008 },\n          { source: 'Electricity grid', target: 'Lighting & appliances - homes', value: 93.494 },\n          { source: 'Gas imports', target: 'Ngas', value: 40.719 },\n          { source: 'Gas reserves', target: 'Ngas', value: 82.233 },\n          { source: 'Gas', target: 'Heating and cooling - commercial', value: 0.129 },\n          { source: 'Gas', target: 'Losses', value: 1.401 },\n          { source: 'Gas', target: 'Thermal generation', value: 151.891 },\n          { source: 'Gas', target: 'Agriculture', value: 2.096 },\n          { source: 'Gas', target: 'Industry', value: 48.58 },\n          { source: 'Geothermal', target: 'Electricity grid', value: 7.013 },\n          { source: 'H2 conversion', target: 'H2', value: 20.897 },\n          { source: 'H2 conversion', target: 'Losses', value: 6.242 },\n          { source: 'H2', target: 'Road transport', value: 20.897 },\n          { source: 'Hydro', target: 'Electricity grid', value: 6.995 },\n          { source: 'Liquid', target: 'Industry', value: 121.066 },\n          { source: 'Liquid', target: 'International shipping', value: 128.69 },\n          { source: 'Liquid', target: 'Road transport', value: 135.835 },\n          { source: 'Liquid', target: 'Domestic aviation', value: 14.458 },\n          { source: 'Liquid', target: 'International aviation', value: 206.267 },\n          { source: 'Liquid', target: 'Agriculture', value: 3.64 },\n          { source: 'Liquid', target: 'National navigation', value: 33.218 },\n          { source: 'Liquid', target: 'Rail transport', value: 4.413 },\n          { source: 'Marine algae', target: 'Bio-conversion', value: 4.375 },\n          { source: 'Ngas', target: 'Gas', value: 122.952 },\n          { source: 'Nuclear', target: 'Thermal generation', value: 839.978 },\n          { source: 'Oil imports', target: 'Oil', value: 504.287 },\n          { source: 'Oil reserves', target: 'Oil', value: 107.703 },\n          { source: 'Oil', target: 'Liquid', value: 611.99 },\n          { source: 'Other waste', target: 'Solid', value: 56.587 },\n          { source: 'Other waste', target: 'Bio-conversion', value: 77.81 },\n          { source: 'Pumped heat', target: 'Heating and cooling - homes', value: 193.026 },\n          { source: 'Pumped heat', target: 'Heating and cooling - commercial', value: 70.672 },\n          { source: 'Solar PV', target: 'Electricity grid', value: 59.901 },\n          { source: 'Solar Thermal', target: 'Heating and cooling - homes', value: 19.263 },\n          { source: 'Solar', target: 'Solar Thermal', value: 19.263 },\n          { source: 'Solar', target: 'Solar PV', value: 59.901 },\n          { source: 'Solid', target: 'Agriculture', value: 0.882 },\n          { source: 'Solid', target: 'Thermal generation', value: 400.12 },\n          { source: 'Solid', target: 'Industry', value: 46.477 },\n          { source: 'Thermal generation', target: 'Electricity grid', value: 525.531 },\n          { source: 'Thermal generation', target: 'Losses', value: 787.129 },\n          { source: 'Thermal generation', target: 'District heating', value: 79.329 },\n          { source: 'Tidal', target: 'Electricity grid', value: 9.452 },\n          { source: 'UK land based bioenergy', target: 'Bio-conversion', value: 182.01 },\n          { source: 'Wave', target: 'Electricity grid', value: 19.013 },\n          { source: 'Wind', target: 'Electricity grid', value: 289.366 },\n        ],\n      },\n    },\n    scale: {\n      color: {\n        range: [\n          '#4e79a7',\n          '#f28e2c',\n          '#e15759',\n          '#76b7b2',\n          '#59a14f',\n          '#edc949',\n          '#af7aa1',\n          '#ff9da7',\n          '#9c755f',\n          '#bab0ab',\n        ],\n      },\n    },\n    layout: { nodeAlign: 'center', nodePadding: 0.03 },\n    style: {\n      labelSpacing: 3,\n      labelFontWeight: 'bold',\n      nodeStrokeWidth: 1.2,\n      linkFillOpacity: 0.4,\n    },\n    interaction: {\n      tooltip: {\n        render: (e, { title, items }) => {\n          console.log(title, items);\n          // const div = document.createElement('div');\n          // const h3 = document.createElement('h3');\n          // h3.innerHTML = title;\n          // div.appendChild(h3);\n          // div.innerHTML = `${source} → ${target}: ${value}`;\n          return <div>123</div>;\n        },\n      },\n    },\n  };\n  return <Sankey {...config} />;\n};\n\nReactDOM.render(<DemoSankey />, document.getElementById('container'));\n",title:{zh:"桑基图",en:"Sankey"},filename:"basic.js",isNew:!1},{id:"alipay",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*fecqTpstXu0AAAAAAAAAAAAADmJ7AQ/original",source:"import { Sankey } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst colors = [\n  '#5B8FF9',\n  '#61DDAA',\n  '#65789B',\n  '#F6BD16',\n  '#7262fd',\n  '#78D3F8',\n  '#9661BC',\n  '#F6903D',\n  '#008685',\n  '#F08BB4',\n];\n\nconst data = [\n  { source: '首次打开', target: '首页 UV', value: 160 },\n  { source: '结果页', target: '首页 UV', value: 40 },\n  { source: '验证页', target: '首页 UV', value: 10 },\n  { source: '我的', target: '首页 UV', value: 10 },\n  { source: '朋友', target: '首页 UV', value: 8 },\n  { source: '其他来源', target: '首页 UV', value: 27 },\n  { source: '首页 UV', target: '理财', value: 30 },\n  { source: '首页 UV', target: '扫一扫', value: 40 },\n  { source: '首页 UV', target: '服务', value: 35 },\n  { source: '首页 UV', target: '蚂蚁森林', value: 25 },\n  { source: '首页 UV', target: '跳失', value: 10 },\n  { source: '首页 UV', target: '借呗', value: 30 },\n  { source: '首页 UV', target: '花呗', value: 40 },\n  { source: '首页 UV', target: '其他流向', value: 45 },\n];\n\nconst DemoSankey = () => {\n  const config = {\n    data,\n    scale: { color: { range: colors } },\n    layout: { nodeWidth: 0.01 },\n    linkColorField: (d) => d.source.key,\n    style: {\n      labelFontSize: 13,\n      linkFillOpacity: 0.4,\n      nodeStrokeWidth: 0,\n    },\n  };\n  return <Sankey {...config} />;\n};\n\nReactDOM.render(<DemoSankey />, document.getElementById('container'));\n",title:{zh:"支付宝流量桑基图",en:"Alipay sankey"},filename:"alipay.js",isNew:!1},{id:"energy",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8o1RQJ2fqdsAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sankey } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoSankey = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/fa3414cc-75ed-47b4-8306-f2ffe8c40127.json',\n    },\n    scale: { color: { range: ['red', 'green', 'yellow'] } },\n    layout: { nodeWidth: 0.01, nodePadding: 0.01 },\n    linkColorField: (d) => d.source.key,\n    style: { linkFillOpacity: 0.4 },\n  };\n  return <Sankey {...config} />;\n};\n\nReactDOM.render(<DemoSankey />, document.getElementById('container'));\n",title:{zh:"能量关系桑基图",en:"Energy sankey"},filename:"energy.js",isNew:!1},{id:"node-sort-sankey",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Ubm3Q4E1qCAAAAAAAAAAAAAADmJ7AQ/original",source:"import { Sankey } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst colors = [\n  '#5B8FF9',\n  '#61DDAA',\n  '#65789B',\n  '#F6BD16',\n  '#7262fd',\n  '#78D3F8',\n  '#9661BC',\n  '#F6903D',\n  '#008685',\n  '#F08BB4',\n];\n\nconst data = [\n  { source: '首次打开', target: '首页 UV', value: 160 },\n  { source: '结果页', target: '首页 UV', value: 40 },\n  { source: '验证页', target: '首页 UV', value: 10 },\n  { source: '我的', target: '首页 UV', value: 10 },\n  { source: '朋友', target: '首页 UV', value: 8 },\n  { source: '其他来源', target: '首页 UV', value: 27 },\n  { source: '首页 UV', target: '理财', value: 30 },\n  { source: '首页 UV', target: '扫一扫', value: 40 },\n  { source: '首页 UV', target: '服务', value: 35 },\n  { source: '首页 UV', target: '蚂蚁森林', value: 25 },\n  { source: '首页 UV', target: '跳失', value: 10 },\n  { source: '首页 UV', target: '借呗', value: 30 },\n  { source: '首页 UV', target: '花呗', value: 40 },\n  { source: '首页 UV', target: '其他流向', value: 45 },\n];\n\nconst DemoSankey = () => {\n  const config = {\n    data,\n    scale: { color: { range: colors } },\n    layout: {\n      nodeWidth: 0.01,\n      nodeSort: (a, b) => b.value - a.value,\n    },\n    linkColorField: (d) => d.source.key,\n    style: {\n      labelFontSize: 13,\n      linkFillOpacity: 0.4,\n      nodeStrokeWidth: 0,\n    },\n  };\n  return <Sankey {...config} />;\n};\n\nReactDOM.render(<DemoSankey />, document.getElementById('container'));\n",title:{zh:"节点排序前桑基图",en:"NodeSort sankey"},filename:"node-sort-sankey.js",isNew:!1}],icon:"",id:"sankey",title:{en:"Sankey",zh:"桑基图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:20},{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*-1GkR6WftskAAAAAAAAAAAAADmJ7AQ/original",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { name: 'X6', star: 297 },\n  { name: 'G', star: 506 },\n  { name: 'AVA', star: 805 },\n  { name: 'G2Plot', star: 1478 },\n  { name: 'L7', star: 2029 },\n  { name: 'G6', star: 7100 },\n  { name: 'F2', star: 7346 },\n  { name: 'G2', star: 10178 },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'name',\n    yField: 'star',\n    // maxAngle: 90, //最大旋转角度,\n    radius: 1,\n    innerRadius: 0.2,\n    tooltip: {\n      items: ['star'],\n    },\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"玉珏图",en:"Radial-Bar plot"},filename:"basic.js",isNew:!1},{id:"round-corner",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*FmTOT68Ai_EAAAAAAAAAAAAADmJ7AQ/original",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { name: 'X6', star: 297 },\n  { name: 'G', star: 506 },\n  { name: 'AVA', star: 805 },\n  { name: 'G2Plot', star: 1478 },\n  { name: 'L7', star: 2029 },\n  { name: 'G6', star: 7100 },\n  { name: 'F2', star: 7346 },\n  { name: 'G2', star: 10178 },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'name',\n    yField: 'star',\n    maxAngle: 90,\n    radius: 1,\n    innerRadius: 0.2,\n    style: {\n      radius: 26, // 圆角\n    },\n    scale: {\n      y: { nice: true },\n    },\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"带圆角的玉珏图",en:"Radial-Bar plot with rounded corner"},filename:"round-corner.js",isNew:!1},{id:"color",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/l6uP5%26MiT7/385e3f80-52ec-49e9-9dfe-bd447e63203f.png",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { name: 'X6', star: 297 },\n  { name: 'G', star: 506 },\n  { name: 'AVA', star: 805 },\n  { name: 'G2Plot', star: 1478 },\n  { name: 'L7', star: 2029 },\n  { name: 'G6', star: 7100 },\n  { name: 'F2', star: 7346 },\n  { name: 'G2', star: 10178 },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'name',\n    yField: 'star',\n    maxAngle: 270,\n    radius: 0.8,\n    innerRadius: 0.2,\n    tooltip: {\n      items: ['star'],\n    },\n    // colorField: 'star', // 会默认给颜色\n    style: {\n      fill: ({ star }) => {\n        if (star > 10000) {\n          return '#36c361';\n        } else if (star > 1000) {\n          return '#2194ff';\n        }\n        return '#ff4d4f';\n      },\n    },\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"带自定义颜色的玉珏图",en:"Radial-Bar plot with custom color"},filename:"color.js",isNew:!1},{id:"stacked",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/tft60hEBvN/594d5cfc-8da0-441b-89dd-81eb4f5657b6.png",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  {\n    year: '1991',\n    value: 3,\n    type: 'Lon',\n  },\n  {\n    year: '1992',\n    value: 4,\n    type: 'Lon',\n  },\n  {\n    year: '1993',\n    value: 3.5,\n    type: 'Lon',\n  },\n  {\n    year: '1994',\n    value: 5,\n    type: 'Lon',\n  },\n  {\n    year: '1995',\n    value: 4.9,\n    type: 'Lon',\n  },\n  {\n    year: '1996',\n    value: 6,\n    type: 'Lon',\n  },\n  {\n    year: '1997',\n    value: 7,\n    type: 'Lon',\n  },\n  {\n    year: '1998',\n    value: 9,\n    type: 'Lon',\n  },\n  {\n    year: '1999',\n    value: 13,\n    type: 'Lon',\n  },\n  {\n    year: '1991',\n    value: 3,\n    type: 'Bor',\n  },\n  {\n    year: '1992',\n    value: 4,\n    type: 'Bor',\n  },\n  {\n    year: '1993',\n    value: 3.5,\n    type: 'Bor',\n  },\n  {\n    year: '1994',\n    value: 5,\n    type: 'Bor',\n  },\n  {\n    year: '1995',\n    value: 4.9,\n    type: 'Bor',\n  },\n  {\n    year: '1996',\n    value: 6,\n    type: 'Bor',\n  },\n  {\n    year: '1997',\n    value: 7,\n    type: 'Bor',\n  },\n  {\n    year: '1998',\n    value: 9,\n    type: 'Bor',\n  },\n  {\n    year: '1999',\n    value: 13,\n    type: 'Bor',\n  },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    stack: true,\n    maxAngle: 270,\n    colorField: 'type',\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"堆叠玉珏图",en:"Stacked Radial-Bar plot"},filename:"stacked.js",isNew:!1},{id:"grouped",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/M2EJJVBmHE/8984eee5-da51-4afb-8e81-34a8aaab47c0.png",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  {\n    year: '1991',\n    value: 3,\n    type: 'Lon',\n  },\n  {\n    year: '1992',\n    value: 4,\n    type: 'Lon',\n  },\n  {\n    year: '1993',\n    value: 3.5,\n    type: 'Lon',\n  },\n  {\n    year: '1994',\n    value: 5,\n    type: 'Lon',\n  },\n  {\n    year: '1995',\n    value: 4.9,\n    type: 'Lon',\n  },\n  {\n    year: '1996',\n    value: 6,\n    type: 'Lon',\n  },\n  {\n    year: '1997',\n    value: 7,\n    type: 'Lon',\n  },\n  {\n    year: '1998',\n    value: 9,\n    type: 'Lon',\n  },\n  {\n    year: '1999',\n    value: 13,\n    type: 'Lon',\n  },\n  {\n    year: '1991',\n    value: 3,\n    type: 'Bor',\n  },\n  {\n    year: '1992',\n    value: 4,\n    type: 'Bor',\n  },\n  {\n    year: '1993',\n    value: 3.5,\n    type: 'Bor',\n  },\n  {\n    year: '1994',\n    value: 5,\n    type: 'Bor',\n  },\n  {\n    year: '1995',\n    value: 4.9,\n    type: 'Bor',\n  },\n  {\n    year: '1996',\n    value: 6,\n    type: 'Bor',\n  },\n  {\n    year: '1997',\n    value: 7,\n    type: 'Bor',\n  },\n  {\n    year: '1998',\n    value: 9,\n    type: 'Bor',\n  },\n  {\n    year: '1999',\n    value: 13,\n    type: 'Bor',\n  },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'year',\n    yField: 'value',\n    group: true,\n    maxAngle: 270,\n    colorField: 'type',\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"分组玉珏图",en:"Grouped Radial-Bar plot"},filename:"grouped.js",isNew:!1},{id:"background",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/A2Ik7iu%26YW/519113a4-f42e-48b2-a75d-1021add83c30.png",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { name: 'X6', star: 297 },\n  { name: 'G', star: 506 },\n  { name: 'AVA', star: 805 },\n  { name: 'G2Plot', star: 1478 },\n  { name: 'L7', star: 2029 },\n  { name: 'G6', star: 7100 },\n  { name: 'F2', star: 7346 },\n  { name: 'G2', star: 10178 },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'name',\n    yField: 'star',\n    maxAngle: 350,\n    radius: 1,\n    innerRadius: 0.2,\n    tooltip: {\n      items: ['star'],\n    },\n    legend: false,\n    axis: {\n      y: false,\n    },\n    markBackground: {\n      opacity: 0.25,\n    },\n    scale: {\n      y: {\n        domain: [0, 12000], // 设定范围用于背景图的渲染获取最大值\n      },\n    },\n    style: {\n      radius: 180,\n      fill: ({ star }) => {\n        if (star > 10000) {\n          return '#6349ec';\n        } else if (star > 1000) {\n          return '#ff9300';\n        }\n        return '#ff93a7';\n      },\n    },\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"带柱子背景的玉珏图",en:"Radial-Bar plot with background"},filename:"background.js",isNew:!1},{id:"line",screenshot:"https://gw.alipayobjects.com/mdn/rms_f5c722/afts/img/A*GC6wT4GQ-oMAAAAAAAAAAABkARQnAQ",source:"import { RadialBar } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = [\n  { term: 'Zombieland', count: 9 },\n  { term: 'Wieners', count: 8 },\n  { term: 'Toy Story', count: 8 },\n  { term: 'trashkannon', count: 7 },\n  { term: 'the GROWLERS', count: 6 },\n  { term: 'mudweiser', count: 6 },\n  { term: 'ThunderCats', count: 4 },\n  { term: 'The Taqwacores - Motion Picture', count: 4 },\n  { term: 'The Shawshank Redemption', count: 2 },\n  { term: 'The Olivia Experiment', count: 1 },\n];\n\nconst DemoRadialBar = () => {\n  const config = {\n    data,\n    xField: 'term',\n    yField: 'count',\n    startAngle: Math.PI * 0.5,\n    maxAngle: 270, //最大旋转角度,\n    radius: 1,\n    innerRadius: 0.2,\n    legend: false,\n    axis: { y: false },\n    tooltip: {\n      items: ['count'],\n    },\n    sizeField: 10,\n  };\n  return <RadialBar {...config} />;\n};\n\nReactDOM.render(<DemoRadialBar />, document.getElementById('container'));\n",title:{zh:"线形玉珏图",en:"Radial-line plot"},filename:"line.js",isNew:!1}],icon:"",id:"radial-bar",title:{en:"RadialBar",zh:"玉珏图"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:21},{demos:[{id:"interval-point",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ypE2SbuV6kwAAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoAnnotationShape = () => {\n  const data = [\n    { x: 'Jan', tick: 9.3, value: 11.5 },\n    { x: 'Feb', tick: 10.5, value: 12 },\n    { x: 'Mar', tick: 11.2, value: 11.7 },\n    { x: 'Apr', tick: 11.2, value: 12.4 },\n    { x: 'May', tick: 12.7, value: 13.5 },\n    { x: 'Jun', tick: 13.1, value: 11.9 },\n    { x: 'Jul', tick: 12.2, value: 14.6 },\n    { x: 'Aug', tick: 12.2, value: 17.2 },\n    { x: 'Sep', tick: 10.1, value: 16.9 },\n    { x: 'Oct', tick: 14.5, value: 15.4 },\n    { x: 'Nov', tick: 14.5, value: 16.9 },\n    { x: 'Dec', tick: 15.5, value: 17.2 },\n  ];\n\n  const config = {\n    data,\n    xField: 'x',\n    yField: 'value',\n    paddingRight: 30,\n    sizeField: 20,\n    coordinate: { transform: [{ type: 'transpose' }] },\n    axis: { x: { title: false } },\n    labels: [\n      {\n        text: 'value',\n        position: 'right',\n        formatter: (v) => `${v}min`,\n        dx: 4,\n        textAlign: 'start',\n      },\n    ],\n    style: { fillOpacity: 0.65, lineWidth: 1 },\n    annotations: [\n      {\n        type: 'point',\n        xField: 'x',\n        yField: 'tick',\n        shapeField: 'line',\n        sizeField: 15,\n        style: { stroke: 'red' },\n        tooltip: false,\n      },\n    ],\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoAnnotationShape />, document.getElementById('container'));\n",title:{zh:"点标记的条形图",en:"Interval, Point Annotation"},filename:"interval-point.js",isNew:!1},{id:"line-badge",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*INjOS7ExVzYAAAAAAAAAAAAADmJ7AQ/original",source:"import { Line } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoAnnotationShape = () => {\n  const config = {\n    data: {\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n      transform: [\n        {\n          type: 'fold',\n          fields: ['blockchain', 'nlp'],\n          key: 'type',\n          value: 'value',\n        },\n      ],\n    },\n    xField: (d) => new Date(d.date),\n    yField: 'value',\n    colorField: 'type',\n    axis: { x: { labelAutoHide: 'greedy' } },\n    annotations: [\n      {\n        type: 'text',\n        data: [new Date('2017-12-17'), 100],\n        shape: 'badge',\n        style: {\n          text: '100',\n          dy: -1,\n          markerSize: 24,\n          markerFill: '#6395FA',\n          markerFillOpacity: 0.55,\n        },\n        tooltip: false,\n      },\n    ],\n  };\n  return <Line {...config} />;\n};\n\nReactDOM.render(<DemoAnnotationShape />, document.getElementById('container'));\n",title:{zh:"徽章标记的折线图",en:"Line, Badge Annotation"},filename:"line-badge.js",isNew:!1},{id:"watermark",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LA11Rqfk2Y4AAAAAAAAAAAAADmJ7AQ/original",source:"import { Column } from '@ant-design/plots';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoAnnotationShape = () => {\n  const data = [\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n    { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n    { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n    { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n    { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n    { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n    { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n    { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n    { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n    { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n    { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n    { month: 'Total', start: 0, end: 3164946 },\n  ];\n\n  const config = {\n    data,\n    xField: 'month',\n    yField: ['end', 'start'],\n    colorField: (d) => (d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease'),\n    axis: { y: { labelFormatter: '~s' } },\n    tooltip: {\n      items: [\n        { channel: 'y', valueFormatter: '~s' },\n        { channel: 'y1', valueFormatter: '~s' },\n      ],\n    },\n    annotations: [\n      {\n        type: 'shape',\n        style: {\n          x: '80%',\n          y: '70%',\n          render: ({ x, y }, context, d) => {\n            const { document } = context;\n            const g = document.createElement('g', {});\n            const c1 = document.createElement('circle', {\n              style: {\n                cx: x,\n                cy: y,\n                lineWidth: 4,\n                r: 65,\n                stroke: 'red',\n                opacity: 0.3,\n              },\n            });\n            const c2 = document.createElement('circle', {\n              style: {\n                cx: x,\n                cy: y,\n                lineWidth: 2,\n                r: 50,\n                stroke: 'red',\n                opacity: 0.3,\n              },\n            });\n            const text = document.createElement('text', {\n              style: {\n                x,\n                y,\n                text: '数据保密',\n                transform: 'rotate(30)',\n                fontSize: 20,\n                fill: 'red',\n                textAlign: 'center',\n                textBaseline: 'middle',\n                fillOpacity: 0.3,\n              },\n            });\n            g.appendChild(c1);\n            g.appendChild(c2);\n            g.appendChild(text);\n            return g;\n          },\n        },\n      },\n    ],\n  };\n  return <Column {...config} />;\n};\n\nReactDOM.render(<DemoAnnotationShape />, document.getElementById('container'));\n",title:{zh:"徽章水印",en:"Watermark"},filename:"watermark.js",isNew:!1}],icon:"",id:"annotation-shape",title:{en:"Annotation Shape",zh:"图形标注"},api:{zh:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n",en:"# 通用配置 \n \n \n## 图表容器 \n \n### width \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表宽度。 \n \n### height \n \n<description>**optional** *number* *default:* `400`</description> \n \n设置图表高度。 \n \n### autoFit \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n图表是否自适应容器宽高。当 `autoFit` 设置为 true 时，`width` 和 `height` 的设置将失效。 \n \n \n### renderer \n \n<description>**optional** *string* *default:* `canvas`</description> \n \n设置图表渲染方式为 `canvas` 或 `svg`，默认值无需指定，当要使用 svg 模式时，可以如下配置 \n \n```ts \n// import { Renderer as CanvasRenderer } from '@antv/g-canvas'; \nimport { Renderer as SVGRenderer } from '@antv/g-svg'; \n \nconst config = { \n  renderer: new SVGRenderer() \n} \n``` \n \n## 视图模型 \n \nG2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下： \n \n<img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kTJsRLGOYzEAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n- **视图区域（View Area）**：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为**外边距区域**，主要用于固定组件（坐标轴、图例等）到边界的距离。 \n- **绘制区域（Plot Area）**：上图中橙色 + 红色 + 青色部分，橙色部分被称为**内边距区域**，该区域用于绘制组件。 \n- **主区域（Main Area）**：上图中红色 + 青色部分，其中红色部分被称为**呼吸区域**，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。 \n- **内容区域（Content Area）**：上图中青色部分，主要用于绘制标记（图形元素）。 \n \n可以通过如下的配置设置各个区域的大小： \n \n- **margin** - 设置外边距四个方向的值，优先级别比分别设置低 \n- **marginLeft** - 设置左外边距 \n- **marginTop** - 设置上外边距 \n- **marginRight** - 设置右外边距值 \n- **marginBottom** - 设置下外边距值 \n- **padding** - 设置内边距四个方向的值，优先级别比分别设置低 \n- **paddingLeft** - 设置左内边距 \n- **paddingTop** - 设置上内边距 \n- **paddingRight** - 设置右内边距 \n- **paddingBottom** - 设置下内边距 \n- **inset** - 设置呼吸区域四个方向的值，优先级别比分别设置低 \n- **insetLeft** - 设置左呼吸区域 \n- **insetTop** - 设置上呼吸区域 \n- **insetRight** - 设置右呼吸区域 \n- **insetBottom** - 设置下呼吸区域 \n \n其中内容区域的大小由以下的公式得到： \n \n```js \nconst contentWidth = \n  width - \n  paddingLeft - \n  paddingRight - \n  marginLeft - \n  marginRight - \n  insetLeft - \n  insetRight; \n \nconst contentHeight = \n  height - \n  paddingTop - \n  paddingBottom - \n  marginTop - \n  marginBottom - \n  insetTop - \n  insetBottom; \n``` \n \n## 数据映射 \n \n### data \n \n<description>**required** *array object*</description> \n \n设置图表数据源。数据源为对象集合，例如：`[{ time: '1991'，value: 20 }, { time: '1992'，value: 20 }]`。 \n \n### xField \n \n<description>**required** *string*</description> \n \n图形在 x 方向对应的数据字段名，一般是横向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么班级字段就是对应的 xField。 \n \n### yField \n \n<description>**required** *string*</description> \n \n图形在 y 方向对应的数据字段名，一般是纵向的坐标轴对应的字段。比如：要看不同班级的人数情况，那么人数字段就是对应的 yField。 \n \n \n### seriesField \n \n<description>**optional** *string*</description> \n \n分组字段。比如：我们需要分析不同`省份`的交易额趋势，那么`省份字段`就是分组字段。 \n \n \n## 图形样式 \n \n### shapeField \n \n<description>**optional** *string* </description> \n \n指定 line 是否平滑，点图形状等 \n \n### colorField \n \n<description>**optional** *string* </description> \n \n指定颜色通道字段 \n \n \n### sizeField \n \n<description>**optional** *string* </description> \n \n指定尺寸通道字段 \n \n### stack \n \n<description>**optional** *boolean | StackYTransform*</description> \n \n是否堆积 \n \n```ts \ntype StackYTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  y?: 'y' | 'y1'; \n  y1?: 'y' | 'y1'; \n  series?: boolean; \n}; \n``` \n \n### normalize \n \n<description>**optional** *boolean | NormalizeYTransform*</description> \n \n数值归一化 \n \n```ts \ntype NormalizeYTransform = { \n  series?: boolean; \n  groupBy?: string | string[]; \n  basis?: 'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'; \n}; \n``` \n \n### sort \n \n<description>**optional** *boolean | SortByTransform*</description> \n \n排序 \n \n```ts \ntype SortByTransform = { \n  /** type: [field, order]; order: true => ascend, false => descend */ \n  fields?: (string | [string, boolean?])[]; \n}; \n``` \n \n### group \n \n<description>**optional** *boolean | DodgeXTransform*</description> \n \n分组 \n \n```ts \ntype DodgeXTransform = { \n  groupBy?: string | string[]; \n  reverse?: boolean; \n  orderBy?: TransformOrder; \n  padding?: number; \n}; \n``` \n \n### percent \n \n<description>**optional** *boolean* *default:* `true`</description> \n \n是否百分比面积图，百分比时默认开启 isStack。 \n \n \n \n### line \n \n<description>**optional** *Line*</description> \n \n线条，一般用于面积图中添加线条 \n \n### point \n \n<description>**optional** *Point*</description> \n \n点图形样式，一般用于 Line 中添加对应 Mark \n \n \n \n## 状态 \n \n<description>**可选** *object*</description> \n \n设置 Mark 对应状态的样式，常配合 Interaction 一起使用，有：`'default' | 'active' | 'inactive' | 'selected' | 'unselected'` 等状态。 \n \n示例： \n \n```ts \n{ \n  state: { \n    inactive: { opacity: 0.5 }, \n    active: { fill: 'red', linkFillOpacity: 0.5 } \n  }, \n  interaction: { \n    elementHighlightByColor: { \n      link: true \n    } \n  } \n} \n``` \n \n \n# 坐标轴 \n \n \n绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。 \n \n```js \nconst config = { \n  axis: { \n    x: {}, \n    y: {}, \n  }, \n} \n``` \n \n## 选项 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*d_cUTqkxrmwAAAAAAAAAAAAADmJ7AQ/original\" /> \n \n### 标题 \n \n| 属性               | 描述                                                           | 类型                                                         | 默认值 | \n| ------------------ | -------------------------------------------------------------- | ------------------------------------------------------------ | ------ | \n| title              | 关闭标题或设置标题内容                                         | `false`&#124;`string` &#124; `number` &#124; `DisplayObject` | -      | \n| titleSpacing       | 标题到坐标轴的距离                                             | `number`                                                     | 10     | \n| titlePosition      | 标题相对坐标轴的位置，支持首字母简写形式，如`'top'`简写为`'t'` | `'top'`&#124;`'bottom'`&#124;`'left'`&#124;`'right'`         | `'lb'` | \n| titleFontSize      | 标题文字大小                                                   | `number`                                                     | -      | \n| titleFontFamily    | 标题文字字体                                                   | `string`                                                     | -      | \n| titleFontWeight    | 标题字体粗细                                                   | `number`                                                     | -      | \n| titleStroke        | 标题字体颜色                                                   | `string`                                                     | -      | \n| titleStrokeOpacity | 标题透明度                                                     | `number`                                                     | -      | \n \n### 轴线 \n \n| 属性              | 描述                                                                                                              | 类型               | 默认值 | \n| ----------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------ | \n| line              | 是否显示轴线                                                                                                      | `boolean`          | true   | \n| arrow             | 是否显示箭头                                                                                                      | `boolean`          | true   | \n| lineExtension     | 轴线两侧的延长线                                                                                                  | `[number, number]` | -      | \n| lineArrow         | 定义轴线箭头形状，默认为箭头形状                                                                                  | `DisplayObject`    | -      | \n| lineArrowOffset   | 箭头偏移长度                                                                                                      | `number`           | 15     | \n| lineArrowSize     | 箭头尺寸                                                                                                          | `number`           | -      | \n| lineLineWidth     | 轴线宽度                                                                                                          | `number`           | -      | \n| lineLineDash      | 轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`  | -      | \n| lineStroke        | 轴线描边色                                                                                                        | `string`           | -      | \n| lineStrokeOpacity | 轴线描边色透明度                                                                                                  | `number`           | -      | \n \n### 刻度 \n \n| 属性              | 描述                                                                                                                | 类型                                                                     | 默认值     | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | ---------- | \n| tick              | 是否显示刻度                                                                                                        | `boolean`                                                                | true       | \n| tickFilter        | 刻度线过滤                                                                                                          | `(datum, index, data)=>boolean`                                          | -          | \n| tickFormatter     | 刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向                                                | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject`    | -          | \n| tickDirection     | 刻度朝向，为 `positive` 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 `negative` 时，刻度位于侧轴负方向            | `'positive'` &#124; `'negative'`                                         | 'positive' | \n| tickLength        | 轴线长度                                                                                                            | `number`&#124;`(datum, index, data)=>number`                             | 15         | \n| tickLineWidth     | 刻度线宽度                                                                                                          | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n| tickLineDash      | 刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data, Vector)=>[number,number]` | -          | \n| tickStroke        | 刻度线颜色                                                                                                          | `string` &#124; `(datum, index, data, Vector)=>string`                   | -          | \n| tickStrokeOpacity | 刻度线透明度                                                                                                        | `number` &#124; `(datum, index, data, Vector)=>number`                   | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                                                                | 类型                                                                  | 默认值     | \n| ------------------ | ------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                                                                      | `boolean`                                                             | -          | \n| labelFilter        | 刻度值过滤                                                                                                          | `(datum, index, data)=> boolean`                                      | -          | \n| labelFormatter     | 刻度值线格式化                                                                                                      | `DisplayObject` &#124; `(datum, index, data, Vector)=> DisplayObject` | -          | \n| transform          | 刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转                                    | `Transform[]`                                                         | -          | \n| labelAutoHide      | 自动隐藏重叠的刻度值，设置 size 值的时候生效                                                                        | `boolean` &#124; `HideOverlapCfg`                                     | -          | \n| labelAutoRotate    | 自动旋转刻度，设置 size 值的时候生效值                                                                              | `boolean` &#124; `RotateOverlapCfg`                                   | -          | \n| labelAutoEllipsis  | 自动缩略刻度值，设置 size 值的时候生效                                                                              | `boolean` &#124; `EllipsisOverlapCfg`                                 | -          | \n| labelAutoWrap      | 自动换行刻度值，设置 size 值的时候是生效                                                                            | `boolean` &#124; `WrapOverlapCfg`                                     | -          | \n| labelAlign         | 刻度值对齐方式<br/>- 'horizontal' 始终保持水平<br/> - 'parallel' 平行于坐标轴<br/> - 'perpendicular' 垂直于坐标轴   | `'horizontal'` &#124; `'parallel'` &#124; `'perpendicular'`           | 'parallel' | \n| labelDirection     | 刻度值位于轴线的位置，参考`tickDirection`                                                                           | `'positive'` &#124; `'negative'`                                      | 'positive' | \n| labelSpacing       | 刻度值到其对应刻度的间距                                                                                            | `number`                                                              | 0          | \n| labelLineWidth     | 刻度值宽度                                                                                                          | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelLineDash      | 刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]` &#124; `(datum, index, data)=>[number, number]`     | -          | \n| labelFontSize      | 刻度值文字大小                                                                                                      | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelFontFamily    | 刻度值文字字体                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFontWeight    | 刻度值字体粗细                                                                                                      | `number` &#124;`(datum, index, data)=>number`                         | -          | \n| labelFill        | 刻度值字体颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelFillOpacity | 刻度值文本透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n| labelStroke        | 刻度值文本描边颜色                                                                                                      | `string` &#124; `(datum, index, data)=>string`                        | -          | \n| labelStrokeOpacity | 刻度值文本描边透明度                                                                                                    | `number` &#124; `(datum, index, data)=>number`                        | -          | \n \n```ts \nexport interface Transform { \n  /** 避免刻度值重叠时的额外边距 */ \n  margin?: number[]; \n} \n \nexport interface EllipsisOverlapCfg extends Transform { \n  type: 'ellipsis'; \n  /** 缩略替换字符，默认为 ... */ \n  suffix?: string; \n  /** 文本短于该长度时不再缩略 */ \n  minLength: string | number; \n  /** 文本短于该长度时一定会进行缩略 */ \n  maxLength?: string | number; \n  /** 每次缩略执行步长 */ \n  step?: string | number; \n} \n \nexport interface RotateOverlapCfg extends Transform { \n  type: 'rotate'; \n  /** 可选的旋转角度值 */ \n  optionalAngles: number[]; \n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */ \n  recoverWhenFailed?: boolean; \n} \n \nexport interface HideOverlapCfg extends Transform { \n  type: 'hide'; \n  /** 保证第一个刻度值不被隐藏 */ \n  keepHeader?: boolean; \n  /** 保证最后一个刻度值不被隐藏 */ \n  keepTail?: boolean; \n} \n \nexport interface WrapOverlapCfg extends Transform { \n  type: 'wrap'; \n  /** 单行最大宽度 */ \n  wordWrapWidth?: number; \n  /** 最大行数 */ \n  maxLines?: number; \n  recoverWhenFailed?: boolean; \n} \n``` \n \n### 网格线 \n \n在不同坐标系下网格线会具有不同的样式 \n \n| 场景标签            | 样式                                                                                                                                        | \n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | \n| `直角坐标系`        | <img alt=\"linear-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*i-2xTLMLU3EAAAAAAAAAAAAADmJ7AQ/original\" width=\"200\" />  | \n| `极坐标系`          | <img alt=\"circle-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gkAKQ4XTErQAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />  | \n| `极坐标系`          | <img alt=\"polar-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*4Tv3RIrDWvgAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" />   | \n| `极坐标系` `雷达图` | <img alt=\"polygon-grid\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gZLeRpTXiRAAAAAAAAAAAAAADmJ7AQ/original\" width=\"100\" /> | \n \n| 属性              | 描述                                                                                                                | 类型                                                             | 默认值 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ------ | \n| grid              | 是否显示网格线                                                                                                      | `boolean`                                                        | false  | \n| gridFilter        | 网格线过滤                                                                                                          | `(datum, index, data)=> boolean`                                 | -      | \n| gridLength        | 网格线长度。一般情况下，不需要用户配置。                                                                            | `number` &#124; `(datum, index, data)=> number`                  | 0      | \n| gridAreaFill      | 网格线区域颜色                                                                                                      | `string` &#124; `string[]`&#124; `(datum, index, data)=> string` | -      | \n| gridLineWidth     | 网格线宽度                                                                                                          | `number`                                                         | -      | \n| gridLineDash      | 网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 | `[number,number]`                                                | -      | \n| gridStroke        | 网格线颜色                                                                                                          | `string`                                                         | -      | \n| gridStrokeOpacity | 网格线透明度                                                                                                        | `number`                                                         | -      | \n \n### 动画 \n \n支持设置更新时的动画效果 \n \n| 属性    | 描述         | 类型                            | 默认值 | \n| ------- | ------------ | ------------------------------- | ------ | \n| animate | 是否开启动画 | `boolean` &#124; `EffectTiming` | -      | \n \nEffectTiming 支持配置的属性如下： \n \n| 属性     | 描述                           | 类型     | 默认值 | \n| -------- | ------------------------------ | -------- | ------ | \n| delay    | 延迟执行时间 (ms)              | `number` | -      | \n| duration | 动画持续时间 (ms)              | `number` | -      | \n| easing   | 动画的缓动函数                 | `Easing` | -      | \n| endDelay | 延迟执行时间 (ms)              | `number` | -      | \n| fill     | 动画处于非运行状态时的展示效果 | `Fill`   | -      | \n \n \n# 图例 \n \n \n绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。 \n \n```js \nconst config = { \n  legend: { \n    color: {}, \n    size: {}, \n  }, \n} \n``` \n \n## 分类图例 \n \n### 图例项 \n \n图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。 \n \n<img alt=\"item\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*RSedT7GvlL4AAAAAAAAAAAAADmJ7AQ/original\" height=\"80\" /> \n \n| 属性                      | 描述                           | 类型                                                     | 默认值    | \n| ------------------------- | ------------------------------ | -------------------------------------------------------- | --------- | \n| itemMarker                | 图例项图标                     | `DisplayObject` \\| `(datum, index, data)=>DisplayObject` | 'circle'  | \n| itemMarkerFill            | 图例项图标填充色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerFillOpacity     | 图例项图标填充色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemMarkerStroke          | 图例项图标描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemMarkerStrokeOpacity   | 图例项图标描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelText             | 图例项标签                     | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontSize         | 图例项标签文字大小             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFontFamily       | 图例项标签文字字体             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFontWeight       | 图例项标签字体粗细             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelFill             | 图例项标签字体颜色             | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelFillOpacity      | 图例项标签字体透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemLabelStroke           | 图例项标签描边色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemLabelStrokeOpacity    | 图例项标签描边色透明度         | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueText             | 图例项值                       | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontSize         | 图例项值文字大小               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFontFamily       | 图例项值文字字体               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFontWeight       | 图例项值字体粗细               | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueFill             | 图例项值字体颜色               | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueFillOpacity      | 图例项值字体透明度             | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemValueStroke           | 图例项值描边色                 | `string` \\| `(datum, index, data)=>string`               | -         | \n| itemValueStrokeOpacity    | 图例项值描边色透明度           | `number` \\| `(datum, index, data)=>number`               | -         | \n| itemSpan                  | 图例项图标、标签和值的空间划分 | `number` \\| `number[]`                                   | [1, 1, 1] | \n| itemSpacing               | 图例项图标、标签和值之间的间距 | `number` \\| `number[]`                                   | -         | \n| itemBackgroundFill        | 背景颜色                       | `string`                                                 | -         | \n| itemBackgroundFillOpacity | 背景透明度                     | `number`                                                 | -         | \n \n### 布局 \n \n默认采用**流式布局**。 \n \n<img alt=\"flow layout\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Lb43QoUm8ZEAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n当指定 `cols` 之后会采用**网格布局**。 \n \n<img alt=\"grid layout 1\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IsmYSKexO00AAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n<img alt=\"grid layout 2\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Mh1bQbp7jeMAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" /> \n \n| 属性       | 描述                                             | 类型               | 默认值 | \n| ---------- | ------------------------------------------------ | ------------------ | ------ | \n| layout     | 图例项布局方式，网格布局、流式布局               | `'flex'`\\|`'grid'` | 'flex' | \n| cols       | 指定每列显示的图例项数量，为空时表示列数不受限制 | `number`           | -      | \n| colPadding | 图例项之间的横向间隔                             | `number`           | 0      | \n| rowPadding | 图例项之间的纵向间隔                             | `number`           | 0      | \n| maxRows    | 最多多少行                                       | `number`           | 3      | \n| maxCols    | 最多多少列                                       | `number`           | 3      | \n \n### 分页显示 \n \n图例项分页显示时能够控制分页器的行为。 \n \n \n| 属性         | 描述                                                           | 类型                                                                       | 默认值       | \n| ------------ | -------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------ | \n| navEffect    | 翻页显示效果                                                   | 参见 [Web Animations API](https://g-next.antv.vision/api/animation/waapi/) | linear       | \n| navDuration  | 单次翻页动效时长                                               | `number`                                                                   | 200          | \n| navOrient    | 翻页滚动方向<br/> - 横向`'horizontal'`<br/> - 纵向`'vertical'` | `'horizontal'`\\|`'vertical'`                                               | 'horizontal' | \n| navInitPage  | 默认展示页数                                                   | `number`                                                                   | 0            | \n| navLoop      | 是否启用循环翻页                                               | `boolean`                                                                  | false        | \n| navFormatter | 页码文本格式化                                                 | `(current: number, total: number) => string;`                              | -            | \n \n \n### 事件 \n \n| 事件类型   | 描述                 | 类型                      | \n| ---------- | -------------------- | ------------------------- | \n| click      | 点击图例项时触发     | `(item:Selection)=>void`  | \n| mouseenter | 鼠标移入图例项时触发 | `(item: Selection)=>void` | \n| mouseleave | 鼠标移出图例项时触发 | `(item:Selection)=>void`  | \n \n## 连续图例 \n \n使用离散数据绘制视图时采用的图例类型。 \n \n<img alt=\"continuous\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NgruQbickEAAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n```ts \nconst config = { \n  legend: { \n    y: { \n      ribbonLen: 200, \n      ribbonSize: 30, \n      labelFormatter: (datum, index, data) => datum.people.toLocaleString(), \n      type: 'size', \n      color: [ \n        '#d0e3fa', \n        '#acc7f6', \n        '#8daaf2', \n        '#6d8eea', \n        '#4d73cd', \n        '#325bb1', \n        '#5a3e75', \n        '#8c3c79', \n        '#e23455', \n        '#e7655b', \n      ], \n    }, \n  }, \n} \n \n``` \n \n### 背景色带 \n \n连续数据的图例具有 4 种样式，分别为： \n \n- 连续表示 `默认` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ds9pTqbi4OAAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 范围表示 `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kpDRTJVgkaEAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸表示 `type='size'` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*uHJYTbVSebgAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 尺寸、范围表示 `type='size'` `block=true` \n \n  <img alt=\"ribbon-color\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MahwS6sQocoAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                | 描述                             | 类型                        | 默认值  | \n| ------------------- | -------------------------------- | --------------------------- | ------- | \n| color               | 色带颜色，为数组时会从中按序取色 | `string[]` \\| `interpolate` | -       | \n| block               | 是否按区间显示                   | `boolean`                   | false   | \n| type                | 连续图例类型                     | `'size'` \\| `'color'`       | 'color' | \n| ribbonSize          | 色带尺寸                         | `number`                    | -       | \n| ribbonFill          | 色带颜色                         | `string`                    | -       | \n| ribbonFillOpacity   | 色带透明度                       | `number`                    | -       | \n| ribbonStroke        | 色带描边色                       | `string`                    | -       | \n| ribbonStrokeOpacity | 色带描边色透明度                 | `number`                    | -       | \n \n> color 插值器参考 [d3-interpolate](https://github.com/d3/d3-interpolate) \n \n### 滑动窗口 \n \n滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。 \n \n <img alt=\"slider-window\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*eAnbT6OFQlwAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n| 属性                      | 描述                 | 类型                           | 默认值     | \n| ------------------------- | -------------------- | ------------------------------ | ---------- | \n| handle                    | 是否显示滑动手柄     | `boolean`                      | true       | \n| handleLabel               | 是否显示手柄文本     | `boolean`                      | true       | \n| handleFormatter           | 手柄文本格式化       | `(datum)=>string`              | -          | \n| slidable                  | 窗口是否可以滑动     | `boolean`                      | true       | \n| range                     | 默认选择范围         | `[number, number]`             | [min, max] | \n| step                      | 单次滑动步长         | `number`                       | 1          | \n| handleMarkerFill          | 手柄图标颜色         | `string`                       | -          | \n| handleMarkerFillOpacity   | 手柄图标色透明度     | `number`                       | -          | \n| handleMarkerStroke        | 手柄图标描边色       | `string`                       | -          | \n| handleMarkerStrokeOpacity | 手柄图标描边色透明度 | `number`                       | -          | \n| handleLabelFontSize       | 手柄文字大小         | `number` \\| `Function<number>` | -          | \n| handleLabelFontFamily     | 手柄文字字体         | `string` \\| `Function<string>` | -          | \n| handleLabelFontWeight     | 手柄字体粗细         | `number` \\|`Function<number>`  | -          | \n| handleLabelFill           | 手柄字体颜色         | `string`                       | -          | \n| handleLabelFillOpacity    | 手柄文本透明度       | `number`                       | -          | \n| handleLabelStroke         | 手柄文本描边色       | `string`                       | -          | \n| handleLabelStrokeOpacity  | 手柄文本描边色透明度 | `number`                       | -          | \n \n### 刻度值 \n \n| 属性               | 描述                                                                  | 类型                            | 默认值     | \n| ------------------ | --------------------------------------------------------------------- | ------------------------------- | ---------- | \n| label              | 是否显示刻度值                                                        | `boolean`                       | true`      | \n| labelFormatter     | 刻度值格式化                                                          | `(datum, index, data)=>string`  | -          | \n| labelFilter        | 刻度值过滤                                                            | `(datum, index, data)=>boolean` | -          | \n| labelDirection     | 刻度值位于色带的位置，参考 axis `direction`                           | `'positive'` \\| `'negative'`    | 'positive' | \n| labelSpacing       | 刻度值到色带的间距                                                    | `number`                        | 5          | \n| labelAlign         | 刻度值对齐位置<br/> - `'value'` 对齐到刻度<br/>- `'range'` 对齐到范围 | `'value'`\\|`'range'`            | 'value'    | \n| labelFontSize      | 刻度值文字大小                                                        | `number` \\| `Function<number>`  | -          | \n| labelFontFamily    | 刻度值文字字体                                                        | `string` \\| `Function<string>`  | -          | \n| labelFontWeight    | 刻度值字体粗细                                                        | `number` \\| `Function<number>`  | -          | \n| labelStroke        | 刻度值字体颜色                                                        | `string`                        | -          | \n| labelStrokeOpacity | 刻度值文本透明度                                                      | `number`                        | -          | \n \n<b>刻度值对齐方式</b> \n \n- 对齐到刻度 \n \n <img alt=\"align-tick\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*vN1uQqWZ3K4AAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n- 对齐到范围 \n \n <img alt=\"align-range\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*R_C4QJ5JxgMAAAAAAAAAAAAADmJ7AQ/original\" width=\"300\" /> \n \n### 指示器 \n \n指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。 \n \n<img alt=\"indicator\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NiI8Ta84y_MAAAAAAAAAAAAADmJ7AQ/original\" height=\"50\" /> \n \n| 属性                             | 描述                     | 类型                               | 默认值 | \n| -------------------------------- | ------------------------ | ---------------------------------- | ------ | \n| indicator                        | 是否显示值指示器         | `boolean`                          | true   | \n| indicatorFormatter               | 值指示器格式化           | `(datum)=>string \\| DisplayObject` | -      | \n| indicatorLabelFontSize           | 值指示器文本文字大小     | `number` \\| `Function<number>`     | -      | \n| indicatorLabelFontFamily         | 值指示器文本文字字体     | `string` \\| `Function<string>`     | -      | \n| indicatorLabelFontWeight         | 值指示器文本字体粗细     | `number` \\|`Function<number>`      | -      | \n| indicatorLabelStroke             | 值指示器字体颜色         | `string`                           | -      | \n| indicatorLabelStrokeOpacity      | 值指示器文本透明度       | `number`                           | -      | \n| indicatorBackgroundFill          | 值指示器背景颜色         | `string`                           | -      | \n| indicatorBackgroundFillOpacity   | 值指示器背景透明度       | `number`                           | -      | \n| indicatorBackgroundStroke        | 值指示器背景描边色       | `string`                           | -      | \n| indicatorBackgroundStrokeOpacity | 值指示器背景描边色透明度 | `number`                           | -      | \n \n### 事件 \n \n| 事件类型    | 描述                       | 类型                                             | \n| ----------- | -------------------------- | ------------------------------------------------ | \n| valuechange | 滑动窗口选取范围改变时触发 | `(range: [number, number])=>void`                | \n| indicate    | 指示器值改变时触发         | `(value: number, range: [number, number])=>void` | \n \n## 通用选项 \n \n### 标题 \n \n \n| 属性               | 描述                                                | 类型                                                                                                                                   | 默认值 | \n| ------------------ | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------ | \n| title              | 关闭标题或设置标题内容                              | `false`\\|`string`                                                                                                                      | true   | \n| titleSpacing       | 标题到内容区域的间距                                | `number` \\| `number[]`                                                                                                                 | 0      | \n| titleInset         | 标题文本内边距                                      | `number` \\| `number[]`                                                                                                                 | 0      | \n| titlePosition      | 标题所处位置。可采用简写形式，如`'i'` 表示`'inner'` | `'top'` \\| `'bottom'` \\|`'left'` \\|`'right'` \\|`'left-top'` \\|`'left-bottom'` \\|`'right-top'` \\|`'right-bottom'` \\|`'inner'` \\| `'lt'` | -      | \n| titleFontSize      | 标题文字大小                                        | `number`                                                                                                                               | -      | \n| titleFontFamily    | 标题文字字体                                        | `string`                                                                                                                               | -      | \n| titleFontWeight    | 标题字体粗细                                        | `number`                                                                                                                               | -      | \n| titleFill          | 标题字体颜色                                        | `string`                                                                                                                               | \n| titleFillOpacity   | 标题字体颜色透明度                                  | `number`                                                                                                                               | \n| titleStroke        | 标题字体描边颜色                                    | `string`                                                                                                                               | -      | \n| titleStrokeOpacity | 标题字体描边颜色透明度                              | `number`                                                                                                                               | -      | \n \n \n### 布局 \n \nLegend 组件支持调整其在画布中的位置，通过 `layout` 属性来设置。 \n目前支持基本的 Flex 布局方式，支持的属性包括: `justifyContent`, `alignItems`, `flexDirection`。 \n \n| 属性           | 描述         | 类型                                         | 默认值         | \n| -------------- | ------------ | -------------------------------------------- | -------------- | \n| justifyContent | 主轴对齐方式 | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| alignItems     | 交叉轴对齐   | `'flex-start'` \\| `'flex-end'` \\| `'center'` | `'flex-start'` | \n| flexDirection  | 主轴方向     | `'row'` \\| `'column'`                        | `'row'`        | \n \n```ts \nconst config = { \n  legend: { \n    color: { \n      layout: { \n        justifyContent: 'center', \n        alignItems: 'center', \n        flexDirection: 'column', \n      }, \n    }, \n  }, \n} \n``` \n \n \n# 滚动条 \n \n \n滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。 \n \n## 何时使用 \n \n内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。 \n \n## 开始使用 \n \n<img alt=\"scrollbar\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ompnRpW0vycAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  } \n} \n``` \n \n## 选项 \n \n### 基本 \n \n| 属性                       | 描述                   | 类型                   | 默认值 | \n| -------------------------- | ---------------------- | ---------------------- | ------ | \n| ratio                      | 滚动条的比例             | `number`               | 0.5   | \n| value                      | 滚动条的起始位置          | `[0, 1]`               | 0   | \n| slidable                   | 是否可以拖动           | `boolean`              | true   | \n| scrollable                 | 是否支持滚轮滚动       | `boolean`              | true   | \n| `style.`isRound            | 滚动条样式是否为圆角   | `boolean`              | false  | \n| `style.`padding            | 滚动条轨道内边距       | `number` \\| `number[]` | 2      | \n| `style.`thumbFill          | 滚动条滑块填充色       | `string`               | –      | \n| `style.`thumbFillOpacity   | 滚动条滑块填充色透明度 | `number`               | –      | \n| `style.`thumbStroke        | 滚动条滑块描边色       | `string`               | –      | \n| `style.`thumbStrokeOpacity | 滚动条滑块描边色透明度 | `number`               | –      | \n| `style.`trackSize          | 滚动条的轨道宽度       | `number`               | 10     | \n| `style.`trackFill          | 滚动条轨道填充色       | `string`               | -      | \n| `style.`trackFillOpacity   | 滚动条轨道填充色透明度 | `number`               | -      | \n| `style.`trackStroke        | 滚动条轨道描边色       | `string`               | –      | \n| `style.`trackStrokeOpacity | 滚动条轨道描边色透明度 | `number`               | –      | \n \n### 事件 \n \n| 属性        | 描述                             | 类型          | \n| ----------- | -------------------------------- | ------------- | \n| valuechange | 发生滚动变化时触发，通过事件监听 | `function(e)` | \n \n```ts \nconst config = { \n  scrollbar: { \n    x: {} \n  }, \n  onReady: (chart) => { \n    const { canvas } = chart.getContext(); \n    const { document } = canvas; \n    document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => { \n      console.info(evt.detail); \n    }); \n  } \n} \n``` \n \n \n# 提示 \n \n \n提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。 \n \n## 开始使用 \n \n<img alt=\"built-in-tooltip\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*r95yTqow_1EAAAAAAAAAAAAADmJ7AQ/original\" width=\"600\" /> \n \n```js \nconst config = { \n  tooltip: { \n    title: 'Date', \n    items: [{ channel: 'y' }], \n  } \n} \n``` \n \n## 选项 \n \n| 属性  | 描述                                  | 类型          | 默认值 | \n| ----- | ------------------------------------- | ------------- | ------ | \n| title | 标题，支持一段文本或 innerHTML 字符串 | `TooltipItem` | \\-     | \n| items | 定义每一个提示项的配置                | `TooltipItem` | \\-     | \n \n```ts \ntype TooltipItem = \n  | string \n  | false \n  | { \n      name?: string; \n      color?: string; \n      channel?: string; \n      field?: string; \n      value?: string; \n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串） \n      valueFormatter?: string | ((d: any) => string); \n    }; \n``` \n \n## 案例 \n \n### title \n \n```js \nconst config = { \n  tooltip: { \n    title: (d) => (d.value > 100 ? d.name : d.age), // transform \n  } \n} \n``` \n \n### item \n \n```js \n// 单个字段 \nconst config = { \n  tooltip: { \n    field: 'a' \n  } \n} \n \n// 单个通道 \nconst config = { \n  tooltip: { \n    channel: 'y' \n  } \n} \n \n// 格式化 \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: (d) => d.toFixed(1) } \n} \n \n// d3-format 支持的字符 \n// https://github.com/d3/d3-format \nconst config = { \n  tooltip: { channel: 'y', valueFormatter: '~s' } \n} \n \n// 完整信息 \nconst config = { \n  tooltip: { name: 'name', color: 'red', value: 'color' } \n} \n \n// 回调 \nconst config = { \n  tooltip: ( \n    d, // 每一个数据项 \n    index, // 索引 \n    data, // 完整数据 \n    column, // 通道 \n  ) => ({ \n    value: `${column.y.value[index]} - ${column.y1.value[index]}`, \n  }) \n} \n \n// 多个 item \nconst config = { \n  tooltip: { items: [{ channel: 'y' }, { channel: 'x' }] } \n} \n``` \n \n### title + item \n \n```js \nconst config = { \n  tooltip: { \n    title: 'a', \n    items: [{ channel: 'x' }, { channel: 'y' }], \n  } \n} \n``` \n \n \n# 数据标签 \n \n \nLabel 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下: \n \n \n## 开始使用 \n \n<img alt=\"label\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original\" width=\"400\" alt=\"revenue-flow-waterfall\" /> \n \n```ts \nconst config = { \n  label: { \n    text: 'people', \n    position: 'outside', \n    transform: [{ type: 'overlapDodgeY' }], \n  } \n} \n``` \n \n## 选项（options） \n \nLabel 继承 G Text 所有属性样式配置，此外还有 `position`, `selector`, `connector`, `background` 和 `transform` 等更多配置。 \n \n| 属性          | 描述                                                                                                                          | 类型                                                                               | 默认值    | \n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | --------- | \n| fontSize      | 文字大小                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| fontFamily    | 文字字体                                                                                                                      | `string` \\| `Function<string>`                                                     | -         | \n| fontWeight    | 字体粗细                                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| lineHeight    | 文字的行高                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| textAlign     | 设置文本内容的当前对齐方式, 支持的属性：`center` \\| `end` \\| `left` \\| `right` \\| `start`，默认值为`start`                    | `string` \\| `Function<string>`                                                     | -         | \n| textBaseline  | 设置在绘制文本时使用的当前文本基线, 支持的属性:`top` \\| `middle` \\| `bottom` \\| `alphabetic` \\| `hanging`。默认值为`bottom`   | `string` \\| `Function<string>`                                                     | -         | \n| fill          | 图形的填充色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| fillOpacity   | 图形的填充透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| stroke        | 图形的描边                                                                                                                    | `string` \\| `Function<string>`                                                     | -         | \n| strokeOpacity | 描边透明度                                                                                                                    | `number` \\| `Function<number>`                                                     | -         | \n| lineWidth     | 图形描边的宽度                                                                                                                | `number` \\| `Function<number>`                                                     | -         | \n| lineDash      | 描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。                 | `[number,number]` \\| `Function<[number, number]>`                                  | -         | \n| opacity       | 图形的整体透明度                                                                                                              | `number` \\| `Function<number>`                                                     | -         | \n| shadowColor   | 图形阴影颜色                                                                                                                  | `string` \\| `Function<string>`                                                     | -         | \n| shadowBlur    | 图形阴影的高斯模糊系数                                                                                                        | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetX | 设置阴影距图形的水平距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| shadowOffsetY | 设置阴影距图形的垂直距离                                                                                                      | `number` \\| `Function<number>`                                                     | -         | \n| cursor        | 鼠标样式。同 css 的鼠标样式，默认 'default'。                                                                                 | `string` \\| `Function<string>`                                                     | 'default' | \n| position      | 标签位置配置                                                                                                                  | `string`                                                                           | -         | \n| selector      | 标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。 | `string\\|function`                                                                 | -         | \n| connector     | 是否展示文本和目标点之间的连接线，默认不展示                                                                                  | `boolean`                                                                          | -         | \n| background    | 是否展示文本背景框，默认不展示                                                                                                | `boolean`                                                                          | -         | \n| transform     | 标签转换，主要用于调整标签 `(x,y)` 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理 | `array\\|function`                                                                  | -         | \n| formatter     | 标签文本格式化                                                                                                                | `type Formatter = (text:string, datum: Datum, index:number, data: Data) => string` | -         | \n \n标签**连接线样式**配置，格式为: `connector${style}`, 如: `connectorStroke` 代表连接线描边色。 \n \n| 参数                | 说明                                             | 类型     | 默认值 | \n| ------------------- | ------------------------------------------------ | -------- | ------ | \n| connectorStroke     | 连接线描边色                                     | `string` | -      | \n| connectorLineWidth  | 连接线描边线宽                                   | `number` | -      | \n| `connector${style}` | 更多连接线样式配置，参考 `PathStyleProps` 属性值 | -        | -      | \n \n标签**文本背景框样式**配置，格式为: `background${style}`, 如: `backgroundFill` 代表背景框填充色。 \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| backgroundFill       | 背景框填充色                                     | `string`   | -      | \n| backgroundRadius     | 背景框圆角半径                                   | `number`   | -      | \n| backgroundPadding    | 背景框内间距                                     | `number[]` | -      | \n| `background${style}` | 更多背景框样式配置，参考 `RectStyleProps` 属性值 | -          | -      | \n \n数据标签支持使用 HTML 自定义标签，具体配置为： \n \n| 参数                 | 说明                                             | 类型       | 默认值 | \n| -------------------- | ------------------------------------------------ | ---------- | ------ | \n| render               | 返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签  | `RenderFunc`   | -      | \n \n```ts \ntype RenderFunc = (text: string, datum: object, index: number) => String | HTMLElement; \n``` \n \n## FAQ \n \n### 支持哪些 position？ \n \n在笛卡尔坐标系下，支持 9 种位置：`'top'`, `'left'`, `'right'`, `'bottom'`, `'top-left'`, `'top-right'`, `'bottom-left'`, `'bottom-right'`, `'inside'`。非笛卡尔坐标系下，支持 `'outside'`, `'inside'` 两种。 \n \n此外，针对面积图提供特殊 `area`，见 [面积图特殊标签](/zh/examples/general/area/#label)。针对 radial 类型的图标，增加了 `spider`、`surround` 两种类型。 \n \n| position   | 用途                                                    | 使用前                                                                                                              | 使用后                                                                                                      | \n| ---------- | ------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | \n| `spider`   | 调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系       | ![without-spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zadTTJI2nOEAAAAAAAAAAAAADmJ7AQ/original)   | ![spider](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*gC20SLxWVicAAAAAAAAAAAAADmJ7AQ/original)   | \n| `surround` | 调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图 | ![without-surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Cx8zT7vT5bUAAAAAAAAAAAAADmJ7AQ/original) | ![surround](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*lRJqTLldgRYAAAAAAAAAAAAADmJ7AQ/original) | \n| `area`     | 将面积图的标签显示在面积区域中心，并设置一定的旋转角度  |                                                                                                                     | ![area](https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZIamS4KwErEAAAAAAAAAAAAADmJ7AQ/original)     | \n \n### selector 如何使用？ \n \nselector 选择器可以对系列数据进行过滤索引。 \n \n通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark \n \n内置选择器有：`'last'`, `'first'`，同时也支持 `function` 回调的方式自定义，如下： \n \n```ts \n{ \n  selector: (data) => { \n    if (data.length) { \n      // 对于每个系列的数据，只保留索引等于 2 的标签 \n      return data.filter((d, index) => index === 2); \n    } \n    return data; \n  }; \n} \n``` \n \n \n# 更多 \n \n详见[选项](/options/plots/overview) \n \n \n \n"},childrenKey:"demos",order:22}],childrenKey:"examples"},{id:"relations",title:{zh:"关系图",en:"Relations"},icon:"line",examples:[{demos:[{id:"horizontal-dendrogram",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*rRlBRIOnCjoAAAAAAAAAAAAADmJ7AQ/original",source:"import { Dendrogram, G6 } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoDendrogram = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((data) => setData(treeToGraphData(data)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n  };\n\n  return <Dendrogram {...options} />;\n};\n\nReactDOM.render(<DemoDendrogram />, document.getElementById('container'));\n",title:{zh:"水平生态树",en:"Horizontal Dendrogram"},filename:"horizontal-dendrogram.js",isNew:!1},{id:"vertical-dendrogram",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Xzf1SKVmNxIAAAAAAAAAAAAADmJ7AQ/original",source:"import { Dendrogram, G6 } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoDendrogram = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((data) => setData(treeToGraphData(data)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    direction: 'vertical',\n  };\n\n  return <Dendrogram {...options} />;\n};\n\nReactDOM.render(<DemoDendrogram />, document.getElementById('container'));\n",title:{zh:"垂直生态树",en:"Vertical Dendrogram"},filename:"vertical-dendrogram.js",isNew:!1},{id:"radial-dendrogram",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*mvnUTaA91H0AAAAAAAAAAAAADmJ7AQ/original",source:"import { Dendrogram, G6 } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoDendrogram = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((data) => setData(treeToGraphData(data)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    direction: 'radial',\n  };\n\n  return <Dendrogram {...options} />;\n};\n\nReactDOM.render(<DemoDendrogram />, document.getElementById('container'));\n",title:{zh:"径向生态树",en:"Radial Dendrogram"},filename:"radial-dendrogram.js",isNew:!1},{id:"horizontal-tidy-tree",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*3u63Q4dYzMQAAAAAAAAAAAAADmJ7AQ/original",source:"import { Dendrogram, G6 } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoDendrogram = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((data) => setData(treeToGraphData(data)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    compact: true,\n  };\n\n  return <Dendrogram {...options} />;\n};\n\nReactDOM.render(<DemoDendrogram />, document.getElementById('container'));\n",title:{zh:"水平紧凑树",en:"Horizontal Tidy Tree"},filename:"horizontal-tidy-tree.js",isNew:!1},{id:"vertical-tidy-tree",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GbheQoWEWREAAAAAAAAAAAAADmJ7AQ/original",source:"import { Dendrogram, G6 } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoDendrogram = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((data) => setData(treeToGraphData(data)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    direction: 'vertical',\n    compact: true,\n  };\n\n  return <Dendrogram {...options} />;\n};\n\nReactDOM.render(<DemoDendrogram />, document.getElementById('container'));\n",title:{zh:"垂直紧凑树",en:"Vertical Tidy Tree"},filename:"vertical-tidy-tree.js",isNew:!1},{id:"radial-tidy-tree",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*6xYwTbcLp20AAAAAAAAAAAAADmJ7AQ/original",source:"import { Dendrogram, G6 } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoDendrogram = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((data) => setData(treeToGraphData(data)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    direction: 'radial',\n    compact: true,\n  };\n\n  return <Dendrogram {...options} />;\n};\n\nReactDOM.render(<DemoDendrogram />, document.getElementById('container'));\n",title:{zh:"径向紧凑树",en:"Radial Tidy Tree"},filename:"radial-tidy-tree.js",isNew:!1}],icon:"",id:"dendrogram",title:{en:"Dendrogram",zh:"生态树"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:2},{demos:[{id:"right-children",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*5AQcToF_ArQAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, IndentedTree } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoIndentedTree = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n  };\n  return <IndentedTree {...options} />;\n};\n\nReactDOM.render(<DemoIndentedTree />, document.getElementById('container'));\n",title:{zh:"缩进树",en:"Indented Tree with Right Children"},filename:"right-children.js",isNew:!1},{id:"left-children",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*-0joTLCuEdgAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, IndentedTree } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoIndentedTree = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    mode: 'left',\n    autoFit: 'view',\n    data,\n  };\n  return <IndentedTree {...options} />;\n};\n\nReactDOM.render(<DemoIndentedTree />, document.getElementById('container'));\n",title:{zh:"缩进树-子节点左侧分布",en:"Indented Tree with Left Children"},filename:"left-children.js",isNew:!1},{id:"auto-children",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*t1XJQ477x58AAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, IndentedTree } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoIndentedTree = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    mode: 'alternate',\n    autoFit: 'view',\n    data,\n  };\n  return <IndentedTree {...options} />;\n};\n\nReactDOM.render(<DemoIndentedTree />, document.getElementById('container'));\n",title:{zh:"缩进树-子节点自动两侧分布",en:"Indented Tree with Auto Children"},filename:"auto-children.js",isNew:!1},{id:"linear-type",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*dATbQ4KqqJwAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, IndentedTree } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoIndentedTree = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    type: 'linear',\n    autoFit: 'view',\n    data,\n  };\n  return <IndentedTree {...options} />;\n};\n\nReactDOM.render(<DemoIndentedTree />, document.getElementById('container'));\n",title:{zh:"线条风格缩进树",en:"Indented Tree with Outlined Nodes"},filename:"linear-type.js",isNew:!1},{id:"boxed-type",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JZZVT5PsWPQAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, IndentedTree } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoIndentedTree = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    type: 'boxed',\n    autoFit: 'view',\n    data,\n  };\n  return <IndentedTree {...options} />;\n};\n\nReactDOM.render(<DemoIndentedTree />, document.getElementById('container'));\n",title:{zh:"方框风格缩进树",en:"Indented Tree with Boxed Nodes"},filename:"boxed-type.js",isNew:!1},{id:"collapse-expand",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*F_2pQIwP5s4AAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, IndentedTree } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoIndentedTree = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    type: 'boxed',\n    autoFit: 'view',\n    data,\n    transforms: (prev) => [\n      ...prev.filter((transform) => transform.type !== 'collapse-expand-react-node'),\n      {\n        ...prev.find((transform) => transform.type === 'collapse-expand-react-node'),\n        enable: true,\n      },\n    ],\n  };\n  return <IndentedTree {...options} />;\n};\n\nReactDOM.render(<DemoIndentedTree />, document.getElementById('container'));\n",title:{zh:"动态展开/收起子节点",en:"Expand/Collapse Children"},filename:"collapse-expand.js",isNew:!1}],icon:"",id:"indented-tree",title:{en:"Indented Tree",zh:"缩进树"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:3},{demos:[{id:"auto-children",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*1oVLTJtANRoAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"思维导图",en:"Mind Map with Auto Children"},filename:"auto-children.js",isNew:!1},{id:"right-children",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*KUJCT78B2p4AAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    mode: 'right',\n    autoFit: 'view',\n    data,\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"思维导图-子节点右侧分布",en:"Mind Map with Right Children"},filename:"right-children.js",isNew:!1},{id:"left-children",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*dXyvTJ2dh4wAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    mode: 'left',\n    autoFit: 'view',\n    data,\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"思维导图-子节点左侧分布",en:"Mind Map with Left Children"},filename:"left-children.js",isNew:!1},{id:"linear-type",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*K1f6T7pMh2AAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    type: 'linear',\n    autoFit: 'view',\n    data,\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"线条风格思维导图",en:"Mind Map with Outlined Nodes"},filename:"linear-type.js",isNew:!1},{id:"boxed-type",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*cce0Sa7DR3cAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    type: 'boxed',\n    autoFit: 'view',\n    data,\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"方框风格思维导图",en:"Mind Map with Boxed Nodes"},filename:"boxed-type.js",isNew:!1},{id:"custom-node",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*sB8PT7k8NmIAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap, RCNode, getNodeSide, measureTextSize } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData, idOf } = G6;\nconst { TextNode } = RCNode;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    node: {\n      style: {\n        component: (data) => {\n          return <TextNode type=\"outlined\" text={data.id} style={{ border: '2px dashed #1783ff' }} />;\n        },\n        size: (data) => measureTextSize(idOf(data), [24, 16]),\n        dx: function (data) {\n          const side = getNodeSide(this, data);\n          const size = measureTextSize(idOf(data), [24, 16]);\n          return side === 'left' ? -size[0] : side === 'center' ? -size[0] / 2 : 0;\n        },\n      },\n    },\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"自定义节点样式",en:"Mind Map with Custom Nodes"},filename:"custom-node.js",isNew:!1},{id:"collapse-expand",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*5TNBR5YBjlYAAAAAAAAAAAAADmJ7AQ/original",source:"import { G6, MindMap } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { treeToGraphData } = G6;\n\nconst DemoMindMap = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/algorithm-category.json')\n      .then((res) => res.json())\n      .then((res) => setData(treeToGraphData(res)));\n  }, []);\n\n  const options = {\n    type: 'boxed',\n    autoFit: 'view',\n    data,\n    transforms: (prev) => [\n      ...prev.filter((transform) => transform.type !== 'collapse-expand-react-node'),\n      {\n        ...prev.find((transform) => transform.type === 'collapse-expand-react-node'),\n        enable: true,\n      },\n    ],\n  };\n  return <MindMap {...options} />;\n};\n\nReactDOM.render(<DemoMindMap />, document.getElementById('container'));\n",title:{zh:"动态展开/收起子节点",en:"Expand/Collapse Children"},filename:"collapse-expand.js",isNew:!1}],icon:"",id:"mind-map",title:{en:"MindMap",zh:"思维导图"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:4},{demos:[{id:"default",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*DrXgSICG9EsAAAAAAAAAAAAADmJ7AQ/original",source:"import { OrganizationChart } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoOrganizationChart = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/organization-chart.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n  };\n  return <OrganizationChart {...options} />;\n};\n\nReactDOM.render(<DemoOrganizationChart />, document.getElementById('container'));\n",title:{zh:"组织结构图",en:"Default Organization Chart"},filename:"default.js",isNew:!1},{id:"complex-node",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*jgGCT7cMxg8AAAAAAAAAAAAADmJ7AQ/original",source:"import { OrganizationChart, RCNode } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { OrganizationChartNode } = RCNode;\n\nconst DemoOrganizationChart = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/organization-chart.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    padding: [40, 0, 0, 120],\n    autoFit: 'view',\n    data,\n    node: {\n      style: {\n        component: (d) => {\n          const { name, position, status } = d.data || {};\n          const isActive = d.states?.includes('active');\n          return <OrganizationChartNode name={name} position={position} status={status} isActive={isActive} />;\n        },\n        size: [240, 80],\n      },\n    },\n    edge: {\n      style: {\n        radius: 16,\n        lineWidth: 2,\n        endArrow: true,\n      },\n    },\n    layout: {\n      type: 'antv-dagre',\n      nodesep: 24,\n      ranksep: -10,\n    },\n    transforms: (prev) => [\n      ...prev.filter((transform) => transform.type !== 'collapse-expand-react-node'),\n      {\n        ...prev.find((transform) => transform.type === 'collapse-expand-react-node'),\n        enable: true,\n        iconOffsetY: 24,\n      },\n    ],\n  };\n  return <OrganizationChart {...options} />;\n};\n\nReactDOM.render(<DemoOrganizationChart />, document.getElementById('container'));\n",title:{zh:"复杂节点的组织结构图",en:"Organization Chart with Complex Nodes"},filename:"complex-node.js",isNew:!1},{id:"horizontal",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*9b1CQbVAYgMAAAAAAAAAAAAADmJ7AQ/original",source:"import { OrganizationChart, RCNode } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { OrganizationChartNode } = RCNode;\n\nconst DemoOrganizationChart = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/organization-chart.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    direction: 'horizontal',\n    padding: [40, 0, 0, 120],\n    autoFit: 'view',\n    data,\n    node: {\n      style: {\n        component: (d) => {\n          const { name, position, status } = d.data || {};\n          const isActive = d.states?.includes('active');\n          return <OrganizationChartNode name={name} position={position} status={status} isActive={isActive} />;\n        },\n        size: [240, 80],\n      },\n    },\n    edge: {\n      style: {\n        radius: 16,\n        lineWidth: 2,\n        endArrow: true,\n      },\n    },\n    layout: {\n      type: 'antv-dagre',\n      nodesep: -10,\n      ranksep: 80,\n    },\n    transforms: (prev) => [\n      ...prev.filter((transform) => transform.type !== 'collapse-expand-react-node'),\n      {\n        ...prev.find((transform) => transform.type === 'collapse-expand-react-node'),\n        enable: true,\n        iconOffsetX: 12,\n      },\n    ],\n  };\n  return <OrganizationChart {...options} />;\n};\n\nReactDOM.render(<DemoOrganizationChart />, document.getElementById('container'));\n",title:{zh:"至左向右的组织结构图",en:"Organization Chart from Left to Right"},filename:"horizontal.js",isNew:!1},{id:"custom-icon",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*N_DyQYva2YwAAAAAAAAAAAAADmJ7AQ/original",source:"import { CollapseExpandIcon, OrganizationChart } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { ArrowCountIcon } = CollapseExpandIcon;\n\nconst DemoOrganizationChart = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/organization-chart.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    transforms: (prev) => [\n      ...prev.filter((transform) => transform.type !== 'collapse-expand-react-node'),\n      {\n        ...prev.find((transform) => transform.type === 'collapse-expand-react-node'),\n        enable: true,\n        iconRender: function (isCollapsed, data) {\n          return <ArrowCountIcon style={{ display: 'flex' }} graph={this} data={data} isCollapsed={isCollapsed} />;\n        },\n      },\n    ],\n  };\n  return <OrganizationChart {...options} />;\n};\n\nReactDOM.render(<DemoOrganizationChart />, document.getElementById('container'));\n",title:{zh:"自定义收起图标",en:"Custom Collapse Icon"},filename:"custom-icon.js",isNew:!1}],icon:"",id:"organization-chart",title:{en:"Organization Chart",zh:"组织架构图"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:4},{demos:[{id:"default",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*q9AkRIF8fF4AAAAAAAAAAAAADmJ7AQ/original",source:"import { NetworkGraph } from '@ant-design/graphs';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoNetworkGraph = () => {\n  const [data, setData] = React.useState();\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/graph.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    node: {\n      palette: {\n        field: 'group',\n        color: ['#D580FF', '#4292C6'],\n      },\n    },\n    animation: false,\n  };\n  return <NetworkGraph {...options} />;\n};\n\nReactDOM.render(<DemoNetworkGraph />, document.getElementById('container'));\n",title:{zh:"网络图",en:"Default Network Graph"},filename:"default.js",isNew:!1}],icon:"",id:"network-graph",title:{en:"Network Graph",zh:"网络图"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:5},{demos:[{id:"default",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*YHZzS6I5T1cAAAAAAAAAAAAADmJ7AQ/original",source:"import { FlowDirectionGraph } from '@ant-design/graphs';\nimport React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoFlowDirectionGraph = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'center',\n    data,\n    transforms: (prev) => [\n      ...prev,\n      {\n        type: 'map-edge-line-width',\n        key: 'map-edge-line-width',\n        value: (d) => Math.random(),\n        minValue: 0,\n        maxValue: 1,\n        minLineWidth: 1,\n        maxLineWidth: 24,\n      },\n    ],\n    layout: {\n      type: 'antv-dagre',\n      nodesep: 10,\n      ranksep: 60,\n    },\n  };\n\n  return <FlowDirectionGraph {...options} />;\n};\n\nReactDOM.render(<DemoFlowDirectionGraph />, document.getElementById('container'));\n",title:{zh:"流向图",en:"Default Flow Direction Graph"},filename:"default.js",isNew:!1},{id:"custom",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*jOEPRKWxPE0AAAAAAAAAAAAADmJ7AQ/original",source:"import { FlowDirectionGraph } from '@ant-design/graphs';\nimport insertCss from 'insert-css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst data = {\n  nodes: [\n    {\n      id: 'node-0',\n      name: '页面-0',\n      layerName: '层级0',\n      measure: {\n        name: 'DAU',\n        value: 17500000000,\n        formattedValue: 175,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 1000000,\n          formattedValue: 100,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#F5A623',\n      },\n    },\n    {\n      id: 'node-1',\n      name: '页面1',\n      layerName: '层级0',\n      measure: {\n        name: 'DAU',\n        value: 5500000000,\n        formattedValue: 55,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 500000,\n          formattedValue: 50,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#F5A623',\n      },\n    },\n    {\n      id: 'node-2',\n      name: '页面2',\n      layerName: '层级0',\n      measure: {\n        name: 'DAU',\n        value: 1000000000,\n        formattedValue: 10,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 100000,\n          formattedValue: 10,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#F5A623',\n      },\n    },\n    {\n      id: 'node-3',\n      name: '页面3',\n      layerName: '层级0',\n      measure: {\n        name: 'DAU',\n        value: 900000000,\n        formattedValue: 9,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 50000,\n          formattedValue: 5,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#F5A623',\n      },\n    },\n    {\n      id: 'node-4',\n      name: '页面4',\n      layerName: '层级0',\n      measure: {\n        name: 'DAU',\n        value: 5700000000,\n        formattedValue: 57,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 60000,\n          formattedValue: 6,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#F5A623',\n      },\n    },\n    {\n      id: 'node-5',\n      name: '页面5',\n      layerName: '层级1',\n      measure: {\n        name: 'DAU',\n        value: 24000000000,\n        formattedValue: 240,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 1600000,\n          formattedValue: 160,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#4A90E2',\n      },\n    },\n    {\n      id: 'node-6',\n      name: '页面6',\n      layerName: '层级1',\n      measure: {\n        name: 'DAU',\n        value: 6600000000,\n        formattedValue: 66,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 110000,\n          formattedValue: 11,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#4A90E2',\n      },\n    },\n    {\n      id: 'node-7',\n      name: '页面7',\n      layerName: '层级2',\n      measure: {\n        name: 'DAU',\n        value: 5000000000,\n        formattedValue: 50,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 500000,\n          formattedValue: 50,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#7ED321',\n      },\n    },\n    {\n      id: 'node-8',\n      name: '页面8',\n      layerName: '层级2',\n      measure: {\n        name: 'DAU',\n        value: 5000000000,\n        formattedValue: 50,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 500000,\n          formattedValue: 50,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#7ED321',\n      },\n    },\n    {\n      id: 'node-9',\n      name: '页面9',\n      layerName: '层级2',\n      measure: {\n        name: 'DAU',\n        value: 90000000000,\n        formattedValue: 90,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 500000,\n          formattedValue: 50,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#7ED321',\n      },\n    },\n    {\n      id: 'node-10',\n      name: '页面10',\n      layerName: '层级2',\n      measure: {\n        name: 'DAU',\n        value: 100000000000,\n        formattedValue: 100,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 100000,\n          formattedValue: 10,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#7ED321',\n      },\n    },\n    {\n      id: 'node-11',\n      name: '页面11',\n      layerName: '层级2',\n      measure: {\n        name: 'DAU',\n        value: 1000000000,\n        formattedValue: 10,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 90000,\n          formattedValue: 9,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#7ED321',\n      },\n    },\n    {\n      id: 'node-12',\n      name: '页面12',\n      layerName: '层级2',\n      measure: {\n        name: 'DAU',\n        value: 600000000,\n        formattedValue: 6,\n        formattedUnit: '万',\n      },\n      relatedMeasures: [\n        {\n          name: 'MAU',\n          value: 10000,\n          formattedValue: 1,\n          formattedUnit: '万',\n        },\n      ],\n      compareMeasures: [],\n      style: {\n        stroke: '#7ED321',\n      },\n    },\n  ],\n  edges: [\n    {\n      id: 'edge-0',\n      source: 'node-0',\n      target: 'node-5',\n      measure: {\n        name: 'DAU',\n        value: 17500000000,\n        formattedValue: 175,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-1',\n      source: 'node-1',\n      target: 'node-5',\n      measure: {\n        name: 'DAU',\n        value: 5500000000,\n        formattedValue: 55,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-2',\n      source: 'node-2',\n      target: 'node-5',\n      measure: {\n        name: 'DAU',\n        value: 1000000000,\n        formattedValue: 10,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-3',\n      source: 'node-3',\n      target: 'node-6',\n      measure: {\n        name: 'DAU',\n        value: 900000000,\n        formattedValue: 9,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-4',\n      source: 'node-5',\n      target: 'node-7',\n      measure: {\n        name: 'DAU',\n        value: 5000000000,\n        formattedValue: 50,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-5',\n      source: 'node-5',\n      target: 'node-8',\n      measure: {\n        name: 'DAU',\n        value: 5000000000,\n        formattedValue: 50,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-6',\n      source: 'node-5',\n      target: 'node-9',\n      measure: {\n        name: 'DAU',\n        value: 9000000000,\n        formattedValue: 90,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-7',\n      source: 'node-5',\n      target: 'node-10',\n      measure: {\n        name: 'DAU',\n        value: 5000000000,\n        formattedValue: 50,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-8',\n      source: 'node-6',\n      target: 'node-11',\n      measure: {\n        name: 'DAU',\n        value: 1000000000,\n        formattedValue: 10,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-9',\n      source: 'node-4',\n      target: 'node-6',\n      measure: {\n        name: 'DAU',\n        value: 5700000000,\n        formattedValue: 57,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-11',\n      source: 'node-6',\n      target: 'node-12',\n      measure: {\n        name: 'DAU',\n        value: 600000000,\n        formattedValue: 6,\n        formattedUnit: '万',\n      },\n    },\n    {\n      id: 'edge-12',\n      source: 'node-6',\n      target: 'node-10',\n      measure: {\n        name: 'DAU',\n        value: 5000000000,\n        formattedValue: 50,\n        formattedUnit: '万',\n      },\n    },\n  ],\n};\n\ninsertCss(`\n  .user-flow-node {\n    width: calc(100% - 32px);\n    height: calc(100% - 32px);\n    background-color: #f6f7f9;\n    border-radius: 8px;\n    padding: 16px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12), 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n    box-sizing: content-box;\n  }\n\n  .user-flow-node-name {\n    font-size: 16px;\n    font-weight: bold;\n    color: #252525;\n    margin-bottom: 8px;\n  }\n\n  .user-flow-node-metric {\n    font-size: 12px;\n    color: #666666;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .user-flow-node-metric--value {\n    font-weight: bold;\n  }\n`);\n\nconst UserFlowNode = ({ data }) => {\n  const metrics = [\n    { name: 'DAU', value: data.measure.formattedValue + data.measure.formattedUnit },\n    { name: 'MAU', value: data.relatedMeasures[0].formattedValue + data.relatedMeasures[0].formattedUnit },\n  ];\n\n  return (\n    <div className=\"user-flow-node\">\n      <div className=\"user-flow-node-name\">{data.name}</div>\n      {metrics.map((metric) => (\n        <div className=\"user-flow-node-metric\" key={metric.name}>\n          <div className=\"user-flow-node-metric-name\">{metric.name}</div>\n          <div className=\"user-flow-node-metric-value\">{metric.value}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst transformData = (data) => {\n  const REF_NODE_IDS = ['node-5', 'node-6'];\n  const findNodeById = (id) => data.nodes.find((node) => node.id === id);\n  data.edges.forEach((edge) => {\n    edge.data ||= {};\n    const isSplit = REF_NODE_IDS.includes(edge.source);\n    edge.data.type = isSplit ? 'split' : 'proportion';\n    edge.data.ratio = edge.measure.value / findNodeById(isSplit ? edge.source : edge.target).measure.value;\n  });\n  return data;\n};\n\nconst DemoFlowDirectionGraph = () => {\n  const options = {\n    autoFit: 'view',\n    padding: 120,\n    data: transformData(data),\n    node: {\n      style: {\n        component: (data) => <UserFlowNode data={data} />,\n        size: [160, 90],\n      },\n    },\n    edge: {\n      style: {\n        stroke: (d) =>\n          d.data.type === 'split' ? 'l(0) 0:#F04864 0.5:#7EC2F3 1:#1890FF' : 'l(0) 0:#1890FF 0.5:#7EC2F3 1:#F04864',\n        labelText: (d) => {\n          const { type, ratio } = d.data;\n          const text = type === 'split' ? '分流' : '占比';\n          return `${text} ${(Number(ratio) * 100).toFixed(2)}%`;\n        },\n        labelBackground: true,\n      },\n    },\n    transforms: (prev) => [\n      ...prev,\n      {\n        type: 'map-edge-line-width',\n        key: 'map-edge-line-width',\n        value: (d) => d.data.ratio,\n        minValue: 0,\n        maxValue: 1,\n        minLineWidth: 1,\n        maxLineWidth: 32,\n      },\n    ],\n    layout: {\n      type: 'antv-dagre',\n      nodesep: -10,\n      ranksep: 100,\n    },\n  };\n\n  return <FlowDirectionGraph {...options} />;\n};\n\nReactDOM.render(<DemoFlowDirectionGraph />, document.getElementById('container'));\n",title:{zh:"自定义流向图",en:"Custom Flow Direction Graph"},filename:"custom.js",isNew:!1}],icon:"",id:"flow-direction-graph",title:{en:"Flow Direction Graph",zh:"流向图"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:6},{demos:[{id:"default",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xldIRYgq6mAAAAAAAAAAAAAADmJ7AQ/original",source:"import { FlowGraph } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst DemoFlowGraph = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'center',\n    data,\n  };\n\n  return <FlowGraph {...options} />;\n};\n\nReactDOM.render(<DemoFlowGraph />, document.getElementById('container'));\n",title:{zh:"流程图",en:"Default Flow Graph"},filename:"default.js",isNew:!1},{id:"hover-activate-chain",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*yGZwTKZwNaAAAAAAAAAAAAAADmJ7AQ/original",source:"import { FlowGraph, RCNode } from '@ant-design/graphs';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { TextNode } = RCNode;\n\nconst DemoFlowGraph = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/g6/flow-analysis.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'center',\n    data,\n    node: {\n      style: {\n        component: (d) => {\n          const isActive = d.states?.includes('active');\n          return <TextNode text={d.id} isActive={isActive} type=\"outlined\" />;\n        },\n      },\n    },\n    behaviors: (prev) => [...prev, 'hover-activate-chain'],\n  };\n\n  return <FlowGraph {...options} />;\n};\n\nReactDOM.render(<DemoFlowGraph />, document.getElementById('container'));\n",title:{zh:"高亮元素及其所在链路",en:"Highlight Element and Its Chain"},filename:"hover-activate-chain.js",isNew:!1},{id:"task-scheduling-flow-graph",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*yd-WSLmyxAkAAAAAAAAAAAAADmJ7AQ/original",source:"import { FlowGraph } from '@ant-design/graphs';\nimport { Typography } from 'antd';\nimport insertCss from 'insert-css';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst { Text } = Typography;\n\ninsertCss(`\n  .end-node {\n    width: inherit;\n    height: inherit;\n    box-sizing: border-box;\n    border: 1px solid #f1f5fe;\n    border-radius: 4px;\n    display: flex;\n    font-size: 12px;\n  }\n  .end-node-name {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .end-node-type {\n    width: 40px;\n    background: #f1f5fe;\n    color: #808692;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .task-node {\n    width: inherit;\n    height: inherit;\n    border-radius: 4px;\n    color: #fff;\n    align-content: center;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .task-node-title {\n    height: 50%;\n  }\n\n  .task-node-name {\n    font-size: 12px;\n    padding-left: 6px;\n    color: #fff;\n  }\n\n  .task-node-delay {\n    font-size: 12px;\n    padding-left: 6px;\n    color: #252525;\n    flex: 1;\n    align-content: center;\n  }\n  `);\n\nconst EndNode = (props) => {\n  const {\n    data: { type, name },\n  } = props;\n  return (\n    <div className=\"end-node\">\n      <div className=\"end-node-type\">{type === 'source' ? '来源' : '结束'}</div>\n      <div className=\"end-node-name\">{name}</div>\n    </div>\n  );\n};\n\nconst TaskNode = (props) => {\n  const {\n    data: { type, name, delay },\n    isActive,\n  } = props;\n\n  const colors = ['#1890ff', '#52c41a', '#ff4d4f'];\n  const lightColors = ['rgba(24, 144, 255, 0.5)', 'rgba(82, 196, 26, 0.5)', 'rgba(255, 77, 79, 0.5)'];\n\n  const getColor = (colors) => (type === 'store' ? colors[0] : Number(delay) < 10 ? colors[1] : colors[2]);\n\n  return (\n    <div className=\"task-node\" style={{ border: `1px solid ${getColor(isActive ? colors : lightColors)}` }}>\n      <div className=\"task-node-title\" style={{ backgroundColor: getColor(colors) }}>\n        <Text className=\"task-node-name\" ellipsis={{ tooltip: true }}>\n          {name}\n        </Text>\n      </div>\n\n      <div className=\"task-node-delay\">{`delay: ${delay}min`}</div>\n    </div>\n  );\n};\n\nconst DemoFlowGraph = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/antd-charts/task-scheduling.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'center',\n    data,\n    node: {\n      style: {\n        component: (d) => {\n          const isActive = d.states?.includes('active');\n          const Component = ['source', 'target'].includes(d.data.type) ? EndNode : TaskNode;\n          return <Component data={d.data} isActive={isActive} />;\n        },\n        size: (d) => (['source', 'target'].includes(d.data.type) ? [120, 40] : [194, 58]),\n      },\n    },\n    edge: {\n      style: {\n        lineWidth: 1,\n      },\n      state: {\n        active: {\n          stroke: '#1890ff',\n          halo: false,\n        },\n      },\n    },\n    layout: {\n      type: 'dagre',\n      nodeSize: [194, 58],\n      nodesep: 40,\n      ranksep: 80,\n    },\n    behaviors: (prev) => [...prev, 'hover-activate-chain'],\n  };\n\n  return <FlowGraph {...options} />;\n};\n\nReactDOM.render(<DemoFlowGraph />, document.getElementById('container'));\n",title:{zh:"任务调度流程图",en:"Task Scheduling Flow Graph"},filename:"task-scheduling-flow-graph.js",isNew:!1},{id:"product-launch-flow-graph",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*n9JgQIGi9BQAAAAAAAAAAAAADmJ7AQ/original",source:"import { FlowGraph } from '@ant-design/graphs';\nimport insertCss from 'insert-css';\nimport { isBoolean } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\ninsertCss(`\n  .step-card-wrapper {\n    height: 58px;\n    width: 120px;\n    background: #ecf2fe;\n    border-radius: 4px;\n    box-sizing: border-box;\n    padding: 6px 12px;\n    font-size: 10px;\n    font-weight: 500;\n    color: #252525;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    .elapsed-time {\n      margin-top: 8px;\n\n      .elapsed-time-title {\n        color: #aaa;\n        font-size: 8px;\n      }\n    }\n  }\n\n  .step-group-card-wrapper {\n    width: inherit;\n    height: inherit;\n    border-radius: 4px;\n    box-sizing: border-box;\n    border: 1px solid #eee;\n\n    .header {\n      height: 32px;\n      line-height: 32px;\n      background-color: #3875f7;\n      color: #fff;\n      border-radius: 4px 4px 0 0;\n      display: flex;\n      font-size: 10px;\n      padding: 0 12px;\n      gap: 2px;\n\n      .header-content {\n        flex: 1;\n        display: flex;\n        justify-content: space-between;\n\n        .elapsed-time {\n          display: flex;\n          gap: 2px;\n          font-size: 9px;\n\n          &-title {\n            color: #acc7fb;\n          }\n        }\n      }\n\n      .header-extra {\n        cursor: pointer;\n        width: fit-content;\n        color: #acc7fb;\n      }\n    }\n\n    .header-collapsed {\n      border-radius: 4px;\n    }\n\n    .step-card-group {\n      display: flex;\n      gap: 8px;\n      flex-direction: column;\n      align-items: center;\n      padding: 16px 0;\n    }\n  }\n`);\n\nconst StepCard = ({ name, elapsed_time }) => {\n  return (\n    <div className=\"step-card-wrapper\">\n      <div className=\"name\">{name}</div>\n      {elapsed_time && (\n        <div className=\"elapsed-time\">\n          <div className=\"elapsed-time-title\">80分位耗时</div>\n          <div className=\"elapsed-time-value\">{elapsed_time}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst StepGroupCard = (props) => {\n  const { name, elapsed_time, children, isCollapsed, toggleCollapse } = props;\n  return (\n    <div className=\"step-group-card-wrapper\" $isCollapsed={isCollapsed}>\n      <div className={`header ${isCollapsed ? 'header-collapsed' : ''}`}>\n        <div className=\"header-content\">\n          <div className=\"name\">{name}</div>\n          {elapsed_time && (\n            <div className=\"elapsed-time\">\n              <div className=\"elapsed-time-title\">80分位耗时</div>\n              <div className=\"elapsed-time-value\">{elapsed_time}</div>\n            </div>\n          )}\n        </div>\n        <div className=\"header-extra\" onClick={toggleCollapse}>\n          {isCollapsed ? '展开' : '收起'}\n        </div>\n      </div>\n      {!isCollapsed && (\n        <div className=\"step-card-group\">\n          {children?.map((child, index) => (\n            <StepCard key={index} {...child} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction isGroupCollapsed(data) {\n  return isBoolean(data.style?.collapsed) ? data.style?.collapsed : data.data.status === 'finished';\n}\n\nfunction isSingleStep(data) {\n  return !data.data.children;\n}\n\nconst DemoFlowGraph = () => {\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/antd-charts/product-activation.json')\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  const options = {\n    autoFit: 'view',\n    data,\n    node: {\n      style: {\n        component: function (data) {\n          if (isSingleStep(data)) return <StepCard {...data.data} />;\n          const toggleCollapse = async () => {\n            const graph = this;\n            graph.updateNodeData([{ id: data.id, style: { collapsed: !isGroupCollapsed(data) } }]);\n            await graph.render();\n          };\n          return <StepGroupCard {...data.data} isCollapsed={isGroupCollapsed(data)} toggleCollapse={toggleCollapse} />;\n        },\n        size: (data) => {\n          if (isSingleStep(data)) return [120, 58];\n          const GAP = 8;\n          const height = isGroupCollapsed(data) ? 32 : 56 + (58 + GAP) * (data.data?.children?.length || 0);\n          return [200, height];\n        },\n      },\n    },\n    edge: {\n      style: {\n        lineWidth: 1,\n        labelBackground: true,\n        labelBackgroundOpacity: 1,\n        labelFill: '#aaa',\n        labelFontSize: 8,\n        labelFontWeight: 500,\n        labelText: (data) => (data.data?.elapsed_time ? `80分位耗时\\n${data.data.elapsed_time}` : ''),\n      },\n    },\n    layout: {\n      type: 'dagre',\n      nodeSize: (data) => (isSingleStep(data) ? 160 : 400),\n      animation: false,\n    },\n  };\n\n  return <FlowGraph {...options} />;\n};\n\nReactDOM.render(<DemoFlowGraph />, document.getElementById('container'));\n",title:{zh:"产品开通动线图",en:"Product Launch Flow Graph"},filename:"product-launch-flow-graph.js",isNew:!1}],icon:"",id:"flow-graph",title:{en:"Flowchart",zh:"流程图"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:7}],childrenKey:"examples"}]}},children:n})}}}]);